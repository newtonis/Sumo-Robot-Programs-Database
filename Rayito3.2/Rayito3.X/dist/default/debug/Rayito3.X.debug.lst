

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Feb  8 19:59:43 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.41
    44                           ; Generated 25/01/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  00137A                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _ls
    83  00137A  0008               	dw	8
    84  00137C  0007               	dw	7
    85  00137E  0006               	dw	6
    86  001380  0004               	dw	4
    87  001382  0002               	dw	2
    88                           
    89                           ;initializer for _es
    90  001384  0003               	dw	3
    91  001386  0005               	dw	5
    92                           
    93                           ;initializer for _cs
    94  001388  0000               	dw	0
    95  00138A  0001               	dw	1
    96                           
    97                           	psect	mediumconst
    98  007BF4                     __pmediumconst:
    99                           	opt stack 0
   100  007BF4  00                 	db	0
   101  007BF5                     _dpowers:
   102                           	opt stack 0
   103  007BF5  0001               	dw	1
   104  007BF7  000A               	dw	10
   105  007BF9  0064               	dw	100
   106  007BFB  03E8               	dw	1000
   107  007BFD  2710               	dw	10000
   108  007BFF                     __end_of_dpowers:
   109                           	opt stack 0
   110  0000                     _PORTEbits	set	3972
   111  0000                     _TRISEbits	set	3990
   112  0000                     _TRISAbits	set	3986
   113  0000                     _TRISDbits	set	3989
   114  0000                     _TRISCbits	set	3988
   115  0000                     _TRISBbits	set	3987
   116  0000                     _UCFGbits	set	3951
   117  0000                     _UCONbits	set	3949
   118  0000                     _PORTAbits	set	3968
   119  0000                     _PORTCbits	set	3970
   120  0000                     _PORTBbits	set	3969
   121  0000                     _PORTDbits	set	3971
   122  0000                     _TXREG	set	4013
   123  0000                     _RCSTAbits	set	4011
   124  0000                     _TXSTAbits	set	4012
   125  0000                     _SPBRGH	set	4016
   126  0000                     _SPBRG	set	4015
   127  0000                     _BAUDCONbits	set	4024
   128  0000                     _CCPR2L	set	4027
   129  0000                     _CCPR1L	set	4030
   130  0000                     _CCP2CONbits	set	4026
   131  0000                     _CCP1CONbits	set	4029
   132  0000                     _PR2	set	4043
   133  0000                     _T2CONbits	set	4042
   134  0000                     _TMR1L	set	4046
   135  0000                     _TMR1H	set	4047
   136  0000                     _T1CONbits	set	4045
   137  0000                     _RCONbits	set	4048
   138  0000                     _CMCON	set	4020
   139  0000                     _OSCCONbits	set	4051
   140  0000                     _ADRESL	set	4035
   141  0000                     _ADRESH	set	4036
   142  0000                     _ADCON0bits	set	4034
   143  0000                     _ADCON2bits	set	4032
   144  0000                     _ADCON1bits	set	4033
   145  0000                     _TXIF	set	31988
   146  0000                     _T2CKPS1	set	32337
   147  0000                     _T2CKPS0	set	32336
   148  0000                     _TMR2ON	set	32338
   149  0000                     _T2OUTPS3	set	32342
   150  0000                     _T2OUTPS2	set	32341
   151  0000                     _T2OUTPS1	set	32340
   152  0000                     _T2OUTPS0	set	32339
   153  0000                     _TMR0L	set	4054
   154  0000                     _TMR0H	set	4055
   155  0000                     _T0CONbits	set	4053
   156  0000                     _INTCONbits	set	4082
   157  0000                     _INTCON2bits	set	4081
   158  0000                     _TMR0IF	set	32658
   159  007BFF                     STR_3:
   160  007BFF  7B                 	db	123
   161  007C00  27                 	db	39
   162  007C01  43                 	db	67	;'C'
   163  007C02  4F                 	db	79	;'O'
   164  007C03  4D                 	db	77	;'M'
   165  007C04  27                 	db	39
   166  007C05  3A                 	db	58	;':'
   167  007C06  27                 	db	39
   168  007C07  6C                 	db	108	;'l'
   169  007C08  69                 	db	105	;'i'
   170  007C09  6E                 	db	110	;'n'
   171  007C0A  65                 	db	101	;'e'
   172  007C0B  27                 	db	39
   173  007C0C  2C                 	db	44
   174  007C0D  27                 	db	39
   175  007C0E  76                 	db	118	;'v'
   176  007C0F  61                 	db	97	;'a'
   177  007C10  6C                 	db	108	;'l'
   178  007C11  75                 	db	117	;'u'
   179  007C12  65                 	db	101	;'e'
   180  007C13  27                 	db	39
   181  007C14  3A                 	db	58	;':'
   182  007C15  27                 	db	39
   183  007C16  43                 	db	67	;'C'
   184  007C17  61                 	db	97	;'a'
   185  007C18  6C                 	db	108	;'l'
   186  007C19  69                 	db	105	;'i'
   187  007C1A  62                 	db	98	;'b'
   188  007C1B  72                 	db	114	;'r'
   189  007C1C  61                 	db	97	;'a'
   190  007C1D  74                 	db	116	;'t'
   191  007C1E  69                 	db	105	;'i'
   192  007C1F  6F                 	db	111	;'o'
   193  007C20  6E                 	db	110	;'n'
   194  007C21  20                 	db	32
   195  007C22  66                 	db	102	;'f'
   196  007C23  69                 	db	105	;'i'
   197  007C24  6E                 	db	110	;'n'
   198  007C25  69                 	db	105	;'i'
   199  007C26  73                 	db	115	;'s'
   200  007C27  68                 	db	104	;'h'
   201  007C28  65                 	db	101	;'e'
   202  007C29  64                 	db	100	;'d'
   203  007C2A  27                 	db	39
   204  007C2B  7D                 	db	125
   205  007C2C  0A                 	db	10
   206  007C2D  00                 	db	0
   207  007C2E                     STR_2:
   208  007C2E  7B                 	db	123
   209  007C2F  27                 	db	39
   210  007C30  43                 	db	67	;'C'
   211  007C31  4F                 	db	79	;'O'
   212  007C32  4D                 	db	77	;'M'
   213  007C33  27                 	db	39
   214  007C34  3A                 	db	58	;':'
   215  007C35  27                 	db	39
   216  007C36  6C                 	db	108	;'l'
   217  007C37  69                 	db	105	;'i'
   218  007C38  6E                 	db	110	;'n'
   219  007C39  65                 	db	101	;'e'
   220  007C3A  27                 	db	39
   221  007C3B  2C                 	db	44
   222  007C3C  27                 	db	39
   223  007C3D  76                 	db	118	;'v'
   224  007C3E  61                 	db	97	;'a'
   225  007C3F  6C                 	db	108	;'l'
   226  007C40  75                 	db	117	;'u'
   227  007C41  65                 	db	101	;'e'
   228  007C42  27                 	db	39
   229  007C43  3A                 	db	58	;':'
   230  007C44  27                 	db	39
   231  007C45  43                 	db	67	;'C'
   232  007C46  61                 	db	97	;'a'
   233  007C47  6C                 	db	108	;'l'
   234  007C48  69                 	db	105	;'i'
   235  007C49  62                 	db	98	;'b'
   236  007C4A  72                 	db	114	;'r'
   237  007C4B  61                 	db	97	;'a'
   238  007C4C  74                 	db	116	;'t'
   239  007C4D  69                 	db	105	;'i'
   240  007C4E  6F                 	db	111	;'o'
   241  007C4F  6E                 	db	110	;'n'
   242  007C50  20                 	db	32
   243  007C51  73                 	db	115	;'s'
   244  007C52  74                 	db	116	;'t'
   245  007C53  61                 	db	97	;'a'
   246  007C54  72                 	db	114	;'r'
   247  007C55  74                 	db	116	;'t'
   248  007C56  65                 	db	101	;'e'
   249  007C57  64                 	db	100	;'d'
   250  007C58  27                 	db	39
   251  007C59  7D                 	db	125
   252  007C5A  0A                 	db	10
   253  007C5B  00                 	db	0
   254  007C5C                     STR_6:
   255  007C5C  7B                 	db	123
   256  007C5D  27                 	db	39
   257  007C5E  43                 	db	67	;'C'
   258  007C5F  4F                 	db	79	;'O'
   259  007C60  4D                 	db	77	;'M'
   260  007C61  27                 	db	39
   261  007C62  3A                 	db	58	;':'
   262  007C63  27                 	db	39
   263  007C64  70                 	db	112	;'p'
   264  007C65  6C                 	db	108	;'l'
   265  007C66  6F                 	db	111	;'o'
   266  007C67  74                 	db	116	;'t'
   267  007C68  27                 	db	39
   268  007C69  2C                 	db	44
   269  007C6A  20                 	db	32
   270  007C6B  27                 	db	39
   271  007C6C  6E                 	db	110	;'n'
   272  007C6D  61                 	db	97	;'a'
   273  007C6E  6D                 	db	109	;'m'
   274  007C6F  65                 	db	101	;'e'
   275  007C70  27                 	db	39
   276  007C71  3A                 	db	58	;':'
   277  007C72  27                 	db	39
   278  007C73  50                 	db	80	;'P'
   279  007C74  6C                 	db	108	;'l'
   280  007C75  6F                 	db	111	;'o'
   281  007C76  74                 	db	116	;'t'
   282  007C77  20                 	db	32
   283  007C78  31                 	db	49	;'1'
   284  007C79  27                 	db	39
   285  007C7A  2C                 	db	44
   286  007C7B  27                 	db	39
   287  007C7C  76                 	db	118	;'v'
   288  007C7D  61                 	db	97	;'a'
   289  007C7E  6C                 	db	108	;'l'
   290  007C7F  75                 	db	117	;'u'
   291  007C80  65                 	db	101	;'e'
   292  007C81  27                 	db	39
   293  007C82  3A                 	db	58	;':'
   294  007C83  25                 	db	37
   295  007C84  64                 	db	100	;'d'
   296  007C85  7D                 	db	125
   297  007C86  0A                 	db	10
   298  007C87  00                 	db	0
   299  007C88                     STR_5:
   300  007C88  7B                 	db	123
   301  007C89  27                 	db	39
   302  007C8A  43                 	db	67	;'C'
   303  007C8B  4F                 	db	79	;'O'
   304  007C8C  4D                 	db	77	;'M'
   305  007C8D  27                 	db	39
   306  007C8E  3A                 	db	58	;':'
   307  007C8F  27                 	db	39
   308  007C90  6C                 	db	108	;'l'
   309  007C91  69                 	db	105	;'i'
   310  007C92  6E                 	db	110	;'n'
   311  007C93  65                 	db	101	;'e'
   312  007C94  27                 	db	39
   313  007C95  2C                 	db	44
   314  007C96  27                 	db	39
   315  007C97  76                 	db	118	;'v'
   316  007C98  61                 	db	97	;'a'
   317  007C99  6C                 	db	108	;'l'
   318  007C9A  75                 	db	117	;'u'
   319  007C9B  65                 	db	101	;'e'
   320  007C9C  27                 	db	39
   321  007C9D  3A                 	db	58	;':'
   322  007C9E  27                 	db	39
   323  007C9F  25                 	db	37
   324  007CA0  64                 	db	100	;'d'
   325  007CA1  20                 	db	32
   326  007CA2  3A                 	db	58	;':'
   327  007CA3  20                 	db	32
   328  007CA4  5B                 	db	91	;'['
   329  007CA5  25                 	db	37
   330  007CA6  30                 	db	48	;'0'
   331  007CA7  34                 	db	52	;'4'
   332  007CA8  64                 	db	100	;'d'
   333  007CA9  2C                 	db	44
   334  007CAA  25                 	db	37
   335  007CAB  30                 	db	48	;'0'
   336  007CAC  34                 	db	52	;'4'
   337  007CAD  64                 	db	100	;'d'
   338  007CAE  5D                 	db	93	;']'
   339  007CAF  27                 	db	39
   340  007CB0  7D                 	db	125
   341  007CB1  0A                 	db	10
   342  007CB2  00                 	db	0
   343  007CB3                     STR_1:
   344  007CB3  7B                 	db	123
   345  007CB4  27                 	db	39
   346  007CB5  43                 	db	67	;'C'
   347  007CB6  4F                 	db	79	;'O'
   348  007CB7  4D                 	db	77	;'M'
   349  007CB8  27                 	db	39
   350  007CB9  3A                 	db	58	;':'
   351  007CBA  27                 	db	39
   352  007CBB  6C                 	db	108	;'l'
   353  007CBC  69                 	db	105	;'i'
   354  007CBD  6E                 	db	110	;'n'
   355  007CBE  65                 	db	101	;'e'
   356  007CBF  27                 	db	39
   357  007CC0  2C                 	db	44
   358  007CC1  27                 	db	39
   359  007CC2  76                 	db	118	;'v'
   360  007CC3  61                 	db	97	;'a'
   361  007CC4  6C                 	db	108	;'l'
   362  007CC5  75                 	db	117	;'u'
   363  007CC6  65                 	db	101	;'e'
   364  007CC7  27                 	db	39
   365  007CC8  3A                 	db	58	;':'
   366  007CC9  27                 	db	39
   367  007CCA  52                 	db	82	;'R'
   368  007CCB  6F                 	db	111	;'o'
   369  007CCC  62                 	db	98	;'b'
   370  007CCD  6F                 	db	111	;'o'
   371  007CCE  74                 	db	116	;'t'
   372  007CCF  20                 	db	32
   373  007CD0  73                 	db	115	;'s'
   374  007CD1  74                 	db	116	;'t'
   375  007CD2  61                 	db	97	;'a'
   376  007CD3  72                 	db	114	;'r'
   377  007CD4  74                 	db	116	;'t'
   378  007CD5  65                 	db	101	;'e'
   379  007CD6  64                 	db	100	;'d'
   380  007CD7  27                 	db	39
   381  007CD8  7D                 	db	125
   382  007CD9  0A                 	db	10
   383  007CDA  00                 	db	0
   384  007CDB                     STR_4:
   385  007CDB  7B                 	db	123
   386  007CDC  27                 	db	39
   387  007CDD  43                 	db	67	;'C'
   388  007CDE  4F                 	db	79	;'O'
   389  007CDF  4D                 	db	77	;'M'
   390  007CE0  27                 	db	39
   391  007CE1  3A                 	db	58	;':'
   392  007CE2  27                 	db	39
   393  007CE3  6C                 	db	108	;'l'
   394  007CE4  69                 	db	105	;'i'
   395  007CE5  6E                 	db	110	;'n'
   396  007CE6  65                 	db	101	;'e'
   397  007CE7  27                 	db	39
   398  007CE8  2C                 	db	44
   399  007CE9  27                 	db	39
   400  007CEA  76                 	db	118	;'v'
   401  007CEB  61                 	db	97	;'a'
   402  007CEC  6C                 	db	108	;'l'
   403  007CED  75                 	db	117	;'u'
   404  007CEE  65                 	db	101	;'e'
   405  007CEF  27                 	db	39
   406  007CF0  3A                 	db	58	;':'
   407  007CF1  27                 	db	39
   408  007CF2  52                 	db	82	;'R'
   409  007CF3  65                 	db	101	;'e'
   410  007CF4  73                 	db	115	;'s'
   411  007CF5  75                 	db	117	;'u'
   412  007CF6  6C                 	db	108	;'l'
   413  007CF7  74                 	db	116	;'t'
   414  007CF8  73                 	db	115	;'s'
   415  007CF9  20                 	db	32
   416  007CFA  3A                 	db	58	;':'
   417  007CFB  27                 	db	39
   418  007CFC  7D                 	db	125
   419  007CFD  0A                 	db	10
   420  007CFE  00                 	db	0
   421                           
   422                           ; #config settings
   423  007CFF  00                 	db	0	; dummy byte at the end
   424  0000                     
   425                           	psect	cinit
   426  0011F4                     __pcinit:
   427                           	opt stack 0
   428  0011F4                     start_initialization:
   429                           	opt stack 0
   430  0011F4                     __initialization:
   431                           	opt stack 0
   432                           
   433                           ; Initialize objects allocated to COMRAM (18 bytes)
   434                           ; load TBLPTR registers with __pidataCOMRAM
   435  0011F4  0E7A               	movlw	low __pidataCOMRAM
   436  0011F6  6EF6               	movwf	tblptrl,c
   437  0011F8  0E13               	movlw	high __pidataCOMRAM
   438  0011FA  6EF7               	movwf	tblptrh,c
   439  0011FC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   440  0011FE  6EF8               	movwf	tblptru,c
   441  001200  EE00  F036         	lfsr	0,__pdataCOMRAM
   442  001204  EE10 F012          	lfsr	1,18
   443  001208                     copy_data0:
   444  001208  0009               	tblrd		*+
   445  00120A  CFF5 FFEE          	movff	tablat,postinc0
   446  00120E  50E5               	movf	postdec1,w,c
   447  001210  50E1               	movf	fsr1l,w,c
   448  001212  E1FA               	bnz	copy_data0
   449                           
   450                           ; Clear objects allocated to BANK0 (86 bytes)
   451  001214  EE00  F060         	lfsr	0,__pbssBANK0
   452  001218  0E56               	movlw	86
   453  00121A                     clear_0:
   454  00121A  6AEE               	clrf	postinc0,c
   455  00121C  06E8               	decf	wreg,f,c
   456  00121E  E1FD               	bnz	clear_0
   457                           
   458                           ; Clear objects allocated to COMRAM (6 bytes)
   459  001220  6A4D               	clrf	(__pbssCOMRAM+5)& (0+255),c
   460  001222  6A4C               	clrf	(__pbssCOMRAM+4)& (0+255),c
   461  001224  6A4B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   462  001226  6A4A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   463  001228  6A49               	clrf	(__pbssCOMRAM+1)& (0+255),c
   464  00122A  6A48               	clrf	__pbssCOMRAM& (0+255),c
   465  00122C                     end_of_initialization:
   466                           	opt stack 0
   467  00122C                     __end_of__initialization:
   468                           	opt stack 0
   469  00122C  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   470  00122E  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   471  001230  0E00               	movlw	low (__Lmediumconst shr (0+16))
   472  001232  6EF8               	movwf	tblptru,c
   473  001234  0100               	movlb	0
   474  001236  EF02  F004         	goto	_main	;jump to C main() function
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	bssCOMRAM
   485  000048                     __pbssCOMRAM:
   486                           	opt stack 0
   487  000048                     _i:
   488                           	opt stack 0
   489  000048                     	ds	2
   490  00004A                     _status:
   491                           	opt stack 0
   492  00004A                     	ds	2
   493  00004C                     _lp:
   494                           	opt stack 0
   495  00004C                     	ds	2
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	dataCOMRAM
   506  000036                     __pdataCOMRAM:
   507                           	opt stack 0
   508  000036                     _ls:
   509                           	opt stack 0
   510  000036                     	ds	10
   511  000040                     _es:
   512                           	opt stack 0
   513  000040                     	ds	4
   514  000044                     _cs:
   515                           	opt stack 0
   516  000044                     	ds	4
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	bssBANK0
   527  000060                     __pbssBANK0:
   528                           	opt stack 0
   529  000060                     _time:
   530                           	opt stack 0
   531  000060                     	ds	40
   532  000088                     _an:
   533                           	opt stack 0
   534  000088                     	ds	18
   535  00009A                     _maxs:
   536                           	opt stack 0
   537  00009A                     	ds	14
   538  0000A8                     _mins:
   539                           	opt stack 0
   540  0000A8                     	ds	14
   541                           tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           postdec1	equ	0xFE5
   548                           fsr1l	equ	0xFE1
   549                           
   550                           	psect	cstackBANK0
   551  0000B6                     __pcstackBANK0:
   552                           	opt stack 0
   553  0000B6                     _line_cal$2242:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0x0
   557  0000B6                     	ds	4
   558  0000BA                     line_cal@a:
   559                           	opt stack 0
   560                           
   561                           ; 4 bytes @ 0x4
   562  0000BA                     	ds	4
   563  0000BE                     line_cal@b:
   564                           	opt stack 0
   565                           
   566                           ; 4 bytes @ 0x8
   567  0000BE                     	ds	4
   568  0000C2                     _line_cal$505:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0xC
   572  0000C2                     	ds	2
   573  0000C4                     _line_cal$507:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0xE
   577  0000C4                     	ds	2
   578  0000C6                     line_cal@value:
   579                           	opt stack 0
   580                           
   581                           ; 4 bytes @ 0x10
   582  0000C6                     	ds	4
   583  0000CA                     line_cal@i:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x14
   587  0000CA                     	ds	2
   588  0000CC                     line_cal@j:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x16
   592  0000CC                     	ds	2
   593  0000CE                     main@i:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x18
   597  0000CE                     	ds	2
   598                           tblptru	equ	0xFF8
   599                           tblptrh	equ	0xFF7
   600                           tblptrl	equ	0xFF6
   601                           tablat	equ	0xFF5
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           postdec1	equ	0xFE5
   605                           fsr1l	equ	0xFE1
   606                           
   607                           	psect	cstackCOMRAM
   608  000001                     __pcstackCOMRAM:
   609                           	opt stack 0
   610  000001                     ??_enc:
   611  000001                     
   612                           ; 2 bytes @ 0x0
   613  000001                     	ds	16
   614  000011                     ??_read_cal:
   615  000011                     ??_isdigit:
   616  000011                     ?___wmul:
   617                           	opt stack 0
   618  000011                     ?___lwdiv:
   619                           	opt stack 0
   620  000011                     ?___lmul:
   621                           	opt stack 0
   622  000011                     ?___aldiv:
   623                           	opt stack 0
   624  000011                     ?___almod:
   625                           	opt stack 0
   626  000011                     putch@data:
   627                           	opt stack 0
   628  000011                     init_cal@i:
   629                           	opt stack 0
   630  000011                     ___wmul@multiplier:
   631                           	opt stack 0
   632  000011                     ___lwdiv@dividend:
   633                           	opt stack 0
   634  000011                     ___lmul@multiplier:
   635                           	opt stack 0
   636  000011                     ___aldiv@dividend:
   637                           	opt stack 0
   638  000011                     ___almod@dividend:
   639                           	opt stack 0
   640                           
   641                           ; 4 bytes @ 0x10
   642  000011                     	ds	1
   643  000012                     _isdigit$1917:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0x11
   647  000012                     	ds	1
   648  000013                     isdigit@c:
   649                           	opt stack 0
   650  000013                     ___wmul@multiplicand:
   651                           	opt stack 0
   652  000013                     ___lwdiv@divisor:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x12
   656  000013                     	ds	2
   657  000015                     ___lwdiv@counter:
   658                           	opt stack 0
   659  000015                     ___wmul@product:
   660                           	opt stack 0
   661  000015                     ___lmul@multiplicand:
   662                           	opt stack 0
   663  000015                     ___aldiv@divisor:
   664                           	opt stack 0
   665  000015                     ___almod@divisor:
   666                           	opt stack 0
   667                           
   668                           ; 4 bytes @ 0x14
   669  000015                     	ds	1
   670  000016                     ___lwdiv@quotient:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x15
   674  000016                     	ds	1
   675  000017                     ?___awdiv:
   676                           	opt stack 0
   677  000017                     ___awdiv@dividend:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x16
   681  000017                     	ds	1
   682  000018                     ?___lwmod:
   683                           	opt stack 0
   684  000018                     ___lwmod@dividend:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x17
   688  000018                     	ds	1
   689  000019                     ___aldiv@counter:
   690                           	opt stack 0
   691  000019                     ___almod@counter:
   692                           	opt stack 0
   693  000019                     ___awdiv@divisor:
   694                           	opt stack 0
   695  000019                     ___lmul@product:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x18
   699  000019                     	ds	1
   700  00001A                     ___aldiv@sign:
   701                           	opt stack 0
   702  00001A                     ___almod@sign:
   703                           	opt stack 0
   704  00001A                     _read_cal$491:
   705                           	opt stack 0
   706  00001A                     ___lwmod@divisor:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x19
   710  00001A                     	ds	1
   711  00001B                     ___awdiv@counter:
   712                           	opt stack 0
   713  00001B                     ___aldiv@quotient:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x1A
   717  00001B                     	ds	1
   718  00001C                     ___awdiv@sign:
   719                           	opt stack 0
   720  00001C                     ___lwmod@counter:
   721                           	opt stack 0
   722  00001C                     _read_cal$493:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x1B
   726  00001C                     	ds	1
   727  00001D                     ?_printf:
   728                           	opt stack 0
   729  00001D                     printf@f:
   730                           	opt stack 0
   731  00001D                     ___awdiv@quotient:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x1C
   735  00001D                     	ds	1
   736  00001E                     _read_cal$495:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x1D
   740  00001E                     	ds	1
   741  00001F                     ??_EnhancedRead:
   742  00001F                     ??_line_cal:
   743                           
   744                           ; 1 bytes @ 0x1E
   745  00001F                     	ds	1
   746  000020                     EnhancedRead@aux:
   747                           	opt stack 0
   748  000020                     _read_cal$497:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x1F
   752  000020                     	ds	2
   753  000022                     EnhancedRead@i:
   754                           	opt stack 0
   755  000022                     read_cal@i:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x21
   759  000022                     	ds	3
   760  000025                     ??_printf:
   761                           
   762                           ; 1 bytes @ 0x24
   763  000025                     	ds	4
   764  000029                     printf@ap:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x28
   768  000029                     	ds	2
   769  00002B                     printf@prec:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x2A
   773  00002B                     	ds	1
   774  00002C                     printf@val:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x2B
   778  00002C                     	ds	2
   779  00002E                     printf@flag:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x2D
   783  00002E                     	ds	1
   784  00002F                     printf@width:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x2E
   788  00002F                     	ds	2
   789  000031                     printf@c:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x30
   793  000031                     	ds	1
   794  000032                     ??_main:
   795                           
   796                           ; 1 bytes @ 0x31
   797  000032                     	ds	4
   798                           tblptru	equ	0xFF8
   799                           tblptrh	equ	0xFF7
   800                           tblptrl	equ	0xFF6
   801                           tablat	equ	0xFF5
   802                           postinc0	equ	0xFEE
   803                           wreg	equ	0xFE8
   804                           postdec1	equ	0xFE5
   805                           fsr1l	equ	0xFE1
   806                           
   807 ;;
   808 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   809 ;;
   810 ;; *************** function _main *****************
   811 ;; Defined at:
   812 ;;		line 22 in file "main.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;		None
   815 ;; Auto vars:     Size  Location     Type
   816 ;;  i               2   24[BANK0 ] int 
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   826 ;;      Params:         0       0       0       0       0       0       0       0       0
   827 ;;      Locals:         0       2       0       0       0       0       0       0       0
   828 ;;      Temps:          4       0       0       0       0       0       0       0       0
   829 ;;      Totals:         4       2       0       0       0       0       0       0       0
   830 ;;Total ram usage:        6 bytes
   831 ;; Hardware stack levels required when called:    3
   832 ;; This function calls:
   833 ;;		_EnhancedRead
   834 ;;		___almod
   835 ;;		_init_cal
   836 ;;		_init_tms
   837 ;;		_line_cal
   838 ;;		_printf
   839 ;;		_read_cal
   840 ;;		_setA
   841 ;;		_setB
   842 ;;		_setC
   843 ;;		_setD
   844 ;; This function is called by:
   845 ;;		Startup code after reset
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text0
   850  000804                     __ptext0:
   851                           	opt stack 0
   852  000804                     _main:
   853                           	opt stack 28
   854                           
   855                           ;main.c: 23: init_tms();
   856                           
   857                           ;incstack = 0
   858  000804  ECD1  F008         	call	_init_tms	;wreg free
   859                           
   860                           ;main.c: 25: status = INIT;
   861  000808  0E00               	movlw	0
   862  00080A  6E4B               	movwf	_status+1,c
   863  00080C  0E00               	movlw	0
   864  00080E  6E4A               	movwf	_status,c
   865                           
   866                           ;main.c: 27: printf("{'COM':'line','value':'Robot started'}\n");
   867  000810  0EB3               	movlw	low STR_1
   868  000812  6E1D               	movwf	printf@f,c
   869  000814  0E7C               	movlw	high STR_1
   870  000816  6E1E               	movwf	printf@f+1,c
   871  000818  EC88  F005         	call	_printf	;wreg free
   872  00081C                     l2958:
   873                           
   874                           ;main.c: 29: EnhancedRead();
   875  00081C  EC48  F008         	call	_EnhancedRead	;wreg free
   876                           
   877                           ;main.c: 31: switch (status){
   878  000820  D164               	goto	l3034
   879  000822                     l2960:
   880                           
   881                           ;main.c: 34: if (time[0] < 1000) setA();
   882  000822  0100               	movlb	0	; () banked
   883  000824  BF63               	btfsc	(_time+3)& (0+255),7,b
   884  000826  D00C               	goto	l2962
   885  000828  0100               	movlb	0	; () banked
   886  00082A  5163               	movf	(_time+3)& (0+255),w,b
   887  00082C  0100               	movlb	0	; () banked
   888  00082E  1162               	iorwf	(_time+2)& (0+255),w,b
   889  000830  E109               	bnz	l2964
   890  000832  0EE8               	movlw	232
   891  000834  0100               	movlb	0	; () banked
   892  000836  5D60               	subwf	_time& (0+255),w,b
   893  000838  0E03               	movlw	3
   894  00083A  0100               	movlb	0	; () banked
   895  00083C  5961               	subwfb	(_time+1)& (0+255),w,b
   896  00083E  A0D8               	btfss	status,0,c
   897  000840                     l2962:
   898                           
   899                           ; BSR set to: 0
   900  000840  ECDB  F009         	call	_setA	;wreg free
   901  000844                     l2964:
   902                           
   903                           ;main.c: 35: if (time[0] > 1000 && time[0] < 2000) setB();
   904  000844  0100               	movlb	0	; () banked
   905  000846  BF63               	btfsc	(_time+3)& (0+255),7,b
   906  000848  D01E               	goto	l2970
   907  00084A  0100               	movlb	0	; () banked
   908  00084C  5163               	movf	(_time+3)& (0+255),w,b
   909  00084E  0100               	movlb	0	; () banked
   910  000850  1162               	iorwf	(_time+2)& (0+255),w,b
   911  000852  E108               	bnz	u2810
   912  000854  0EE9               	movlw	233
   913  000856  0100               	movlb	0	; () banked
   914  000858  5D60               	subwf	_time& (0+255),w,b
   915  00085A  0E03               	movlw	3
   916  00085C  0100               	movlb	0	; () banked
   917  00085E  5961               	subwfb	(_time+1)& (0+255),w,b
   918  000860  A0D8               	btfss	status,0,c
   919  000862  D011               	goto	l2970
   920  000864                     u2810:
   921                           
   922                           ; BSR set to: 0
   923  000864  0100               	movlb	0	; () banked
   924  000866  BF63               	btfsc	(_time+3)& (0+255),7,b
   925  000868  D00C               	goto	l2968
   926  00086A  0100               	movlb	0	; () banked
   927  00086C  5163               	movf	(_time+3)& (0+255),w,b
   928  00086E  0100               	movlb	0	; () banked
   929  000870  1162               	iorwf	(_time+2)& (0+255),w,b
   930  000872  E109               	bnz	l2970
   931  000874  0ED0               	movlw	208
   932  000876  0100               	movlb	0	; () banked
   933  000878  5D60               	subwf	_time& (0+255),w,b
   934  00087A  0E07               	movlw	7
   935  00087C  0100               	movlb	0	; () banked
   936  00087E  5961               	subwfb	(_time+1)& (0+255),w,b
   937  000880  A0D8               	btfss	status,0,c
   938  000882                     l2968:
   939                           
   940                           ; BSR set to: 0
   941  000882  ECD6  F009         	call	_setB	;wreg free
   942  000886                     l2970:
   943                           
   944                           ;main.c: 36: if (time[0] > 2000 && time[0] < 3000) setC();
   945  000886  0100               	movlb	0	; () banked
   946  000888  BF63               	btfsc	(_time+3)& (0+255),7,b
   947  00088A  D01E               	goto	l2976
   948  00088C  0100               	movlb	0	; () banked
   949  00088E  5163               	movf	(_time+3)& (0+255),w,b
   950  000890  0100               	movlb	0	; () banked
   951  000892  1162               	iorwf	(_time+2)& (0+255),w,b
   952  000894  E108               	bnz	u2830
   953  000896  0ED1               	movlw	209
   954  000898  0100               	movlb	0	; () banked
   955  00089A  5D60               	subwf	_time& (0+255),w,b
   956  00089C  0E07               	movlw	7
   957  00089E  0100               	movlb	0	; () banked
   958  0008A0  5961               	subwfb	(_time+1)& (0+255),w,b
   959  0008A2  A0D8               	btfss	status,0,c
   960  0008A4  D011               	goto	l2976
   961  0008A6                     u2830:
   962                           
   963                           ; BSR set to: 0
   964  0008A6  0100               	movlb	0	; () banked
   965  0008A8  BF63               	btfsc	(_time+3)& (0+255),7,b
   966  0008AA  D00C               	goto	l2974
   967  0008AC  0100               	movlb	0	; () banked
   968  0008AE  5163               	movf	(_time+3)& (0+255),w,b
   969  0008B0  0100               	movlb	0	; () banked
   970  0008B2  1162               	iorwf	(_time+2)& (0+255),w,b
   971  0008B4  E109               	bnz	l2976
   972  0008B6  0EB8               	movlw	184
   973  0008B8  0100               	movlb	0	; () banked
   974  0008BA  5D60               	subwf	_time& (0+255),w,b
   975  0008BC  0E0B               	movlw	11
   976  0008BE  0100               	movlb	0	; () banked
   977  0008C0  5961               	subwfb	(_time+1)& (0+255),w,b
   978  0008C2  A0D8               	btfss	status,0,c
   979  0008C4                     l2974:
   980                           
   981                           ; BSR set to: 0
   982  0008C4  ECD1  F009         	call	_setC	;wreg free
   983  0008C8                     l2976:
   984                           
   985                           ;main.c: 37: if (time[0] > 3000 && time[0] < 4000) setD();
   986  0008C8  0100               	movlb	0	; () banked
   987  0008CA  BF63               	btfsc	(_time+3)& (0+255),7,b
   988  0008CC  D01E               	goto	l2982
   989  0008CE  0100               	movlb	0	; () banked
   990  0008D0  5163               	movf	(_time+3)& (0+255),w,b
   991  0008D2  0100               	movlb	0	; () banked
   992  0008D4  1162               	iorwf	(_time+2)& (0+255),w,b
   993  0008D6  E108               	bnz	u2850
   994  0008D8  0EB9               	movlw	185
   995  0008DA  0100               	movlb	0	; () banked
   996  0008DC  5D60               	subwf	_time& (0+255),w,b
   997  0008DE  0E0B               	movlw	11
   998  0008E0  0100               	movlb	0	; () banked
   999  0008E2  5961               	subwfb	(_time+1)& (0+255),w,b
  1000  0008E4  A0D8               	btfss	status,0,c
  1001  0008E6  D011               	goto	l2982
  1002  0008E8                     u2850:
  1003                           
  1004                           ; BSR set to: 0
  1005  0008E8  0100               	movlb	0	; () banked
  1006  0008EA  BF63               	btfsc	(_time+3)& (0+255),7,b
  1007  0008EC  D00C               	goto	l2980
  1008  0008EE  0100               	movlb	0	; () banked
  1009  0008F0  5163               	movf	(_time+3)& (0+255),w,b
  1010  0008F2  0100               	movlb	0	; () banked
  1011  0008F4  1162               	iorwf	(_time+2)& (0+255),w,b
  1012  0008F6  E109               	bnz	l2982
  1013  0008F8  0EA0               	movlw	160
  1014  0008FA  0100               	movlb	0	; () banked
  1015  0008FC  5D60               	subwf	_time& (0+255),w,b
  1016  0008FE  0E0F               	movlw	15
  1017  000900  0100               	movlb	0	; () banked
  1018  000902  5961               	subwfb	(_time+1)& (0+255),w,b
  1019  000904  A0D8               	btfss	status,0,c
  1020  000906                     l2980:
  1021                           
  1022                           ; BSR set to: 0
  1023  000906  ECCC  F009         	call	_setD	;wreg free
  1024  00090A                     l2982:
  1025                           
  1026                           ;main.c: 38: if (time[0] > 4000) time[0] = 0;
  1027  00090A  0100               	movlb	0	; () banked
  1028  00090C  BF63               	btfsc	(_time+3)& (0+255),7,b
  1029  00090E  D016               	goto	l2986
  1030  000910  0100               	movlb	0	; () banked
  1031  000912  5163               	movf	(_time+3)& (0+255),w,b
  1032  000914  0100               	movlb	0	; () banked
  1033  000916  1162               	iorwf	(_time+2)& (0+255),w,b
  1034  000918  E108               	bnz	u2870
  1035  00091A  0EA1               	movlw	161
  1036  00091C  0100               	movlb	0	; () banked
  1037  00091E  5D60               	subwf	_time& (0+255),w,b
  1038  000920  0E0F               	movlw	15
  1039  000922  0100               	movlb	0	; () banked
  1040  000924  5961               	subwfb	(_time+1)& (0+255),w,b
  1041  000926  A0D8               	btfss	status,0,c
  1042  000928  D009               	goto	l2986
  1043  00092A                     u2870:
  1044                           
  1045                           ; BSR set to: 0
  1046  00092A  0E00               	movlw	0
  1047  00092C  0100               	movlb	0	; () banked
  1048  00092E  6F60               	movwf	_time& (0+255),b
  1049  000930  0E00               	movlw	0
  1050  000932  6F61               	movwf	(_time+1)& (0+255),b
  1051  000934  0E00               	movlw	0
  1052  000936  6F62               	movwf	(_time+2)& (0+255),b
  1053  000938  0E00               	movlw	0
  1054  00093A  6F63               	movwf	(_time+3)& (0+255),b
  1055  00093C                     l2986:
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;main.c: 40: if (PORTDbits.RD0 == 0){
  1059  00093C  B083               	btfsc	3971,0,c	;volatile
  1060  00093E  D76E               	goto	l2958
  1061                           
  1062                           ; BSR set to: 0
  1063                           ;main.c: 41: printf("{'COM':'line','value':'Calibration started'}\n");
  1064  000940  0E2E               	movlw	low STR_2
  1065  000942  6E1D               	movwf	printf@f,c
  1066  000944  0E7C               	movlw	high STR_2
  1067  000946  6E1E               	movwf	printf@f+1,c
  1068  000948  EC88  F005         	call	_printf	;wreg free
  1069                           
  1070                           ;main.c: 42: status = CAL;
  1071  00094C  0E00               	movlw	0
  1072  00094E  6E4B               	movwf	_status+1,c
  1073  000950  0E01               	movlw	1
  1074  000952  6E4A               	movwf	_status,c
  1075                           
  1076                           ;main.c: 43: time[0] = 0;
  1077  000954  0E00               	movlw	0
  1078  000956  0100               	movlb	0	; () banked
  1079  000958  6F60               	movwf	_time& (0+255),b
  1080  00095A  0E00               	movlw	0
  1081  00095C  6F61               	movwf	(_time+1)& (0+255),b
  1082  00095E  0E00               	movlw	0
  1083  000960  6F62               	movwf	(_time+2)& (0+255),b
  1084  000962  0E00               	movlw	0
  1085  000964  6F63               	movwf	(_time+3)& (0+255),b
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;main.c: 44: init_cal();
  1089  000966  EC0F  F008         	call	_init_cal	;wreg free
  1090                           
  1091                           ;main.c: 45: }
  1092                           ;main.c: 46: break;
  1093  00096A  D758               	goto	l2958
  1094  00096C                     l2996:
  1095                           
  1096                           ;main.c: 48: PORTBbits.RB4 = time[0] % 1000 > 500;
  1097  00096C  C060  F011         	movff	_time,___almod@dividend
  1098  000970  C061  F012         	movff	_time+1,___almod@dividend+1
  1099  000974  C062  F013         	movff	_time+2,___almod@dividend+2
  1100  000978  C063  F014         	movff	_time+3,___almod@dividend+3
  1101  00097C  0EE8               	movlw	232
  1102  00097E  6E15               	movwf	___almod@divisor,c
  1103  000980  0E03               	movlw	3
  1104  000982  6E16               	movwf	___almod@divisor+1,c
  1105  000984  0E00               	movlw	0
  1106  000986  6E17               	movwf	___almod@divisor+2,c
  1107  000988  0E00               	movlw	0
  1108  00098A  6E18               	movwf	___almod@divisor+3,c
  1109  00098C  EC77  F007         	call	___almod	;wreg free
  1110  000990  BE14               	btfsc	?___almod+3,7,c
  1111  000992  D00C               	goto	u2890
  1112  000994  5014               	movf	?___almod+3,w,c
  1113  000996  1013               	iorwf	?___almod+2,w,c
  1114  000998  E106               	bnz	u2891
  1115  00099A  0EF5               	movlw	245
  1116  00099C  5C11               	subwf	?___almod,w,c
  1117  00099E  0E01               	movlw	1
  1118  0009A0  5812               	subwfb	?___almod+1,w,c
  1119  0009A2  A0D8               	btfss	status,0,c
  1120  0009A4  D003               	goto	u2890
  1121  0009A6                     u2891:
  1122  0009A6  6A32               	clrf	??_main& (0+255),c
  1123  0009A8  2A32               	incf	??_main& (0+255),f,c
  1124  0009AA  D001               	goto	u2908
  1125  0009AC                     u2890:
  1126  0009AC  6A32               	clrf	??_main& (0+255),c
  1127  0009AE                     u2908:
  1128  0009AE  3A32               	swapf	??_main,f,c
  1129  0009B0  5081               	movf	3969,w,c	;volatile
  1130  0009B2  1832               	xorwf	??_main,w,c
  1131  0009B4  0BEF               	andlw	-17
  1132  0009B6  1832               	xorwf	??_main,w,c
  1133  0009B8  6E81               	movwf	3969,c	;volatile
  1134                           
  1135                           ;main.c: 49: PORTCbits.RC1 = 0;
  1136  0009BA  9282               	bcf	3970,1,c	;volatile
  1137                           
  1138                           ;main.c: 50: PORTDbits.RD2 = 0;
  1139  0009BC  9483               	bcf	3971,2,c	;volatile
  1140                           
  1141                           ;main.c: 51: PORTAbits.RA4 = 0;
  1142  0009BE  9880               	bcf	3968,4,c	;volatile
  1143                           
  1144                           ;main.c: 52: read_cal();
  1145  0009C0  EC09  F000         	call	_read_cal	;wreg free
  1146                           
  1147                           ;main.c: 54: if (PORTDbits.RD1 == 0){
  1148  0009C4  B283               	btfsc	3971,1,c	;volatile
  1149  0009C6  D72A               	goto	l2958
  1150                           
  1151                           ;main.c: 55: printf("{'COM':'line','value':'Calibration finished'}\n");
  1152  0009C8  0EFF               	movlw	low STR_3
  1153  0009CA  6E1D               	movwf	printf@f,c
  1154  0009CC  0E7B               	movlw	high STR_3
  1155  0009CE  6E1E               	movwf	printf@f+1,c
  1156  0009D0  EC88  F005         	call	_printf	;wreg free
  1157                           
  1158                           ;main.c: 56: printf("{'COM':'line','value':'Results :'}\n");
  1159  0009D4  0EDB               	movlw	low STR_4
  1160  0009D6  6E1D               	movwf	printf@f,c
  1161  0009D8  0E7C               	movlw	high STR_4
  1162  0009DA  6E1E               	movwf	printf@f+1,c
  1163  0009DC  EC88  F005         	call	_printf	;wreg free
  1164                           
  1165                           ;main.c: 57: int i;
  1166                           ;main.c: 58: for (i = 0;i < 5;i++){
  1167  0009E0  0E00               	movlw	0
  1168  0009E2  0100               	movlb	0	; () banked
  1169  0009E4  6FCF               	movwf	(main@i+1)& (0+255),b
  1170  0009E6  0E00               	movlw	0
  1171  0009E8  6FCE               	movwf	main@i& (0+255),b
  1172  0009EA                     l3012:
  1173                           
  1174                           ; BSR set to: 0
  1175  0009EA  0100               	movlb	0	; () banked
  1176  0009EC  BFCF               	btfsc	(main@i+1)& (0+255),7,b
  1177  0009EE  D008               	goto	l3016
  1178  0009F0  0100               	movlb	0	; () banked
  1179  0009F2  51CF               	movf	(main@i+1)& (0+255),w,b
  1180  0009F4  E14B               	bnz	l3022
  1181  0009F6  0E05               	movlw	5
  1182  0009F8  0100               	movlb	0	; () banked
  1183  0009FA  5DCE               	subwf	main@i& (0+255),w,b
  1184  0009FC  B0D8               	btfsc	status,0,c
  1185  0009FE  D046               	goto	l3022
  1186  000A00                     l3016:
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;main.c: 59: printf("{'COM':'line','value':'%d : [%04d,%04d]'}\n",i,mins[ls[i]],maxs[ls[
      +                          i]]);
  1190  000A00  0E88               	movlw	low STR_5
  1191  000A02  6E1D               	movwf	printf@f,c
  1192  000A04  0E7C               	movlw	high STR_5
  1193  000A06  6E1E               	movwf	printf@f+1,c
  1194  000A08  C0CE  F01F         	movff	main@i,?_printf+2
  1195  000A0C  C0CF  F020         	movff	main@i+1,?_printf+3
  1196  000A10  90D8               	bcf	status,0,c
  1197  000A12  0100               	movlb	0	; () banked
  1198  000A14  35CE               	rlcf	main@i& (0+255),w,b
  1199  000A16  6ED9               	movwf	fsr2l,c
  1200  000A18  0100               	movlb	0	; () banked
  1201  000A1A  35CF               	rlcf	(main@i+1)& (0+255),w,b
  1202  000A1C  6EDA               	movwf	fsr2h,c
  1203  000A1E  0E36               	movlw	low _ls
  1204  000A20  26D9               	addwf	fsr2l,f,c
  1205  000A22  0E00               	movlw	high _ls
  1206  000A24  22DA               	addwfc	fsr2h,f,c
  1207  000A26  CFDE F032          	movff	postinc2,??_main
  1208  000A2A  CFDD F033          	movff	postdec2,??_main+1
  1209  000A2E  90D8               	bcf	status,0,c
  1210  000A30  3632               	rlcf	??_main,f,c
  1211  000A32  3633               	rlcf	??_main+1,f,c
  1212  000A34  0EA8               	movlw	low _mins
  1213  000A36  2432               	addwf	??_main,w,c
  1214  000A38  6ED9               	movwf	fsr2l,c
  1215  000A3A  0E00               	movlw	high _mins
  1216  000A3C  2033               	addwfc	??_main+1,w,c
  1217  000A3E  6EDA               	movwf	fsr2h,c
  1218  000A40  CFDE F021          	movff	postinc2,?_printf+4
  1219  000A44  CFDD F022          	movff	postdec2,?_printf+5
  1220  000A48  90D8               	bcf	status,0,c
  1221  000A4A  0100               	movlb	0	; () banked
  1222  000A4C  35CE               	rlcf	main@i& (0+255),w,b
  1223  000A4E  6ED9               	movwf	fsr2l,c
  1224  000A50  0100               	movlb	0	; () banked
  1225  000A52  35CF               	rlcf	(main@i+1)& (0+255),w,b
  1226  000A54  6EDA               	movwf	fsr2h,c
  1227  000A56  0E36               	movlw	low _ls
  1228  000A58  26D9               	addwf	fsr2l,f,c
  1229  000A5A  0E00               	movlw	high _ls
  1230  000A5C  22DA               	addwfc	fsr2h,f,c
  1231  000A5E  CFDE F034          	movff	postinc2,??_main+2
  1232  000A62  CFDD F035          	movff	postdec2,??_main+3
  1233  000A66  90D8               	bcf	status,0,c
  1234  000A68  3634               	rlcf	??_main+2,f,c
  1235  000A6A  3635               	rlcf	??_main+3,f,c
  1236  000A6C  0E9A               	movlw	low _maxs
  1237  000A6E  2434               	addwf	??_main+2,w,c
  1238  000A70  6ED9               	movwf	fsr2l,c
  1239  000A72  0E00               	movlw	high _maxs
  1240  000A74  2035               	addwfc	??_main+3,w,c
  1241  000A76  6EDA               	movwf	fsr2h,c
  1242  000A78  CFDE F023          	movff	postinc2,?_printf+6
  1243  000A7C  CFDD F024          	movff	postdec2,?_printf+7
  1244  000A80  EC88  F005         	call	_printf	;wreg free
  1245  000A84  0100               	movlb	0	; () banked
  1246  000A86  4BCE               	infsnz	main@i& (0+255),f,b
  1247  000A88  2BCF               	incf	(main@i+1)& (0+255),f,b
  1248  000A8A  D7AF               	goto	l3012
  1249  000A8C                     l3022:
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;main.c: 60: }
  1253                           ;main.c: 61: status = READY;
  1254  000A8C  0E00               	movlw	0
  1255  000A8E  6E4B               	movwf	_status+1,c
  1256  000A90  0E02               	movlw	2
  1257  000A92  6E4A               	movwf	_status,c
  1258  000A94  D020               	goto	l3030
  1259  000A96                     l57:
  1260                           
  1261                           ;main.c: 67: PORTBbits.RB4 = 0;
  1262  000A96  9881               	bcf	3969,4,c	;volatile
  1263                           
  1264                           ;main.c: 68: PORTCbits.RC1 = 1;
  1265  000A98  8282               	bsf	3970,1,c	;volatile
  1266                           
  1267                           ;main.c: 69: PORTDbits.RD2 = 0;
  1268  000A9A  9483               	bcf	3971,2,c	;volatile
  1269                           
  1270                           ;main.c: 70: PORTAbits.RA4 = 0;
  1271  000A9C  9880               	bcf	3968,4,c	;volatile
  1272                           
  1273                           ;main.c: 71: line_cal();
  1274  000A9E  EC5A  F002         	call	_line_cal	;wreg free
  1275                           
  1276                           ;main.c: 72: if (time[0] > 500){
  1277  000AA2  0100               	movlb	0	; () banked
  1278  000AA4  BF63               	btfsc	(_time+3)& (0+255),7,b
  1279  000AA6  D6BA               	goto	l2958
  1280  000AA8  0100               	movlb	0	; () banked
  1281  000AAA  5163               	movf	(_time+3)& (0+255),w,b
  1282  000AAC  0100               	movlb	0	; () banked
  1283  000AAE  1162               	iorwf	(_time+2)& (0+255),w,b
  1284  000AB0  E108               	bnz	u2940
  1285  000AB2  0EF5               	movlw	245
  1286  000AB4  0100               	movlb	0	; () banked
  1287  000AB6  5D60               	subwf	_time& (0+255),w,b
  1288  000AB8  0E01               	movlw	1
  1289  000ABA  0100               	movlb	0	; () banked
  1290  000ABC  5961               	subwfb	(_time+1)& (0+255),w,b
  1291  000ABE  A0D8               	btfss	status,0,c
  1292  000AC0  D6AD               	goto	l2958
  1293  000AC2                     u2940:
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;main.c: 73: printf("{'COM':'plot', 'name':'Plot 1','value':%d}\n",lp);
  1297  000AC2  0E5C               	movlw	low STR_6
  1298  000AC4  6E1D               	movwf	printf@f,c
  1299  000AC6  0E7C               	movlw	high STR_6
  1300  000AC8  6E1E               	movwf	printf@f+1,c
  1301  000ACA  C04C  F01F         	movff	_lp,?_printf+2
  1302  000ACE  C04D  F020         	movff	_lp+1,?_printf+3
  1303  000AD2  EC88  F005         	call	_printf	;wreg free
  1304  000AD6                     l3030:
  1305                           
  1306                           ;main.c: 74: time[0] = 0;
  1307  000AD6  0E00               	movlw	0
  1308  000AD8  0100               	movlb	0	; () banked
  1309  000ADA  6F60               	movwf	_time& (0+255),b
  1310  000ADC  0E00               	movlw	0
  1311  000ADE  6F61               	movwf	(_time+1)& (0+255),b
  1312  000AE0  0E00               	movlw	0
  1313  000AE2  6F62               	movwf	(_time+2)& (0+255),b
  1314  000AE4  0E00               	movlw	0
  1315  000AE6  6F63               	movwf	(_time+3)& (0+255),b
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 77: }
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;main.c: 75: }
  1322                           ;main.c: 76: break;
  1323  000AE8  D699               	goto	l2958
  1324  000AEA                     l3034:
  1325  000AEA  C04A  F032         	movff	_status,??_main
  1326  000AEE  C04B  F033         	movff	_status+1,??_main+1
  1327                           
  1328                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1329                           ; Switch size 1, requested type "space"
  1330                           ; Number of cases is 1, Range of values is 0 to 0
  1331                           ; switch strategies available:
  1332                           ; Name         Instructions Cycles
  1333                           ; simple_byte            4     3 (average)
  1334                           ;	Chosen strategy is simple_byte
  1335  000AF2  5033               	movf	??_main+1,w,c
  1336  000AF4  0A00               	xorlw	0	; case 0
  1337  000AF6  A4D8               	btfss	status,2,c
  1338  000AF8  D691               	goto	l2958
  1339                           
  1340                           ; Switch size 1, requested type "space"
  1341                           ; Number of cases is 3, Range of values is 0 to 2
  1342                           ; switch strategies available:
  1343                           ; Name         Instructions Cycles
  1344                           ; simple_byte           10     6 (average)
  1345                           ;	Chosen strategy is simple_byte
  1346  000AFA  5032               	movf	??_main,w,c
  1347  000AFC  0A00               	xorlw	0	; case 0
  1348  000AFE  B4D8               	btfsc	status,2,c
  1349  000B00  D690               	goto	l2960
  1350  000B02  0A01               	xorlw	1	; case 1
  1351  000B04  B4D8               	btfsc	status,2,c
  1352  000B06  D732               	goto	l2996
  1353  000B08  0A03               	xorlw	3	; case 2
  1354  000B0A  B4D8               	btfsc	status,2,c
  1355  000B0C  D7C4               	goto	l57
  1356  000B0E  D686               	goto	l2958
  1357  000B10                     __end_of_main:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           postinc0	equ	0xFEE
  1364                           wreg	equ	0xFE8
  1365                           postdec1	equ	0xFE5
  1366                           fsr1l	equ	0xFE1
  1367                           postinc2	equ	0xFDE
  1368                           postdec2	equ	0xFDD
  1369                           fsr2h	equ	0xFDA
  1370                           fsr2l	equ	0xFD9
  1371                           status	equ	0xFD8
  1372                           
  1373 ;; *************** function _setD *****************
  1374 ;; Defined at:
  1375 ;;		line 24 in file "utils.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		None
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1389 ;;      Params:         0       0       0       0       0       0       0       0       0
  1390 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1392 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1393 ;;Total ram usage:        0 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    1
  1396 ;; This function calls:
  1397 ;;		Nothing
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text1
  1404  001398                     __ptext1:
  1405                           	opt stack 0
  1406  001398                     _setD:
  1407                           	opt stack 29
  1408                           
  1409                           ;utils.c: 25: PORTBbits.RB4 = 0;
  1410                           
  1411                           ;incstack = 0
  1412  001398  9881               	bcf	3969,4,c	;volatile
  1413                           
  1414                           ;utils.c: 26: PORTCbits.RC1 = 0;
  1415  00139A  9282               	bcf	3970,1,c	;volatile
  1416                           
  1417                           ;utils.c: 27: PORTDbits.RD2 = 0;
  1418  00139C  9483               	bcf	3971,2,c	;volatile
  1419                           
  1420                           ;utils.c: 28: PORTAbits.RA4 = 1;
  1421  00139E  8880               	bsf	3968,4,c	;volatile
  1422  0013A0  0012               	return		;funcret
  1423  0013A2                     __end_of_setD:
  1424                           	opt stack 0
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           postinc0	equ	0xFEE
  1430                           wreg	equ	0xFE8
  1431                           postdec1	equ	0xFE5
  1432                           fsr1l	equ	0xFE1
  1433                           postinc2	equ	0xFDE
  1434                           postdec2	equ	0xFDD
  1435                           fsr2h	equ	0xFDA
  1436                           fsr2l	equ	0xFD9
  1437                           status	equ	0xFD8
  1438                           
  1439 ;; *************** function _setC *****************
  1440 ;; Defined at:
  1441 ;;		line 18 in file "utils.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      void 
  1448 ;; Registers used:
  1449 ;;		None
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1455 ;;      Params:         0       0       0       0       0       0       0       0       0
  1456 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1457 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1458 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1459 ;;Total ram usage:        0 bytes
  1460 ;; Hardware stack levels used:    1
  1461 ;; Hardware stack levels required when called:    1
  1462 ;; This function calls:
  1463 ;;		Nothing
  1464 ;; This function is called by:
  1465 ;;		_main
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           	psect	text2
  1470  0013A2                     __ptext2:
  1471                           	opt stack 0
  1472  0013A2                     _setC:
  1473                           	opt stack 29
  1474                           
  1475                           ;utils.c: 19: PORTBbits.RB4 = 0;
  1476                           
  1477                           ;incstack = 0
  1478  0013A2  9881               	bcf	3969,4,c	;volatile
  1479                           
  1480                           ;utils.c: 20: PORTCbits.RC1 = 0;
  1481  0013A4  9282               	bcf	3970,1,c	;volatile
  1482                           
  1483                           ;utils.c: 21: PORTDbits.RD2 = 1;
  1484  0013A6  8483               	bsf	3971,2,c	;volatile
  1485                           
  1486                           ;utils.c: 22: PORTAbits.RA4 = 0;
  1487  0013A8  9880               	bcf	3968,4,c	;volatile
  1488  0013AA  0012               	return		;funcret
  1489  0013AC                     __end_of_setC:
  1490                           	opt stack 0
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           postinc0	equ	0xFEE
  1496                           wreg	equ	0xFE8
  1497                           postdec1	equ	0xFE5
  1498                           fsr1l	equ	0xFE1
  1499                           postinc2	equ	0xFDE
  1500                           postdec2	equ	0xFDD
  1501                           fsr2h	equ	0xFDA
  1502                           fsr2l	equ	0xFD9
  1503                           status	equ	0xFD8
  1504                           
  1505 ;; *************** function _setB *****************
  1506 ;; Defined at:
  1507 ;;		line 12 in file "utils.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;		None
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;		None
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		None
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1521 ;;      Params:         0       0       0       0       0       0       0       0       0
  1522 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1523 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1524 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1525 ;;Total ram usage:        0 bytes
  1526 ;; Hardware stack levels used:    1
  1527 ;; Hardware stack levels required when called:    1
  1528 ;; This function calls:
  1529 ;;		Nothing
  1530 ;; This function is called by:
  1531 ;;		_main
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text3
  1536  0013AC                     __ptext3:
  1537                           	opt stack 0
  1538  0013AC                     _setB:
  1539                           	opt stack 29
  1540                           
  1541                           ;utils.c: 13: PORTBbits.RB4 = 0;
  1542                           
  1543                           ;incstack = 0
  1544  0013AC  9881               	bcf	3969,4,c	;volatile
  1545                           
  1546                           ;utils.c: 14: PORTCbits.RC1 = 1;
  1547  0013AE  8282               	bsf	3970,1,c	;volatile
  1548                           
  1549                           ;utils.c: 15: PORTDbits.RD2 = 0;
  1550  0013B0  9483               	bcf	3971,2,c	;volatile
  1551                           
  1552                           ;utils.c: 16: PORTAbits.RA4 = 0;
  1553  0013B2  9880               	bcf	3968,4,c	;volatile
  1554  0013B4  0012               	return		;funcret
  1555  0013B6                     __end_of_setB:
  1556                           	opt stack 0
  1557                           tblptru	equ	0xFF8
  1558                           tblptrh	equ	0xFF7
  1559                           tblptrl	equ	0xFF6
  1560                           tablat	equ	0xFF5
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           postdec1	equ	0xFE5
  1564                           fsr1l	equ	0xFE1
  1565                           postinc2	equ	0xFDE
  1566                           postdec2	equ	0xFDD
  1567                           fsr2h	equ	0xFDA
  1568                           fsr2l	equ	0xFD9
  1569                           status	equ	0xFD8
  1570                           
  1571 ;; *************** function _setA *****************
  1572 ;; Defined at:
  1573 ;;		line 5 in file "utils.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;		None
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;		None
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  1    wreg      void 
  1580 ;; Registers used:
  1581 ;;		None
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1587 ;;      Params:         0       0       0       0       0       0       0       0       0
  1588 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1589 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1590 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1591 ;;Total ram usage:        0 bytes
  1592 ;; Hardware stack levels used:    1
  1593 ;; Hardware stack levels required when called:    1
  1594 ;; This function calls:
  1595 ;;		Nothing
  1596 ;; This function is called by:
  1597 ;;		_main
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           	psect	text4
  1602  0013B6                     __ptext4:
  1603                           	opt stack 0
  1604  0013B6                     _setA:
  1605                           	opt stack 29
  1606                           
  1607                           ;utils.c: 6: PORTBbits.RB4 = 1;
  1608                           
  1609                           ;incstack = 0
  1610  0013B6  8881               	bsf	3969,4,c	;volatile
  1611                           
  1612                           ;utils.c: 7: PORTCbits.RC1 = 0;
  1613  0013B8  9282               	bcf	3970,1,c	;volatile
  1614                           
  1615                           ;utils.c: 8: PORTDbits.RD2 = 0;
  1616  0013BA  9483               	bcf	3971,2,c	;volatile
  1617                           
  1618                           ;utils.c: 9: PORTAbits.RA4 = 0;
  1619  0013BC  9880               	bcf	3968,4,c	;volatile
  1620  0013BE  0012               	return		;funcret
  1621  0013C0                     __end_of_setA:
  1622                           	opt stack 0
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postdec1	equ	0xFE5
  1630                           fsr1l	equ	0xFE1
  1631                           postinc2	equ	0xFDE
  1632                           postdec2	equ	0xFDD
  1633                           fsr2h	equ	0xFDA
  1634                           fsr2l	equ	0xFD9
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _read_cal *****************
  1638 ;; Defined at:
  1639 ;;		line 46 in file "analog.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  i               2   33[COMRAM] int 
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  2   28[None  ] int 
  1646 ;; Registers used:
  1647 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1653 ;;      Params:         0       0       0       0       0       0       0       0       0
  1654 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1655 ;;      Temps:          9       0       0       0       0       0       0       0       0
  1656 ;;      Totals:        19       0       0       0       0       0       0       0       0
  1657 ;;Total ram usage:       19 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    1
  1660 ;; This function calls:
  1661 ;;		Nothing
  1662 ;; This function is called by:
  1663 ;;		_main
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           	psect	text5
  1668  000012                     __ptext5:
  1669                           	opt stack 0
  1670  000012                     _read_cal:
  1671                           	opt stack 29
  1672                           
  1673                           ;analog.c: 47: int i;
  1674                           ;analog.c: 49: for (i = 0;i < 5;i++) maxs[ls[i]] = maxs[ls[i]]>an[ls[i]]?maxs[ls[i]]:an[
      +                          ls[i]];
  1675                           
  1676                           ;incstack = 0
  1677  000012  0E00               	movlw	0
  1678  000014  6E23               	movwf	read_cal@i+1,c
  1679  000016  0E00               	movlw	0
  1680  000018  6E22               	movwf	read_cal@i,c
  1681  00001A  BE23               	btfsc	read_cal@i+1,7,c
  1682  00001C  D008               	goto	l2774
  1683  00001E  5023               	movf	read_cal@i+1,w,c
  1684  000020  E105               	bnz	u2480
  1685  000022  0E05               	movlw	5
  1686  000024  5C22               	subwf	read_cal@i,w,c
  1687  000026  B0D8               	btfsc	status,0,c
  1688  000028  D088               	goto	l2786
  1689  00002A  D001               	goto	l2774
  1690  00002C                     u2480:
  1691  00002C  D086               	goto	l2786
  1692  00002E                     l2774:
  1693  00002E  90D8               	bcf	status,0,c
  1694  000030  3422               	rlcf	read_cal@i,w,c
  1695  000032  6ED9               	movwf	fsr2l,c
  1696  000034  3423               	rlcf	read_cal@i+1,w,c
  1697  000036  6EDA               	movwf	fsr2h,c
  1698  000038  0E36               	movlw	low _ls
  1699  00003A  26D9               	addwf	fsr2l,f,c
  1700  00003C  0E00               	movlw	high _ls
  1701  00003E  22DA               	addwfc	fsr2h,f,c
  1702  000040  CFDE F011          	movff	postinc2,??_read_cal
  1703  000044  CFDD F012          	movff	postdec2,??_read_cal+1
  1704  000048  90D8               	bcf	status,0,c
  1705  00004A  3611               	rlcf	??_read_cal,f,c
  1706  00004C  3612               	rlcf	??_read_cal+1,f,c
  1707  00004E  0E9A               	movlw	low _maxs
  1708  000050  2411               	addwf	??_read_cal,w,c
  1709  000052  6ED9               	movwf	fsr2l,c
  1710  000054  0E00               	movlw	high _maxs
  1711  000056  2012               	addwfc	??_read_cal+1,w,c
  1712  000058  6EDA               	movwf	fsr2h,c
  1713  00005A  90D8               	bcf	status,0,c
  1714  00005C  3422               	rlcf	read_cal@i,w,c
  1715  00005E  6EE1               	movwf	fsr1l,c
  1716  000060  3423               	rlcf	read_cal@i+1,w,c
  1717  000062  6EE2               	movwf	fsr1h,c
  1718  000064  0E36               	movlw	low _ls
  1719  000066  26E1               	addwf	fsr1l,f,c
  1720  000068  0E00               	movlw	high _ls
  1721  00006A  22E2               	addwfc	fsr1h,f,c
  1722  00006C  CFE6 F015          	movff	postinc1,??_read_cal+4
  1723  000070  CFE5 F016          	movff	postdec1,??_read_cal+5
  1724  000074  90D8               	bcf	status,0,c
  1725  000076  3615               	rlcf	??_read_cal+4,f,c
  1726  000078  3616               	rlcf	??_read_cal+5,f,c
  1727  00007A  0E88               	movlw	low _an
  1728  00007C  2415               	addwf	??_read_cal+4,w,c
  1729  00007E  6EE1               	movwf	fsr1l,c
  1730  000080  0E00               	movlw	high _an
  1731  000082  2016               	addwfc	??_read_cal+5,w,c
  1732  000084  6EE2               	movwf	fsr1h,c
  1733  000086  50DE               	movf	postinc2,w,c
  1734  000088  5CE6               	subwf	postinc1,w,c
  1735  00008A  50E6               	movf	postinc1,w,c
  1736  00008C  0A80               	xorlw	128
  1737  00008E  6E19               	movwf	(??_read_cal+8)& (0+255),c
  1738  000090  50DE               	movf	postinc2,w,c
  1739  000092  0A80               	xorlw	128
  1740  000094  5819               	subwfb	(??_read_cal+8)& (0+255),w,c
  1741  000096  A0D8               	btfss	status,0,c
  1742  000098  D015               	goto	l2778
  1743  00009A  90D8               	bcf	status,0,c
  1744  00009C  3422               	rlcf	read_cal@i,w,c
  1745  00009E  6ED9               	movwf	fsr2l,c
  1746  0000A0  3423               	rlcf	read_cal@i+1,w,c
  1747  0000A2  6EDA               	movwf	fsr2h,c
  1748  0000A4  0E36               	movlw	low _ls
  1749  0000A6  26D9               	addwf	fsr2l,f,c
  1750  0000A8  0E00               	movlw	high _ls
  1751  0000AA  22DA               	addwfc	fsr2h,f,c
  1752  0000AC  CFDE F011          	movff	postinc2,??_read_cal
  1753  0000B0  CFDD F012          	movff	postdec2,??_read_cal+1
  1754  0000B4  90D8               	bcf	status,0,c
  1755  0000B6  3611               	rlcf	??_read_cal,f,c
  1756  0000B8  3612               	rlcf	??_read_cal+1,f,c
  1757  0000BA  0E88               	movlw	low _an
  1758  0000BC  2411               	addwf	??_read_cal,w,c
  1759  0000BE  6E1A               	movwf	_read_cal$491,c
  1760  0000C0  0E00               	movlw	high _an
  1761  0000C2  D014               	goto	L1
  1762  0000C4                     l2778:
  1763  0000C4  90D8               	bcf	status,0,c
  1764  0000C6  3422               	rlcf	read_cal@i,w,c
  1765  0000C8  6ED9               	movwf	fsr2l,c
  1766  0000CA  3423               	rlcf	read_cal@i+1,w,c
  1767  0000CC  6EDA               	movwf	fsr2h,c
  1768  0000CE  0E36               	movlw	low _ls
  1769  0000D0  26D9               	addwf	fsr2l,f,c
  1770  0000D2  0E00               	movlw	high _ls
  1771  0000D4  22DA               	addwfc	fsr2h,f,c
  1772  0000D6  CFDE F011          	movff	postinc2,??_read_cal
  1773  0000DA  CFDD F012          	movff	postdec2,??_read_cal+1
  1774  0000DE  90D8               	bcf	status,0,c
  1775  0000E0  3611               	rlcf	??_read_cal,f,c
  1776  0000E2  3612               	rlcf	??_read_cal+1,f,c
  1777  0000E4  0E9A               	movlw	low _maxs
  1778  0000E6  2411               	addwf	??_read_cal,w,c
  1779  0000E8  6E1A               	movwf	_read_cal$491,c
  1780  0000EA  0E00               	movlw	high _maxs
  1781  0000EC                     L1:
  1782  0000EC  2012               	addwfc	??_read_cal+1,w,c
  1783  0000EE  6E1B               	movwf	_read_cal$491+1,c
  1784  0000F0  C01A  FFD9         	movff	_read_cal$491,fsr2l
  1785  0000F4  C01B  FFDA         	movff	_read_cal$491+1,fsr2h
  1786  0000F8  90D8               	bcf	status,0,c
  1787  0000FA  3422               	rlcf	read_cal@i,w,c
  1788  0000FC  6EE1               	movwf	fsr1l,c
  1789  0000FE  3423               	rlcf	read_cal@i+1,w,c
  1790  000100  6EE2               	movwf	fsr1h,c
  1791  000102  0E36               	movlw	low _ls
  1792  000104  26E1               	addwf	fsr1l,f,c
  1793  000106  0E00               	movlw	high _ls
  1794  000108  22E2               	addwfc	fsr1h,f,c
  1795  00010A  CFE6 F011          	movff	postinc1,??_read_cal
  1796  00010E  CFE5 F012          	movff	postdec1,??_read_cal+1
  1797  000112  90D8               	bcf	status,0,c
  1798  000114  3611               	rlcf	??_read_cal,f,c
  1799  000116  3612               	rlcf	??_read_cal+1,f,c
  1800  000118  0E9A               	movlw	low _maxs
  1801  00011A  2411               	addwf	??_read_cal,w,c
  1802  00011C  6EE1               	movwf	fsr1l,c
  1803  00011E  0E00               	movlw	high _maxs
  1804  000120  2012               	addwfc	??_read_cal+1,w,c
  1805  000122  6EE2               	movwf	fsr1h,c
  1806  000124  CFDE FFE6          	movff	postinc2,postinc1
  1807  000128  CFDD FFE5          	movff	postdec2,postdec1
  1808  00012C  4A22               	infsnz	read_cal@i,f,c
  1809  00012E  2A23               	incf	read_cal@i+1,f,c
  1810  000130  BE23               	btfsc	read_cal@i+1,7,c
  1811  000132  D77D               	goto	l2774
  1812  000134  5023               	movf	read_cal@i+1,w,c
  1813  000136  E101               	bnz	l2786
  1814  000138  D774               	goto	L2
  1815  00013A                     l2786:
  1816                           
  1817                           ;analog.c: 50: for (i = 0;i < 5;i++) mins[ls[i]] = mins[ls[i]]<an[ls[i]]?mins[ls[i]]:an[
      +                          ls[i]];
  1818  00013A  0E00               	movlw	0
  1819  00013C  6E23               	movwf	read_cal@i+1,c
  1820  00013E  0E00               	movlw	0
  1821  000140  6E22               	movwf	read_cal@i,c
  1822  000142  BE23               	btfsc	read_cal@i+1,7,c
  1823  000144  D008               	goto	l2792
  1824  000146  5023               	movf	read_cal@i+1,w,c
  1825  000148  E105               	bnz	u2510
  1826  00014A  0E05               	movlw	5
  1827  00014C  5C22               	subwf	read_cal@i,w,c
  1828  00014E  B0D8               	btfsc	status,0,c
  1829  000150  D088               	goto	l2804
  1830  000152  D001               	goto	l2792
  1831  000154                     u2510:
  1832  000154  D086               	goto	l2804
  1833  000156                     l2792:
  1834  000156  90D8               	bcf	status,0,c
  1835  000158  3422               	rlcf	read_cal@i,w,c
  1836  00015A  6ED9               	movwf	fsr2l,c
  1837  00015C  3423               	rlcf	read_cal@i+1,w,c
  1838  00015E  6EDA               	movwf	fsr2h,c
  1839  000160  0E36               	movlw	low _ls
  1840  000162  26D9               	addwf	fsr2l,f,c
  1841  000164  0E00               	movlw	high _ls
  1842  000166  22DA               	addwfc	fsr2h,f,c
  1843  000168  CFDE F011          	movff	postinc2,??_read_cal
  1844  00016C  CFDD F012          	movff	postdec2,??_read_cal+1
  1845  000170  90D8               	bcf	status,0,c
  1846  000172  3611               	rlcf	??_read_cal,f,c
  1847  000174  3612               	rlcf	??_read_cal+1,f,c
  1848  000176  0E88               	movlw	low _an
  1849  000178  2411               	addwf	??_read_cal,w,c
  1850  00017A  6ED9               	movwf	fsr2l,c
  1851  00017C  0E00               	movlw	high _an
  1852  00017E  2012               	addwfc	??_read_cal+1,w,c
  1853  000180  6EDA               	movwf	fsr2h,c
  1854  000182  90D8               	bcf	status,0,c
  1855  000184  3422               	rlcf	read_cal@i,w,c
  1856  000186  6EE1               	movwf	fsr1l,c
  1857  000188  3423               	rlcf	read_cal@i+1,w,c
  1858  00018A  6EE2               	movwf	fsr1h,c
  1859  00018C  0E36               	movlw	low _ls
  1860  00018E  26E1               	addwf	fsr1l,f,c
  1861  000190  0E00               	movlw	high _ls
  1862  000192  22E2               	addwfc	fsr1h,f,c
  1863  000194  CFE6 F015          	movff	postinc1,??_read_cal+4
  1864  000198  CFE5 F016          	movff	postdec1,??_read_cal+5
  1865  00019C  90D8               	bcf	status,0,c
  1866  00019E  3615               	rlcf	??_read_cal+4,f,c
  1867  0001A0  3616               	rlcf	??_read_cal+5,f,c
  1868  0001A2  0EA8               	movlw	low _mins
  1869  0001A4  2415               	addwf	??_read_cal+4,w,c
  1870  0001A6  6EE1               	movwf	fsr1l,c
  1871  0001A8  0E00               	movlw	high _mins
  1872  0001AA  2016               	addwfc	??_read_cal+5,w,c
  1873  0001AC  6EE2               	movwf	fsr1h,c
  1874  0001AE  50DE               	movf	postinc2,w,c
  1875  0001B0  5CE6               	subwf	postinc1,w,c
  1876  0001B2  50E6               	movf	postinc1,w,c
  1877  0001B4  0A80               	xorlw	128
  1878  0001B6  6E19               	movwf	(??_read_cal+8)& (0+255),c
  1879  0001B8  50DE               	movf	postinc2,w,c
  1880  0001BA  0A80               	xorlw	128
  1881  0001BC  5819               	subwfb	(??_read_cal+8)& (0+255),w,c
  1882  0001BE  A0D8               	btfss	status,0,c
  1883  0001C0  D015               	goto	l2796
  1884  0001C2  90D8               	bcf	status,0,c
  1885  0001C4  3422               	rlcf	read_cal@i,w,c
  1886  0001C6  6ED9               	movwf	fsr2l,c
  1887  0001C8  3423               	rlcf	read_cal@i+1,w,c
  1888  0001CA  6EDA               	movwf	fsr2h,c
  1889  0001CC  0E36               	movlw	low _ls
  1890  0001CE  26D9               	addwf	fsr2l,f,c
  1891  0001D0  0E00               	movlw	high _ls
  1892  0001D2  22DA               	addwfc	fsr2h,f,c
  1893  0001D4  CFDE F011          	movff	postinc2,??_read_cal
  1894  0001D8  CFDD F012          	movff	postdec2,??_read_cal+1
  1895  0001DC  90D8               	bcf	status,0,c
  1896  0001DE  3611               	rlcf	??_read_cal,f,c
  1897  0001E0  3612               	rlcf	??_read_cal+1,f,c
  1898  0001E2  0E88               	movlw	low _an
  1899  0001E4  2411               	addwf	??_read_cal,w,c
  1900  0001E6  6E1C               	movwf	_read_cal$493,c
  1901  0001E8  0E00               	movlw	high _an
  1902  0001EA  D014               	goto	L3
  1903  0001EC                     l2796:
  1904  0001EC  90D8               	bcf	status,0,c
  1905  0001EE  3422               	rlcf	read_cal@i,w,c
  1906  0001F0  6ED9               	movwf	fsr2l,c
  1907  0001F2  3423               	rlcf	read_cal@i+1,w,c
  1908  0001F4  6EDA               	movwf	fsr2h,c
  1909  0001F6  0E36               	movlw	low _ls
  1910  0001F8  26D9               	addwf	fsr2l,f,c
  1911  0001FA  0E00               	movlw	high _ls
  1912  0001FC  22DA               	addwfc	fsr2h,f,c
  1913  0001FE  CFDE F011          	movff	postinc2,??_read_cal
  1914  000202  CFDD F012          	movff	postdec2,??_read_cal+1
  1915  000206  90D8               	bcf	status,0,c
  1916  000208  3611               	rlcf	??_read_cal,f,c
  1917  00020A  3612               	rlcf	??_read_cal+1,f,c
  1918  00020C  0EA8               	movlw	low _mins
  1919  00020E  2411               	addwf	??_read_cal,w,c
  1920  000210  6E1C               	movwf	_read_cal$493,c
  1921  000212  0E00               	movlw	high _mins
  1922  000214                     L3:
  1923  000214  2012               	addwfc	??_read_cal+1,w,c
  1924  000216  6E1D               	movwf	_read_cal$493+1,c
  1925  000218  C01C  FFD9         	movff	_read_cal$493,fsr2l
  1926  00021C  C01D  FFDA         	movff	_read_cal$493+1,fsr2h
  1927  000220  90D8               	bcf	status,0,c
  1928  000222  3422               	rlcf	read_cal@i,w,c
  1929  000224  6EE1               	movwf	fsr1l,c
  1930  000226  3423               	rlcf	read_cal@i+1,w,c
  1931  000228  6EE2               	movwf	fsr1h,c
  1932  00022A  0E36               	movlw	low _ls
  1933  00022C  26E1               	addwf	fsr1l,f,c
  1934  00022E  0E00               	movlw	high _ls
  1935  000230  22E2               	addwfc	fsr1h,f,c
  1936  000232  CFE6 F011          	movff	postinc1,??_read_cal
  1937  000236  CFE5 F012          	movff	postdec1,??_read_cal+1
  1938  00023A  90D8               	bcf	status,0,c
  1939  00023C  3611               	rlcf	??_read_cal,f,c
  1940  00023E  3612               	rlcf	??_read_cal+1,f,c
  1941  000240  0EA8               	movlw	low _mins
  1942  000242  2411               	addwf	??_read_cal,w,c
  1943  000244  6EE1               	movwf	fsr1l,c
  1944  000246  0E00               	movlw	high _mins
  1945  000248  2012               	addwfc	??_read_cal+1,w,c
  1946  00024A  6EE2               	movwf	fsr1h,c
  1947  00024C  CFDE FFE6          	movff	postinc2,postinc1
  1948  000250  CFDD FFE5          	movff	postdec2,postdec1
  1949  000254  4A22               	infsnz	read_cal@i,f,c
  1950  000256  2A23               	incf	read_cal@i+1,f,c
  1951  000258  BE23               	btfsc	read_cal@i+1,7,c
  1952  00025A  D77D               	goto	l2792
  1953  00025C  5023               	movf	read_cal@i+1,w,c
  1954  00025E  E101               	bnz	l2804
  1955  000260  D774               	goto	L4
  1956  000262                     l2804:
  1957                           
  1958                           ;analog.c: 52: for (i = 0;i < 2;i++) maxs[es[i]] = maxs[es[i]]>an[es[i]]?maxs[es[i]]:an[
      +                          es[i]];
  1959  000262  0E00               	movlw	0
  1960  000264  6E23               	movwf	read_cal@i+1,c
  1961  000266  0E00               	movlw	0
  1962  000268  6E22               	movwf	read_cal@i,c
  1963  00026A  BE23               	btfsc	read_cal@i+1,7,c
  1964  00026C  D008               	goto	l2810
  1965  00026E  5023               	movf	read_cal@i+1,w,c
  1966  000270  E105               	bnz	u2540
  1967  000272  0E02               	movlw	2
  1968  000274  5C22               	subwf	read_cal@i,w,c
  1969  000276  B0D8               	btfsc	status,0,c
  1970  000278  D088               	goto	l2822
  1971  00027A  D001               	goto	l2810
  1972  00027C                     u2540:
  1973  00027C  D086               	goto	l2822
  1974  00027E                     l2810:
  1975  00027E  90D8               	bcf	status,0,c
  1976  000280  3422               	rlcf	read_cal@i,w,c
  1977  000282  6ED9               	movwf	fsr2l,c
  1978  000284  3423               	rlcf	read_cal@i+1,w,c
  1979  000286  6EDA               	movwf	fsr2h,c
  1980  000288  0E40               	movlw	low _es
  1981  00028A  26D9               	addwf	fsr2l,f,c
  1982  00028C  0E00               	movlw	high _es
  1983  00028E  22DA               	addwfc	fsr2h,f,c
  1984  000290  CFDE F011          	movff	postinc2,??_read_cal
  1985  000294  CFDD F012          	movff	postdec2,??_read_cal+1
  1986  000298  90D8               	bcf	status,0,c
  1987  00029A  3611               	rlcf	??_read_cal,f,c
  1988  00029C  3612               	rlcf	??_read_cal+1,f,c
  1989  00029E  0E9A               	movlw	low _maxs
  1990  0002A0  2411               	addwf	??_read_cal,w,c
  1991  0002A2  6ED9               	movwf	fsr2l,c
  1992  0002A4  0E00               	movlw	high _maxs
  1993  0002A6  2012               	addwfc	??_read_cal+1,w,c
  1994  0002A8  6EDA               	movwf	fsr2h,c
  1995  0002AA  90D8               	bcf	status,0,c
  1996  0002AC  3422               	rlcf	read_cal@i,w,c
  1997  0002AE  6EE1               	movwf	fsr1l,c
  1998  0002B0  3423               	rlcf	read_cal@i+1,w,c
  1999  0002B2  6EE2               	movwf	fsr1h,c
  2000  0002B4  0E40               	movlw	low _es
  2001  0002B6  26E1               	addwf	fsr1l,f,c
  2002  0002B8  0E00               	movlw	high _es
  2003  0002BA  22E2               	addwfc	fsr1h,f,c
  2004  0002BC  CFE6 F015          	movff	postinc1,??_read_cal+4
  2005  0002C0  CFE5 F016          	movff	postdec1,??_read_cal+5
  2006  0002C4  90D8               	bcf	status,0,c
  2007  0002C6  3615               	rlcf	??_read_cal+4,f,c
  2008  0002C8  3616               	rlcf	??_read_cal+5,f,c
  2009  0002CA  0E88               	movlw	low _an
  2010  0002CC  2415               	addwf	??_read_cal+4,w,c
  2011  0002CE  6EE1               	movwf	fsr1l,c
  2012  0002D0  0E00               	movlw	high _an
  2013  0002D2  2016               	addwfc	??_read_cal+5,w,c
  2014  0002D4  6EE2               	movwf	fsr1h,c
  2015  0002D6  50DE               	movf	postinc2,w,c
  2016  0002D8  5CE6               	subwf	postinc1,w,c
  2017  0002DA  50E6               	movf	postinc1,w,c
  2018  0002DC  0A80               	xorlw	128
  2019  0002DE  6E19               	movwf	(??_read_cal+8)& (0+255),c
  2020  0002E0  50DE               	movf	postinc2,w,c
  2021  0002E2  0A80               	xorlw	128
  2022  0002E4  5819               	subwfb	(??_read_cal+8)& (0+255),w,c
  2023  0002E6  A0D8               	btfss	status,0,c
  2024  0002E8  D015               	goto	l2814
  2025  0002EA  90D8               	bcf	status,0,c
  2026  0002EC  3422               	rlcf	read_cal@i,w,c
  2027  0002EE  6ED9               	movwf	fsr2l,c
  2028  0002F0  3423               	rlcf	read_cal@i+1,w,c
  2029  0002F2  6EDA               	movwf	fsr2h,c
  2030  0002F4  0E40               	movlw	low _es
  2031  0002F6  26D9               	addwf	fsr2l,f,c
  2032  0002F8  0E00               	movlw	high _es
  2033  0002FA  22DA               	addwfc	fsr2h,f,c
  2034  0002FC  CFDE F011          	movff	postinc2,??_read_cal
  2035  000300  CFDD F012          	movff	postdec2,??_read_cal+1
  2036  000304  90D8               	bcf	status,0,c
  2037  000306  3611               	rlcf	??_read_cal,f,c
  2038  000308  3612               	rlcf	??_read_cal+1,f,c
  2039  00030A  0E88               	movlw	low _an
  2040  00030C  2411               	addwf	??_read_cal,w,c
  2041  00030E  6E1E               	movwf	_read_cal$495,c
  2042  000310  0E00               	movlw	high _an
  2043  000312  D014               	goto	L5
  2044  000314                     l2814:
  2045  000314  90D8               	bcf	status,0,c
  2046  000316  3422               	rlcf	read_cal@i,w,c
  2047  000318  6ED9               	movwf	fsr2l,c
  2048  00031A  3423               	rlcf	read_cal@i+1,w,c
  2049  00031C  6EDA               	movwf	fsr2h,c
  2050  00031E  0E40               	movlw	low _es
  2051  000320  26D9               	addwf	fsr2l,f,c
  2052  000322  0E00               	movlw	high _es
  2053  000324  22DA               	addwfc	fsr2h,f,c
  2054  000326  CFDE F011          	movff	postinc2,??_read_cal
  2055  00032A  CFDD F012          	movff	postdec2,??_read_cal+1
  2056  00032E  90D8               	bcf	status,0,c
  2057  000330  3611               	rlcf	??_read_cal,f,c
  2058  000332  3612               	rlcf	??_read_cal+1,f,c
  2059  000334  0E9A               	movlw	low _maxs
  2060  000336  2411               	addwf	??_read_cal,w,c
  2061  000338  6E1E               	movwf	_read_cal$495,c
  2062  00033A  0E00               	movlw	high _maxs
  2063  00033C                     L5:
  2064  00033C  2012               	addwfc	??_read_cal+1,w,c
  2065  00033E  6E1F               	movwf	_read_cal$495+1,c
  2066  000340  C01E  FFD9         	movff	_read_cal$495,fsr2l
  2067  000344  C01F  FFDA         	movff	_read_cal$495+1,fsr2h
  2068  000348  90D8               	bcf	status,0,c
  2069  00034A  3422               	rlcf	read_cal@i,w,c
  2070  00034C  6EE1               	movwf	fsr1l,c
  2071  00034E  3423               	rlcf	read_cal@i+1,w,c
  2072  000350  6EE2               	movwf	fsr1h,c
  2073  000352  0E40               	movlw	low _es
  2074  000354  26E1               	addwf	fsr1l,f,c
  2075  000356  0E00               	movlw	high _es
  2076  000358  22E2               	addwfc	fsr1h,f,c
  2077  00035A  CFE6 F011          	movff	postinc1,??_read_cal
  2078  00035E  CFE5 F012          	movff	postdec1,??_read_cal+1
  2079  000362  90D8               	bcf	status,0,c
  2080  000364  3611               	rlcf	??_read_cal,f,c
  2081  000366  3612               	rlcf	??_read_cal+1,f,c
  2082  000368  0E9A               	movlw	low _maxs
  2083  00036A  2411               	addwf	??_read_cal,w,c
  2084  00036C  6EE1               	movwf	fsr1l,c
  2085  00036E  0E00               	movlw	high _maxs
  2086  000370  2012               	addwfc	??_read_cal+1,w,c
  2087  000372  6EE2               	movwf	fsr1h,c
  2088  000374  CFDE FFE6          	movff	postinc2,postinc1
  2089  000378  CFDD FFE5          	movff	postdec2,postdec1
  2090  00037C  4A22               	infsnz	read_cal@i,f,c
  2091  00037E  2A23               	incf	read_cal@i+1,f,c
  2092  000380  BE23               	btfsc	read_cal@i+1,7,c
  2093  000382  D77D               	goto	l2810
  2094  000384  5023               	movf	read_cal@i+1,w,c
  2095  000386  E101               	bnz	l2822
  2096  000388  D774               	goto	L6
  2097  00038A                     l2822:
  2098                           
  2099                           ;analog.c: 53: for (i = 0;i < 2;i++) mins[es[i]] = mins[es[i]]<an[es[i]]?mins[es[i]]:an[
      +                          es[i]];
  2100  00038A  0E00               	movlw	0
  2101  00038C  6E23               	movwf	read_cal@i+1,c
  2102  00038E  0E00               	movlw	0
  2103  000390  6E22               	movwf	read_cal@i,c
  2104  000392  BE23               	btfsc	read_cal@i+1,7,c
  2105  000394  D008               	goto	l2828
  2106  000396  5023               	movf	read_cal@i+1,w,c
  2107  000398  E105               	bnz	u2570
  2108  00039A  0E02               	movlw	2
  2109  00039C  5C22               	subwf	read_cal@i,w,c
  2110  00039E  B0D8               	btfsc	status,0,c
  2111  0003A0  0012               	return	
  2112  0003A2  D001               	goto	l2828
  2113  0003A4                     u2570:
  2114  0003A4  0012               	return	
  2115  0003A6                     l2828:
  2116  0003A6  90D8               	bcf	status,0,c
  2117  0003A8  3422               	rlcf	read_cal@i,w,c
  2118  0003AA  6ED9               	movwf	fsr2l,c
  2119  0003AC  3423               	rlcf	read_cal@i+1,w,c
  2120  0003AE  6EDA               	movwf	fsr2h,c
  2121  0003B0  0E40               	movlw	low _es
  2122  0003B2  26D9               	addwf	fsr2l,f,c
  2123  0003B4  0E00               	movlw	high _es
  2124  0003B6  22DA               	addwfc	fsr2h,f,c
  2125  0003B8  CFDE F011          	movff	postinc2,??_read_cal
  2126  0003BC  CFDD F012          	movff	postdec2,??_read_cal+1
  2127  0003C0  90D8               	bcf	status,0,c
  2128  0003C2  3611               	rlcf	??_read_cal,f,c
  2129  0003C4  3612               	rlcf	??_read_cal+1,f,c
  2130  0003C6  0E88               	movlw	low _an
  2131  0003C8  2411               	addwf	??_read_cal,w,c
  2132  0003CA  6ED9               	movwf	fsr2l,c
  2133  0003CC  0E00               	movlw	high _an
  2134  0003CE  2012               	addwfc	??_read_cal+1,w,c
  2135  0003D0  6EDA               	movwf	fsr2h,c
  2136  0003D2  90D8               	bcf	status,0,c
  2137  0003D4  3422               	rlcf	read_cal@i,w,c
  2138  0003D6  6EE1               	movwf	fsr1l,c
  2139  0003D8  3423               	rlcf	read_cal@i+1,w,c
  2140  0003DA  6EE2               	movwf	fsr1h,c
  2141  0003DC  0E40               	movlw	low _es
  2142  0003DE  26E1               	addwf	fsr1l,f,c
  2143  0003E0  0E00               	movlw	high _es
  2144  0003E2  22E2               	addwfc	fsr1h,f,c
  2145  0003E4  CFE6 F015          	movff	postinc1,??_read_cal+4
  2146  0003E8  CFE5 F016          	movff	postdec1,??_read_cal+5
  2147  0003EC  90D8               	bcf	status,0,c
  2148  0003EE  3615               	rlcf	??_read_cal+4,f,c
  2149  0003F0  3616               	rlcf	??_read_cal+5,f,c
  2150  0003F2  0EA8               	movlw	low _mins
  2151  0003F4  2415               	addwf	??_read_cal+4,w,c
  2152  0003F6  6EE1               	movwf	fsr1l,c
  2153  0003F8  0E00               	movlw	high _mins
  2154  0003FA  2016               	addwfc	??_read_cal+5,w,c
  2155  0003FC  6EE2               	movwf	fsr1h,c
  2156  0003FE  50DE               	movf	postinc2,w,c
  2157  000400  5CE6               	subwf	postinc1,w,c
  2158  000402  50E6               	movf	postinc1,w,c
  2159  000404  0A80               	xorlw	128
  2160  000406  6E19               	movwf	(??_read_cal+8)& (0+255),c
  2161  000408  50DE               	movf	postinc2,w,c
  2162  00040A  0A80               	xorlw	128
  2163  00040C  5819               	subwfb	(??_read_cal+8)& (0+255),w,c
  2164  00040E  A0D8               	btfss	status,0,c
  2165  000410  D015               	goto	l2832
  2166  000412  90D8               	bcf	status,0,c
  2167  000414  3422               	rlcf	read_cal@i,w,c
  2168  000416  6ED9               	movwf	fsr2l,c
  2169  000418  3423               	rlcf	read_cal@i+1,w,c
  2170  00041A  6EDA               	movwf	fsr2h,c
  2171  00041C  0E40               	movlw	low _es
  2172  00041E  26D9               	addwf	fsr2l,f,c
  2173  000420  0E00               	movlw	high _es
  2174  000422  22DA               	addwfc	fsr2h,f,c
  2175  000424  CFDE F011          	movff	postinc2,??_read_cal
  2176  000428  CFDD F012          	movff	postdec2,??_read_cal+1
  2177  00042C  90D8               	bcf	status,0,c
  2178  00042E  3611               	rlcf	??_read_cal,f,c
  2179  000430  3612               	rlcf	??_read_cal+1,f,c
  2180  000432  0E88               	movlw	low _an
  2181  000434  2411               	addwf	??_read_cal,w,c
  2182  000436  6E20               	movwf	_read_cal$497,c
  2183  000438  0E00               	movlw	high _an
  2184  00043A  D014               	goto	L7
  2185  00043C                     l2832:
  2186  00043C  90D8               	bcf	status,0,c
  2187  00043E  3422               	rlcf	read_cal@i,w,c
  2188  000440  6ED9               	movwf	fsr2l,c
  2189  000442  3423               	rlcf	read_cal@i+1,w,c
  2190  000444  6EDA               	movwf	fsr2h,c
  2191  000446  0E40               	movlw	low _es
  2192  000448  26D9               	addwf	fsr2l,f,c
  2193  00044A  0E00               	movlw	high _es
  2194  00044C  22DA               	addwfc	fsr2h,f,c
  2195  00044E  CFDE F011          	movff	postinc2,??_read_cal
  2196  000452  CFDD F012          	movff	postdec2,??_read_cal+1
  2197  000456  90D8               	bcf	status,0,c
  2198  000458  3611               	rlcf	??_read_cal,f,c
  2199  00045A  3612               	rlcf	??_read_cal+1,f,c
  2200  00045C  0EA8               	movlw	low _mins
  2201  00045E  2411               	addwf	??_read_cal,w,c
  2202  000460  6E20               	movwf	_read_cal$497,c
  2203  000462  0E00               	movlw	high _mins
  2204  000464                     L7:
  2205  000464  2012               	addwfc	??_read_cal+1,w,c
  2206  000466  6E21               	movwf	_read_cal$497+1,c
  2207  000468  C020  FFD9         	movff	_read_cal$497,fsr2l
  2208  00046C  C021  FFDA         	movff	_read_cal$497+1,fsr2h
  2209  000470  90D8               	bcf	status,0,c
  2210  000472  3422               	rlcf	read_cal@i,w,c
  2211  000474  6EE1               	movwf	fsr1l,c
  2212  000476  3423               	rlcf	read_cal@i+1,w,c
  2213  000478  6EE2               	movwf	fsr1h,c
  2214  00047A  0E40               	movlw	low _es
  2215  00047C  26E1               	addwf	fsr1l,f,c
  2216  00047E  0E00               	movlw	high _es
  2217  000480  22E2               	addwfc	fsr1h,f,c
  2218  000482  CFE6 F011          	movff	postinc1,??_read_cal
  2219  000486  CFE5 F012          	movff	postdec1,??_read_cal+1
  2220  00048A  90D8               	bcf	status,0,c
  2221  00048C  3611               	rlcf	??_read_cal,f,c
  2222  00048E  3612               	rlcf	??_read_cal+1,f,c
  2223  000490  0EA8               	movlw	low _mins
  2224  000492  2411               	addwf	??_read_cal,w,c
  2225  000494  6EE1               	movwf	fsr1l,c
  2226  000496  0E00               	movlw	high _mins
  2227  000498  2012               	addwfc	??_read_cal+1,w,c
  2228  00049A  6EE2               	movwf	fsr1h,c
  2229  00049C  CFDE FFE6          	movff	postinc2,postinc1
  2230  0004A0  CFDD FFE5          	movff	postdec2,postdec1
  2231  0004A4  4A22               	infsnz	read_cal@i,f,c
  2232  0004A6  2A23               	incf	read_cal@i+1,f,c
  2233  0004A8  BE23               	btfsc	read_cal@i+1,7,c
  2234  0004AA  D77D               	goto	l2828
  2235  0004AC  5023               	movf	read_cal@i+1,w,c
  2236  0004AE  E101               	bnz	l130
  2237  0004B0  D774               	goto	L8
  2238  0004B2                     l130:
  2239  0004B2  0012               	return		;funcret
  2240  0004B4                     __end_of_read_cal:
  2241                           	opt stack 0
  2242                           tblptru	equ	0xFF8
  2243                           tblptrh	equ	0xFF7
  2244                           tblptrl	equ	0xFF6
  2245                           tablat	equ	0xFF5
  2246                           postinc0	equ	0xFEE
  2247                           wreg	equ	0xFE8
  2248                           postinc1	equ	0xFE6
  2249                           postdec1	equ	0xFE5
  2250                           fsr1h	equ	0xFE2
  2251                           fsr1l	equ	0xFE1
  2252                           postinc2	equ	0xFDE
  2253                           postdec2	equ	0xFDD
  2254                           fsr2h	equ	0xFDA
  2255                           fsr2l	equ	0xFD9
  2256                           status	equ	0xFD8
  2257                           
  2258 ;; *************** function _printf *****************
  2259 ;; Defined at:
  2260 ;;		line 464 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2263 ;;		 -> STR_6(44), STR_5(43), STR_4(36), STR_3(47), 
  2264 ;;		 -> STR_2(46), STR_1(40), 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  tmpval          4    0        struct .
  2267 ;;  cp              3    0        PTR const unsigned char 
  2268 ;;  width           2   46[COMRAM] int 
  2269 ;;  val             2   43[COMRAM] unsigned int 
  2270 ;;  ap              2   40[COMRAM] PTR void [1]
  2271 ;;		 -> ?_printf(2), 
  2272 ;;  len             2    0        unsigned int 
  2273 ;;  c               1   48[COMRAM] char 
  2274 ;;  flag            1   45[COMRAM] unsigned char 
  2275 ;;  prec            1   42[COMRAM] char 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  2   28[COMRAM] int 
  2278 ;; Registers used:
  2279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2285 ;;      Params:         8       0       0       0       0       0       0       0       0
  2286 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2287 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2288 ;;      Totals:        21       0       0       0       0       0       0       0       0
  2289 ;;Total ram usage:       21 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    2
  2292 ;; This function calls:
  2293 ;;		___lwdiv
  2294 ;;		___lwmod
  2295 ;;		___wmul
  2296 ;;		_isdigit
  2297 ;;		_putch
  2298 ;; This function is called by:
  2299 ;;		_main
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           	psect	text6
  2304  000B10                     __ptext6:
  2305                           	opt stack 0
  2306  000B10                     _printf:
  2307                           	opt stack 28
  2308                           
  2309                           ;doprnt.c: 466: va_list ap;
  2310                           ;doprnt.c: 499: signed char c;
  2311                           ;doprnt.c: 501: int width;
  2312                           ;doprnt.c: 506: signed char prec;
  2313                           ;doprnt.c: 508: unsigned char flag;
  2314                           ;doprnt.c: 523: union {
  2315                           ;doprnt.c: 524: unsigned long vd;
  2316                           ;doprnt.c: 525: double integ;
  2317                           ;doprnt.c: 526: } tmpval;
  2318                           ;doprnt.c: 528: unsigned int val;
  2319                           ;doprnt.c: 529: unsigned len;
  2320                           ;doprnt.c: 530: const char * cp;
  2321                           ;doprnt.c: 533: *ap = __va_start();
  2322                           
  2323                           ;incstack = 0
  2324  000B10  0E1F               	movlw	low (?_printf+2)
  2325  000B12  6E29               	movwf	printf@ap,c
  2326  000B14  0E00               	movlw	high (?_printf+2)
  2327  000B16  6E2A               	movwf	printf@ap+1,c
  2328                           
  2329                           ;doprnt.c: 536: while(c = *f++) {
  2330  000B18  D111               	goto	l2714
  2331  000B1A                     l2620:
  2332                           
  2333                           ;doprnt.c: 538: if(c != '%')
  2334  000B1A  0E25               	movlw	37
  2335  000B1C  1831               	xorwf	printf@c,w,c
  2336  000B1E  B4D8               	btfsc	status,2,c
  2337  000B20  D004               	goto	l2624
  2338                           
  2339                           ;doprnt.c: 540: {
  2340                           ;doprnt.c: 541: (putch(c) );
  2341  000B22  5031               	movf	printf@c,w,c
  2342  000B24  ECC6  F009         	call	_putch
  2343                           
  2344                           ;doprnt.c: 542: continue;
  2345  000B28  D109               	goto	l2714
  2346  000B2A                     l2624:
  2347                           
  2348                           ;doprnt.c: 543: }
  2349                           ;doprnt.c: 546: width = 0;
  2350  000B2A  0E00               	movlw	0
  2351  000B2C  6E30               	movwf	printf@width+1,c
  2352  000B2E  0E00               	movlw	0
  2353  000B30  6E2F               	movwf	printf@width,c
  2354                           
  2355                           ;doprnt.c: 548: flag = 0;
  2356  000B32  0E00               	movlw	0
  2357  000B34  6E2E               	movwf	printf@flag,c
  2358                           
  2359                           ;doprnt.c: 551: switch(*f) {
  2360                           
  2361                           ;doprnt.c: 550: for(;;) {
  2362  000B36  D003               	goto	l2630
  2363  000B38                     l2626:
  2364                           
  2365                           ;doprnt.c: 580: flag |= 0x04;
  2366  000B38  842E               	bsf	printf@flag,2,c
  2367                           
  2368                           ;doprnt.c: 581: f++;
  2369  000B3A  4A1D               	infsnz	printf@f,f,c
  2370  000B3C  2A1E               	incf	printf@f+1,f,c
  2371  000B3E                     l2630:
  2372  000B3E  C01D  FFF6         	movff	printf@f,tblptrl
  2373  000B42  C01E  FFF7         	movff	printf@f+1,tblptrh
  2374  000B46                     	if	0	;tblptru may be non-zero
  2375  000B46                     	endif
  2376  000B46                     	if	0	;tblptru may be non-zero
  2377  000B46                     	endif
  2378  000B46  0008               	tblrd		*
  2379  000B48  50F5               	movf	tablat,w,c
  2380                           
  2381                           ; Switch size 1, requested type "space"
  2382                           ; Number of cases is 1, Range of values is 48 to 48
  2383                           ; switch strategies available:
  2384                           ; Name         Instructions Cycles
  2385                           ; simple_byte            4     3 (average)
  2386                           ;	Chosen strategy is simple_byte
  2387  000B4A  0A30               	xorlw	48	; case 48
  2388  000B4C  B4D8               	btfsc	status,2,c
  2389  000B4E  D7F4               	goto	l2626
  2390                           
  2391                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2392                           
  2393                           ;doprnt.c: 586: }
  2394                           
  2395                           ;doprnt.c: 585: break;
  2396  000B50  C01D  FFF6         	movff	printf@f,tblptrl
  2397  000B54  C01E  FFF7         	movff	printf@f+1,tblptrh
  2398  000B58                     	if	0	;tblptru may be non-zero
  2399  000B58                     	endif
  2400  000B58                     	if	0	;tblptru may be non-zero
  2401  000B58                     	endif
  2402  000B58  0008               	tblrd		*
  2403  000B5A  50F5               	movf	tablat,w,c
  2404  000B5C  ECAE  F009         	call	_isdigit
  2405  000B60  A0D8               	btfss	status,0,c
  2406  000B62  D032               	goto	l2646
  2407                           
  2408                           ;doprnt.c: 598: width = 0;
  2409  000B64  0E00               	movlw	0
  2410  000B66  6E30               	movwf	printf@width+1,c
  2411  000B68  0E00               	movlw	0
  2412  000B6A  6E2F               	movwf	printf@width,c
  2413  000B6C                     l2636:
  2414                           
  2415                           ;doprnt.c: 600: width *= 10;
  2416  000B6C  C02F  F011         	movff	printf@width,___wmul@multiplier
  2417  000B70  C030  F012         	movff	printf@width+1,___wmul@multiplier+1
  2418  000B74  0E00               	movlw	0
  2419  000B76  6E14               	movwf	___wmul@multiplicand+1,c
  2420  000B78  0E0A               	movlw	10
  2421  000B7A  6E13               	movwf	___wmul@multiplicand,c
  2422  000B7C  EC89  F009         	call	___wmul	;wreg free
  2423  000B80  C011  F02F         	movff	?___wmul,printf@width
  2424  000B84  C012  F030         	movff	?___wmul+1,printf@width+1
  2425                           
  2426                           ;doprnt.c: 601: width += *f++ - '0';
  2427  000B88  0ED0               	movlw	208
  2428  000B8A  6E25               	movwf	??_printf& (0+255),c
  2429  000B8C  0EFF               	movlw	255
  2430  000B8E  6E26               	movwf	(??_printf+1)& (0+255),c
  2431  000B90  C01D  FFF6         	movff	printf@f,tblptrl
  2432  000B94  C01E  FFF7         	movff	printf@f+1,tblptrh
  2433  000B98                     	if	0	;tblptru may be non-zero
  2434  000B98                     	endif
  2435  000B98                     	if	0	;tblptru may be non-zero
  2436  000B98                     	endif
  2437  000B98  0008               	tblrd		*
  2438  000B9A  50F5               	movf	tablat,w,c
  2439  000B9C  6E27               	movwf	(??_printf+2)& (0+255),c
  2440  000B9E  6A28               	clrf	(??_printf+3)& (0+255),c
  2441  000BA0  5025               	movf	??_printf,w,c
  2442  000BA2  2627               	addwf	??_printf+2,f,c
  2443  000BA4  5026               	movf	??_printf+1,w,c
  2444  000BA6  2228               	addwfc	??_printf+3,f,c
  2445  000BA8  5027               	movf	??_printf+2,w,c
  2446  000BAA  262F               	addwf	printf@width,f,c
  2447  000BAC  5028               	movf	??_printf+3,w,c
  2448  000BAE  2230               	addwfc	printf@width+1,f,c
  2449  000BB0  4A1D               	infsnz	printf@f,f,c
  2450  000BB2  2A1E               	incf	printf@f+1,f,c
  2451                           
  2452                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2453  000BB4  C01D  FFF6         	movff	printf@f,tblptrl
  2454  000BB8  C01E  FFF7         	movff	printf@f+1,tblptrh
  2455  000BBC                     	if	0	;tblptru may be non-zero
  2456  000BBC                     	endif
  2457  000BBC                     	if	0	;tblptru may be non-zero
  2458  000BBC                     	endif
  2459  000BBC  0008               	tblrd		*
  2460  000BBE  50F5               	movf	tablat,w,c
  2461  000BC0  ECAE  F009         	call	_isdigit
  2462  000BC4  B0D8               	btfsc	status,0,c
  2463  000BC6  D7D2               	goto	l2636
  2464  000BC8                     l2646:
  2465  000BC8  C01D  FFF6         	movff	printf@f,tblptrl
  2466  000BCC  C01E  FFF7         	movff	printf@f+1,tblptrh
  2467  000BD0  4A1D               	infsnz	printf@f,f,c
  2468  000BD2  2A1E               	incf	printf@f+1,f,c
  2469  000BD4                     	if	0	;tblptru may be non-zero
  2470  000BD4                     	endif
  2471  000BD4                     	if	0	;tblptru may be non-zero
  2472  000BD4                     	endif
  2473  000BD4  0008               	tblrd		*
  2474  000BD6  CFF5 F031          	movff	tablat,printf@c
  2475  000BDA  5031               	movf	printf@c,w,c
  2476                           
  2477                           ; Switch size 1, requested type "space"
  2478                           ; Number of cases is 3, Range of values is 0 to 105
  2479                           ; switch strategies available:
  2480                           ; Name         Instructions Cycles
  2481                           ; simple_byte           10     6 (average)
  2482                           ;	Chosen strategy is simple_byte
  2483  000BDC  0A00               	xorlw	0	; case 0
  2484  000BDE  B4D8               	btfsc	status,2,c
  2485  000BE0  0012               	return	
  2486  000BE2  0A64               	xorlw	100	; case 100
  2487  000BE4  B4D8               	btfsc	status,2,c
  2488  000BE6  D003               	goto	l2648
  2489  000BE8  0A0D               	xorlw	13	; case 105
  2490  000BEA  A4D8               	btfss	status,2,c
  2491  000BEC  D0A7               	goto	l2714
  2492  000BEE                     l2648:
  2493                           
  2494                           ;doprnt.c: 1253: {
  2495                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2496  000BEE  C029  FFD9         	movff	printf@ap,fsr2l
  2497  000BF2  C02A  FFDA         	movff	printf@ap+1,fsr2h
  2498  000BF6  CFDE F02C          	movff	postinc2,printf@val
  2499  000BFA  CFDD F02D          	movff	postdec2,printf@val+1
  2500  000BFE  0E02               	movlw	2
  2501  000C00  2629               	addwf	printf@ap,f,c
  2502  000C02  0E00               	movlw	0
  2503  000C04  222A               	addwfc	printf@ap+1,f,c
  2504                           
  2505                           ;doprnt.c: 1261: if((int)val < 0) {
  2506  000C06  AE2D               	btfss	printf@val+1,7,c
  2507  000C08  D006               	goto	l2658
  2508                           
  2509                           ;doprnt.c: 1262: flag |= 0x03;
  2510  000C0A  0E03               	movlw	3
  2511  000C0C  122E               	iorwf	printf@flag,f,c
  2512                           
  2513                           ;doprnt.c: 1263: val = -val;
  2514  000C0E  6C2C               	negf	printf@val,c
  2515  000C10  1E2D               	comf	printf@val+1,f,c
  2516  000C12  B0D8               	btfsc	status,0,c
  2517  000C14  2A2D               	incf	printf@val+1,f,c
  2518  000C16                     l2658:
  2519                           
  2520                           ;doprnt.c: 1264: }
  2521                           ;doprnt.c: 1266: }
  2522                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2523  000C16  0E01               	movlw	1
  2524  000C18  6E31               	movwf	printf@c,c
  2525  000C1A                     l2660:
  2526  000C1A  0E05               	movlw	5
  2527  000C1C  1831               	xorwf	printf@c,w,c
  2528  000C1E  B4D8               	btfsc	status,2,c
  2529  000C20  D012               	goto	l2672
  2530                           
  2531                           ;doprnt.c: 1306: if(val < dpowers[c])
  2532  000C22  5031               	movf	printf@c,w,c
  2533  000C24  0D02               	mullw	2
  2534  000C26  0EF5               	movlw	low _dpowers
  2535  000C28  24F3               	addwf	prodl,w,c
  2536  000C2A  6EF6               	movwf	tblptrl,c
  2537  000C2C  0E7B               	movlw	high _dpowers
  2538  000C2E  20F4               	addwfc	prodh,w,c
  2539  000C30  6EF7               	movwf	tblptrh,c
  2540  000C32                     	if	0	;There are less than 3 active tblptr bytes
  2541  000C32                     	endif
  2542  000C32  0009               	tblrd		*+
  2543  000C34  50F5               	movf	tablat,w,c
  2544  000C36  5C2C               	subwf	printf@val,w,c
  2545  000C38  0009               	tblrd		*+
  2546  000C3A  50F5               	movf	tablat,w,c
  2547  000C3C  582D               	subwfb	printf@val+1,w,c
  2548  000C3E  A0D8               	btfss	status,0,c
  2549  000C40  D002               	goto	l2672
  2550                           
  2551                           ;doprnt.c: 1307: break;
  2552  000C42  2A31               	incf	printf@c,f,c
  2553  000C44  D7EA               	goto	l2660
  2554  000C46                     l2672:
  2555                           
  2556                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2557  000C46  502F               	movf	printf@width,w,c
  2558  000C48  1030               	iorwf	printf@width+1,w,c
  2559  000C4A  B4D8               	btfsc	status,2,c
  2560  000C4C  D009               	goto	l2678
  2561  000C4E  C02E  F025         	movff	printf@flag,??_printf
  2562  000C52  0E03               	movlw	3
  2563  000C54  1625               	andwf	??_printf,f,c
  2564  000C56  B4D8               	btfsc	status,2,c
  2565  000C58  D003               	goto	l2678
  2566                           
  2567                           ;doprnt.c: 1346: width--;
  2568  000C5A  062F               	decf	printf@width,f,c
  2569  000C5C  A0D8               	btfss	status,0,c
  2570  000C5E  0630               	decf	printf@width+1,f,c
  2571  000C60                     l2678:
  2572                           
  2573                           ;doprnt.c: 1381: if(width > c)
  2574  000C60  0E80               	movlw	128
  2575  000C62  BE31               	btfsc	printf@c,7,c
  2576  000C64  0E7F               	movlw	127
  2577  000C66  6E25               	movwf	??_printf& (0+255),c
  2578  000C68  502F               	movf	printf@width,w,c
  2579  000C6A  5C31               	subwf	printf@c,w,c
  2580  000C6C  5030               	movf	printf@width+1,w,c
  2581  000C6E  0A80               	xorlw	128
  2582  000C70  5825               	subwfb	??_printf& (0+255),w,c
  2583  000C72  B0D8               	btfsc	status,0,c
  2584  000C74  D007               	goto	l2682
  2585                           
  2586                           ;doprnt.c: 1382: width -= c;
  2587  000C76  5031               	movf	printf@c,w,c
  2588  000C78  5E2F               	subwf	printf@width,f,c
  2589  000C7A  0E00               	movlw	0
  2590  000C7C  BE31               	btfsc	printf@c,7,c
  2591  000C7E  0EFF               	movlw	255
  2592  000C80  5A30               	subwfb	printf@width+1,f,c
  2593  000C82  D004               	goto	l2684
  2594  000C84                     l2682:
  2595                           
  2596                           ;doprnt.c: 1383: else
  2597                           ;doprnt.c: 1384: width = 0;
  2598  000C84  0E00               	movlw	0
  2599  000C86  6E30               	movwf	printf@width+1,c
  2600  000C88  0E00               	movlw	0
  2601  000C8A  6E2F               	movwf	printf@width,c
  2602  000C8C                     l2684:
  2603                           
  2604                           ;doprnt.c: 1387: if(flag & 0x04) {
  2605  000C8C  A42E               	btfss	printf@flag,2,c
  2606  000C8E  D014               	goto	l2696
  2607                           
  2608                           ;doprnt.c: 1392: if(flag & 0x03)
  2609  000C90  C02E  F025         	movff	printf@flag,??_printf
  2610  000C94  0E03               	movlw	3
  2611  000C96  1625               	andwf	??_printf,f,c
  2612  000C98  B4D8               	btfsc	status,2,c
  2613  000C9A  D003               	goto	l2690
  2614                           
  2615                           ;doprnt.c: 1393: (putch('-') );
  2616  000C9C  0E2D               	movlw	45
  2617  000C9E  ECC6  F009         	call	_putch
  2618  000CA2                     l2690:
  2619                           
  2620                           ;doprnt.c: 1415: if(width)
  2621  000CA2  502F               	movf	printf@width,w,c
  2622  000CA4  1030               	iorwf	printf@width+1,w,c
  2623  000CA6  B4D8               	btfsc	status,2,c
  2624  000CA8  D01E               	goto	l2706
  2625                           
  2626                           ;doprnt.c: 1417: (putch('0') );
  2627                           
  2628                           ;doprnt.c: 1416: do
  2629  000CAA  0E30               	movlw	48
  2630  000CAC  ECC6  F009         	call	_putch
  2631                           
  2632                           ;doprnt.c: 1418: while(--width);
  2633  000CB0  062F               	decf	printf@width,f,c
  2634  000CB2  A0D8               	btfss	status,0,c
  2635  000CB4  0630               	decf	printf@width+1,f,c
  2636  000CB6  D7F5               	goto	l2690
  2637  000CB8                     l2696:
  2638                           
  2639                           ;doprnt.c: 1422: {
  2640                           ;doprnt.c: 1424: if(width
  2641                           ;doprnt.c: 1428: )
  2642  000CB8  502F               	movf	printf@width,w,c
  2643  000CBA  1030               	iorwf	printf@width+1,w,c
  2644  000CBC  B4D8               	btfsc	status,2,c
  2645  000CBE  D00A               	goto	l2702
  2646  000CC0                     l2698:
  2647                           
  2648                           ;doprnt.c: 1430: (putch(' ') );
  2649  000CC0  0E20               	movlw	32
  2650  000CC2  ECC6  F009         	call	_putch
  2651                           
  2652                           ;doprnt.c: 1431: while(--width);
  2653  000CC6  062F               	decf	printf@width,f,c
  2654  000CC8  A0D8               	btfss	status,0,c
  2655  000CCA  0630               	decf	printf@width+1,f,c
  2656  000CCC  502F               	movf	printf@width,w,c
  2657  000CCE  1030               	iorwf	printf@width+1,w,c
  2658  000CD0  A4D8               	btfss	status,2,c
  2659  000CD2  D7F6               	goto	l2698
  2660  000CD4                     l2702:
  2661                           
  2662                           ;doprnt.c: 1438: if(flag & 0x03)
  2663  000CD4  C02E  F025         	movff	printf@flag,??_printf
  2664  000CD8  0E03               	movlw	3
  2665  000CDA  1625               	andwf	??_printf,f,c
  2666  000CDC  B4D8               	btfsc	status,2,c
  2667  000CDE  D003               	goto	l2706
  2668                           
  2669                           ;doprnt.c: 1439: (putch('-') );
  2670  000CE0  0E2D               	movlw	45
  2671  000CE2  ECC6  F009         	call	_putch
  2672  000CE6                     l2706:
  2673                           
  2674                           ;doprnt.c: 1469: }
  2675                           ;doprnt.c: 1472: prec = c;
  2676  000CE6  C031  F02B         	movff	printf@c,printf@prec
  2677                           
  2678                           ;doprnt.c: 1474: while(prec--) {
  2679  000CEA  D024               	goto	l2712
  2680  000CEC                     l2708:
  2681                           
  2682                           ;doprnt.c: 1478: {
  2683                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2684  000CEC  502B               	movf	printf@prec,w,c
  2685  000CEE  0D02               	mullw	2
  2686  000CF0  0EF5               	movlw	low _dpowers
  2687  000CF2  24F3               	addwf	prodl,w,c
  2688  000CF4  6EF6               	movwf	tblptrl,c
  2689  000CF6  0E7B               	movlw	high _dpowers
  2690  000CF8  20F4               	addwfc	prodh,w,c
  2691  000CFA  6EF7               	movwf	tblptrh,c
  2692  000CFC                     	if	0	;There are less than 3 active tblptr bytes
  2693  000CFC                     	endif
  2694  000CFC  0009               	tblrd		*+
  2695  000CFE  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2696  000D02  000A               	tblrd		*-
  2697  000D04  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2698  000D08  C02C  F011         	movff	printf@val,___lwdiv@dividend
  2699  000D0C  C02D  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2700  000D10  ECA8  F008         	call	___lwdiv	;wreg free
  2701  000D14  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2702  000D18  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2703  000D1C  0E00               	movlw	0
  2704  000D1E  6E1B               	movwf	___lwmod@divisor+1,c
  2705  000D20  0E0A               	movlw	10
  2706  000D22  6E1A               	movwf	___lwmod@divisor,c
  2707  000D24  EC1D  F009         	call	___lwmod	;wreg free
  2708  000D28  5018               	movf	?___lwmod,w,c
  2709  000D2A  0F30               	addlw	48
  2710  000D2C  6E31               	movwf	printf@c,c
  2711                           
  2712                           ;doprnt.c: 1523: }
  2713                           ;doprnt.c: 1524: (putch(c) );
  2714  000D2E  5031               	movf	printf@c,w,c
  2715  000D30  ECC6  F009         	call	_putch
  2716  000D34                     l2712:
  2717  000D34  062B               	decf	printf@prec,f,c
  2718  000D36  282B               	incf	printf@prec,w,c
  2719  000D38  A4D8               	btfss	status,2,c
  2720  000D3A  D7D8               	goto	l2708
  2721  000D3C                     l2714:
  2722  000D3C  C01D  FFF6         	movff	printf@f,tblptrl
  2723  000D40  C01E  FFF7         	movff	printf@f+1,tblptrh
  2724  000D44  4A1D               	infsnz	printf@f,f,c
  2725  000D46  2A1E               	incf	printf@f+1,f,c
  2726  000D48                     	if	0	;tblptru may be non-zero
  2727  000D48                     	endif
  2728  000D48                     	if	0	;tblptru may be non-zero
  2729  000D48                     	endif
  2730  000D48  0008               	tblrd		*
  2731  000D4A  CFF5 F031          	movff	tablat,printf@c
  2732  000D4E  5031               	movf	printf@c,w,c
  2733  000D50  B4D8               	btfsc	status,2,c
  2734  000D52  0012               	return	
  2735  000D54  D6E2               	goto	l2620
  2736  000D56                     __end_of_printf:
  2737                           	opt stack 0
  2738                           tblptru	equ	0xFF8
  2739                           tblptrh	equ	0xFF7
  2740                           tblptrl	equ	0xFF6
  2741                           tablat	equ	0xFF5
  2742                           prodh	equ	0xFF4
  2743                           prodl	equ	0xFF3
  2744                           postinc0	equ	0xFEE
  2745                           wreg	equ	0xFE8
  2746                           postinc1	equ	0xFE6
  2747                           postdec1	equ	0xFE5
  2748                           fsr1h	equ	0xFE2
  2749                           fsr1l	equ	0xFE1
  2750                           postinc2	equ	0xFDE
  2751                           postdec2	equ	0xFDD
  2752                           fsr2h	equ	0xFDA
  2753                           fsr2l	equ	0xFD9
  2754                           status	equ	0xFD8
  2755                           
  2756 ;; *************** function _putch *****************
  2757 ;; Defined at:
  2758 ;;		line 24 in file "wixel.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;  data            1    wreg     unsigned char 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  data            1   16[COMRAM] unsigned char 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      void 
  2765 ;; Registers used:
  2766 ;;		wreg
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2772 ;;      Params:         0       0       0       0       0       0       0       0       0
  2773 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2774 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2775 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2776 ;;Total ram usage:        1 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    1
  2779 ;; This function calls:
  2780 ;;		Nothing
  2781 ;; This function is called by:
  2782 ;;		_printf
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text7
  2787  00138C                     __ptext7:
  2788                           	opt stack 0
  2789  00138C                     _putch:
  2790                           	opt stack 28
  2791                           
  2792                           ;incstack = 0
  2793                           ;putch@data stored from wreg
  2794  00138C  6E11               	movwf	putch@data,c
  2795  00138E                     l315:
  2796  00138E  A89E               	btfss	3998,4,c	;volatile
  2797  001390  D7FE               	goto	l315
  2798                           
  2799                           ;wixel.c: 27: TXREG = data;
  2800  001392  C011  FFAD         	movff	putch@data,4013	;volatile
  2801  001396  0012               	return		;funcret
  2802  001398                     __end_of_putch:
  2803                           	opt stack 0
  2804                           tblptru	equ	0xFF8
  2805                           tblptrh	equ	0xFF7
  2806                           tblptrl	equ	0xFF6
  2807                           tablat	equ	0xFF5
  2808                           prodh	equ	0xFF4
  2809                           prodl	equ	0xFF3
  2810                           postinc0	equ	0xFEE
  2811                           wreg	equ	0xFE8
  2812                           postinc1	equ	0xFE6
  2813                           postdec1	equ	0xFE5
  2814                           fsr1h	equ	0xFE2
  2815                           fsr1l	equ	0xFE1
  2816                           postinc2	equ	0xFDE
  2817                           postdec2	equ	0xFDD
  2818                           fsr2h	equ	0xFDA
  2819                           fsr2l	equ	0xFD9
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _isdigit *****************
  2823 ;; Defined at:
  2824 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/isdigit.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  c               1    wreg     unsigned char 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  c               1   18[COMRAM] unsigned char 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;		None               void
  2831 ;; Registers used:
  2832 ;;		wreg, status,2, status,0
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2838 ;;      Params:         0       0       0       0       0       0       0       0       0
  2839 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2840 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2841 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2842 ;;Total ram usage:        3 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    1
  2845 ;; This function calls:
  2846 ;;		Nothing
  2847 ;; This function is called by:
  2848 ;;		_printf
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           	psect	text8
  2853  00135C                     __ptext8:
  2854                           	opt stack 0
  2855  00135C                     _isdigit:
  2856                           	opt stack 28
  2857                           
  2858                           ;incstack = 0
  2859                           ;isdigit@c stored from wreg
  2860  00135C  6E13               	movwf	isdigit@c,c
  2861  00135E  0E00               	movlw	0
  2862  001360  6E12               	movwf	_isdigit$1917,c
  2863  001362  0E3A               	movlw	58
  2864  001364  6013               	cpfslt	isdigit@c,c
  2865  001366  D005               	goto	l2432
  2866  001368  0E2F               	movlw	47
  2867  00136A  6413               	cpfsgt	isdigit@c,c
  2868  00136C  D002               	goto	l2432
  2869  00136E  0E01               	movlw	1
  2870  001370  6E12               	movwf	_isdigit$1917,c
  2871  001372                     l2432:
  2872  001372  C012  F011         	movff	_isdigit$1917,??_isdigit
  2873  001376  3011               	rrcf	??_isdigit,w,c
  2874  001378  0012               	return	
  2875  00137A                     __end_of_isdigit:
  2876                           	opt stack 0
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           prodh	equ	0xFF4
  2882                           prodl	equ	0xFF3
  2883                           postinc0	equ	0xFEE
  2884                           wreg	equ	0xFE8
  2885                           postinc1	equ	0xFE6
  2886                           postdec1	equ	0xFE5
  2887                           fsr1h	equ	0xFE2
  2888                           fsr1l	equ	0xFE1
  2889                           postinc2	equ	0xFDE
  2890                           postdec2	equ	0xFDD
  2891                           fsr2h	equ	0xFDA
  2892                           fsr2l	equ	0xFD9
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function ___lwmod *****************
  2896 ;; Defined at:
  2897 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwmod.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  dividend        2   23[COMRAM] unsigned int 
  2900 ;;  divisor         2   25[COMRAM] unsigned int 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  counter         1   27[COMRAM] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  2   23[COMRAM] unsigned int 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2912 ;;      Params:         4       0       0       0       0       0       0       0       0
  2913 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2915 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2916 ;;Total ram usage:        5 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    1
  2919 ;; This function calls:
  2920 ;;		Nothing
  2921 ;; This function is called by:
  2922 ;;		_printf
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text9
  2927  00123A                     __ptext9:
  2928                           	opt stack 0
  2929  00123A                     ___lwmod:
  2930                           	opt stack 28
  2931                           
  2932                           ;incstack = 0
  2933  00123A  501A               	movf	___lwmod@divisor,w,c
  2934  00123C  101B               	iorwf	___lwmod@divisor+1,w,c
  2935  00123E  B4D8               	btfsc	status,2,c
  2936  001240  D018               	goto	l789
  2937  001242  0E01               	movlw	1
  2938  001244  6E1C               	movwf	___lwmod@counter,c
  2939  001246  D004               	goto	l2568
  2940  001248                     l2566:
  2941  001248  90D8               	bcf	status,0,c
  2942  00124A  361A               	rlcf	___lwmod@divisor,f,c
  2943  00124C  361B               	rlcf	___lwmod@divisor+1,f,c
  2944  00124E  2A1C               	incf	___lwmod@counter,f,c
  2945  001250                     l2568:
  2946  001250  AE1B               	btfss	___lwmod@divisor+1,7,c
  2947  001252  D7FA               	goto	l2566
  2948  001254                     l2570:
  2949  001254  501A               	movf	___lwmod@divisor,w,c
  2950  001256  5C18               	subwf	___lwmod@dividend,w,c
  2951  001258  501B               	movf	___lwmod@divisor+1,w,c
  2952  00125A  5819               	subwfb	___lwmod@dividend+1,w,c
  2953  00125C  A0D8               	btfss	status,0,c
  2954  00125E  D004               	goto	l2574
  2955  001260  501A               	movf	___lwmod@divisor,w,c
  2956  001262  5E18               	subwf	___lwmod@dividend,f,c
  2957  001264  501B               	movf	___lwmod@divisor+1,w,c
  2958  001266  5A19               	subwfb	___lwmod@dividend+1,f,c
  2959  001268                     l2574:
  2960  001268  90D8               	bcf	status,0,c
  2961  00126A  321B               	rrcf	___lwmod@divisor+1,f,c
  2962  00126C  321A               	rrcf	___lwmod@divisor,f,c
  2963  00126E  2E1C               	decfsz	___lwmod@counter,f,c
  2964  001270  D7F1               	goto	l2570
  2965  001272                     l789:
  2966  001272  C018  F018         	movff	___lwmod@dividend,?___lwmod
  2967  001276  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  2968  00127A  0012               	return		;funcret
  2969  00127C                     __end_of___lwmod:
  2970                           	opt stack 0
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           tblptrl	equ	0xFF6
  2974                           tablat	equ	0xFF5
  2975                           prodh	equ	0xFF4
  2976                           prodl	equ	0xFF3
  2977                           postinc0	equ	0xFEE
  2978                           wreg	equ	0xFE8
  2979                           postinc1	equ	0xFE6
  2980                           postdec1	equ	0xFE5
  2981                           fsr1h	equ	0xFE2
  2982                           fsr1l	equ	0xFE1
  2983                           postinc2	equ	0xFDE
  2984                           postdec2	equ	0xFDD
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989 ;; *************** function ___lwdiv *****************
  2990 ;; Defined at:
  2991 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwdiv.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  dividend        2   16[COMRAM] unsigned int 
  2994 ;;  divisor         2   18[COMRAM] unsigned int 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  quotient        2   21[COMRAM] unsigned int 
  2997 ;;  counter         1   20[COMRAM] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  2   16[COMRAM] unsigned int 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3007 ;;      Params:         4       0       0       0       0       0       0       0       0
  3008 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3010 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3011 ;;Total ram usage:        7 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    1
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_printf
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text10
  3022  001150                     __ptext10:
  3023                           	opt stack 0
  3024  001150                     ___lwdiv:
  3025                           	opt stack 28
  3026                           
  3027                           ;incstack = 0
  3028  001150  0E00               	movlw	0
  3029  001152  6E17               	movwf	___lwdiv@quotient+1,c
  3030  001154  0E00               	movlw	0
  3031  001156  6E16               	movwf	___lwdiv@quotient,c
  3032  001158  5013               	movf	___lwdiv@divisor,w,c
  3033  00115A  1014               	iorwf	___lwdiv@divisor+1,w,c
  3034  00115C  B4D8               	btfsc	status,2,c
  3035  00115E  D01C               	goto	l779
  3036  001160  0E01               	movlw	1
  3037  001162  6E15               	movwf	___lwdiv@counter,c
  3038  001164  D004               	goto	l2548
  3039  001166                     l2546:
  3040  001166  90D8               	bcf	status,0,c
  3041  001168  3613               	rlcf	___lwdiv@divisor,f,c
  3042  00116A  3614               	rlcf	___lwdiv@divisor+1,f,c
  3043  00116C  2A15               	incf	___lwdiv@counter,f,c
  3044  00116E                     l2548:
  3045  00116E  AE14               	btfss	___lwdiv@divisor+1,7,c
  3046  001170  D7FA               	goto	l2546
  3047  001172                     l2550:
  3048  001172  90D8               	bcf	status,0,c
  3049  001174  3616               	rlcf	___lwdiv@quotient,f,c
  3050  001176  3617               	rlcf	___lwdiv@quotient+1,f,c
  3051  001178  5013               	movf	___lwdiv@divisor,w,c
  3052  00117A  5C11               	subwf	___lwdiv@dividend,w,c
  3053  00117C  5014               	movf	___lwdiv@divisor+1,w,c
  3054  00117E  5812               	subwfb	___lwdiv@dividend+1,w,c
  3055  001180  A0D8               	btfss	status,0,c
  3056  001182  D005               	goto	l2558
  3057  001184  5013               	movf	___lwdiv@divisor,w,c
  3058  001186  5E11               	subwf	___lwdiv@dividend,f,c
  3059  001188  5014               	movf	___lwdiv@divisor+1,w,c
  3060  00118A  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3061  00118C  8016               	bsf	___lwdiv@quotient,0,c
  3062  00118E                     l2558:
  3063  00118E  90D8               	bcf	status,0,c
  3064  001190  3214               	rrcf	___lwdiv@divisor+1,f,c
  3065  001192  3213               	rrcf	___lwdiv@divisor,f,c
  3066  001194  2E15               	decfsz	___lwdiv@counter,f,c
  3067  001196  D7ED               	goto	l2550
  3068  001198                     l779:
  3069  001198  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3070  00119C  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3071  0011A0  0012               	return		;funcret
  3072  0011A2                     __end_of___lwdiv:
  3073                           	opt stack 0
  3074                           tblptru	equ	0xFF8
  3075                           tblptrh	equ	0xFF7
  3076                           tblptrl	equ	0xFF6
  3077                           tablat	equ	0xFF5
  3078                           prodh	equ	0xFF4
  3079                           prodl	equ	0xFF3
  3080                           postinc0	equ	0xFEE
  3081                           wreg	equ	0xFE8
  3082                           postinc1	equ	0xFE6
  3083                           postdec1	equ	0xFE5
  3084                           fsr1h	equ	0xFE2
  3085                           fsr1l	equ	0xFE1
  3086                           postinc2	equ	0xFDE
  3087                           postdec2	equ	0xFDD
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _line_cal *****************
  3093 ;; Defined at:
  3094 ;;		line 56 in file "analog.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  value           4   16[BANK0 ] long 
  3099 ;;  b               4    8[BANK0 ] long 
  3100 ;;  a               4    4[BANK0 ] long 
  3101 ;;  j               2   22[BANK0 ] int 
  3102 ;;  i               2   20[BANK0 ] int 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  2   36[None  ] int 
  3105 ;; Registers used:
  3106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3112 ;;      Params:         0       0       0       0       0       0       0       0       0
  3113 ;;      Locals:         0      24       0       0       0       0       0       0       0
  3114 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3115 ;;      Totals:         5      24       0       0       0       0       0       0       0
  3116 ;;Total ram usage:       29 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    2
  3119 ;; This function calls:
  3120 ;;		___aldiv
  3121 ;;		___awdiv
  3122 ;;		___lmul
  3123 ;;		___wmul
  3124 ;; This function is called by:
  3125 ;;		_main
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	text11
  3130  0004B4                     __ptext11:
  3131                           	opt stack 0
  3132  0004B4                     _line_cal:
  3133                           	opt stack 28
  3134                           
  3135                           ;analog.c: 57: ll a = 0;
  3136                           
  3137                           ;incstack = 0
  3138  0004B4  0E00               	movlw	0
  3139  0004B6  0100               	movlb	0	; () banked
  3140  0004B8  6FBA               	movwf	line_cal@a& (0+255),b
  3141  0004BA  0E00               	movlw	0
  3142  0004BC  6FBB               	movwf	(line_cal@a+1)& (0+255),b
  3143  0004BE  0E00               	movlw	0
  3144  0004C0  6FBC               	movwf	(line_cal@a+2)& (0+255),b
  3145  0004C2  0E00               	movlw	0
  3146  0004C4  6FBD               	movwf	(line_cal@a+3)& (0+255),b
  3147                           
  3148                           ;analog.c: 58: ll b = 0;
  3149  0004C6  0E00               	movlw	0
  3150  0004C8  0100               	movlb	0	; () banked
  3151  0004CA  6FBE               	movwf	line_cal@b& (0+255),b
  3152  0004CC  0E00               	movlw	0
  3153  0004CE  6FBF               	movwf	(line_cal@b+1)& (0+255),b
  3154  0004D0  0E00               	movlw	0
  3155  0004D2  6FC0               	movwf	(line_cal@b+2)& (0+255),b
  3156  0004D4  0E00               	movlw	0
  3157  0004D6  6FC1               	movwf	(line_cal@b+3)& (0+255),b
  3158                           
  3159                           ;analog.c: 60: int i , j;
  3160                           ;analog.c: 61: ll value;
  3161                           ;analog.c: 63: for (i = 0;i < 5;i++){
  3162  0004D8  0E00               	movlw	0
  3163  0004DA  0100               	movlb	0	; () banked
  3164  0004DC  6FCB               	movwf	(line_cal@i+1)& (0+255),b
  3165  0004DE  0E00               	movlw	0
  3166  0004E0  6FCA               	movwf	line_cal@i& (0+255),b
  3167                           
  3168                           ; BSR set to: 0
  3169  0004E2  0100               	movlb	0	; () banked
  3170  0004E4  BFCB               	btfsc	(line_cal@i+1)& (0+255),7,b
  3171  0004E6  D00A               	goto	l2846
  3172  0004E8  0100               	movlb	0	; () banked
  3173  0004EA  51CB               	movf	(line_cal@i+1)& (0+255),w,b
  3174  0004EC  E106               	bnz	u2600
  3175  0004EE  0E05               	movlw	5
  3176  0004F0  0100               	movlb	0	; () banked
  3177  0004F2  5DCA               	subwf	line_cal@i& (0+255),w,b
  3178  0004F4  B0D8               	btfsc	status,0,c
  3179  0004F6  D16D               	goto	l2878
  3180  0004F8  D001               	goto	l2846
  3181  0004FA                     u2600:
  3182                           
  3183                           ; BSR set to: 0
  3184  0004FA  D16B               	goto	l2878
  3185  0004FC                     l2846:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;analog.c: 65: j = ls[i];
  3189  0004FC  90D8               	bcf	status,0,c
  3190  0004FE  0100               	movlb	0	; () banked
  3191  000500  35CA               	rlcf	line_cal@i& (0+255),w,b
  3192  000502  6ED9               	movwf	fsr2l,c
  3193  000504  0100               	movlb	0	; () banked
  3194  000506  35CB               	rlcf	(line_cal@i+1)& (0+255),w,b
  3195  000508  6EDA               	movwf	fsr2h,c
  3196  00050A  0E36               	movlw	low _ls
  3197  00050C  26D9               	addwf	fsr2l,f,c
  3198  00050E  0E00               	movlw	high _ls
  3199  000510  22DA               	addwfc	fsr2h,f,c
  3200  000512  CFDE F0CC          	movff	postinc2,line_cal@j
  3201  000516  CFDD F0CD          	movff	postdec2,line_cal@j+1
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;analog.c: 66: an[j] = an[j]>mins[j]?an[j]:mins[j];
  3205  00051A  90D8               	bcf	status,0,c
  3206  00051C  0100               	movlb	0	; () banked
  3207  00051E  35CC               	rlcf	line_cal@j& (0+255),w,b
  3208  000520  6ED9               	movwf	fsr2l,c
  3209  000522  0100               	movlb	0	; () banked
  3210  000524  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3211  000526  6EDA               	movwf	fsr2h,c
  3212  000528  0E88               	movlw	low _an
  3213  00052A  26D9               	addwf	fsr2l,f,c
  3214  00052C  0E00               	movlw	high _an
  3215  00052E  22DA               	addwfc	fsr2h,f,c
  3216  000530  90D8               	bcf	status,0,c
  3217  000532  0100               	movlb	0	; () banked
  3218  000534  35CC               	rlcf	line_cal@j& (0+255),w,b
  3219  000536  6EE1               	movwf	fsr1l,c
  3220  000538  0100               	movlb	0	; () banked
  3221  00053A  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3222  00053C  6EE2               	movwf	fsr1h,c
  3223  00053E  0EA8               	movlw	low _mins
  3224  000540  26E1               	addwf	fsr1l,f,c
  3225  000542  0E00               	movlw	high _mins
  3226  000544  22E2               	addwfc	fsr1h,f,c
  3227  000546  50DE               	movf	postinc2,w,c
  3228  000548  5CE6               	subwf	postinc1,w,c
  3229  00054A  50E6               	movf	postinc1,w,c
  3230  00054C  0A80               	xorlw	128
  3231  00054E  6E23               	movwf	(??_line_cal+4)& (0+255),c
  3232  000550  50DE               	movf	postinc2,w,c
  3233  000552  0A80               	xorlw	128
  3234  000554  5823               	subwfb	(??_line_cal+4)& (0+255),w,c
  3235  000556  A0D8               	btfss	status,0,c
  3236  000558  D00D               	goto	l2852
  3237                           
  3238                           ; BSR set to: 0
  3239  00055A  C0CC  F01F         	movff	line_cal@j,??_line_cal
  3240  00055E  C0CD  F020         	movff	line_cal@j+1,??_line_cal+1
  3241  000562  90D8               	bcf	status,0,c
  3242  000564  361F               	rlcf	??_line_cal,f,c
  3243  000566  3620               	rlcf	??_line_cal+1,f,c
  3244  000568  0EA8               	movlw	low _mins
  3245  00056A  241F               	addwf	??_line_cal,w,c
  3246  00056C  0100               	movlb	0	; () banked
  3247  00056E  6FC2               	movwf	_line_cal$505& (0+255),b
  3248  000570  0E00               	movlw	high _mins
  3249  000572  D00C               	goto	L9
  3250  000574                     l2852:
  3251                           
  3252                           ; BSR set to: 0
  3253  000574  C0CC  F01F         	movff	line_cal@j,??_line_cal
  3254  000578  C0CD  F020         	movff	line_cal@j+1,??_line_cal+1
  3255  00057C  90D8               	bcf	status,0,c
  3256  00057E  361F               	rlcf	??_line_cal,f,c
  3257  000580  3620               	rlcf	??_line_cal+1,f,c
  3258  000582  0E88               	movlw	low _an
  3259  000584  241F               	addwf	??_line_cal,w,c
  3260  000586  0100               	movlb	0	; () banked
  3261  000588  6FC2               	movwf	_line_cal$505& (0+255),b
  3262  00058A  0E00               	movlw	high _an
  3263  00058C                     L9:
  3264  00058C  2020               	addwfc	??_line_cal+1,w,c
  3265  00058E  0100               	movlb	0	; () banked
  3266  000590  6FC3               	movwf	(_line_cal$505+1)& (0+255),b
  3267                           
  3268                           ; BSR set to: 0
  3269                           
  3270                           ; BSR set to: 0
  3271  000592  C0C2  FFD9         	movff	_line_cal$505,fsr2l
  3272  000596  C0C3  FFDA         	movff	_line_cal$505+1,fsr2h
  3273  00059A  90D8               	bcf	status,0,c
  3274  00059C  0100               	movlb	0	; () banked
  3275  00059E  35CC               	rlcf	line_cal@j& (0+255),w,b
  3276  0005A0  6EE1               	movwf	fsr1l,c
  3277  0005A2  0100               	movlb	0	; () banked
  3278  0005A4  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3279  0005A6  6EE2               	movwf	fsr1h,c
  3280  0005A8  0E88               	movlw	low _an
  3281  0005AA  26E1               	addwf	fsr1l,f,c
  3282  0005AC  0E00               	movlw	high _an
  3283  0005AE  22E2               	addwfc	fsr1h,f,c
  3284  0005B0  CFDE FFE6          	movff	postinc2,postinc1
  3285  0005B4  CFDD FFE5          	movff	postdec2,postdec1
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;analog.c: 67: an[j] = an[j]<maxs[j]?an[j]:maxs[j];
  3289  0005B8  90D8               	bcf	status,0,c
  3290  0005BA  0100               	movlb	0	; () banked
  3291  0005BC  35CC               	rlcf	line_cal@j& (0+255),w,b
  3292  0005BE  6ED9               	movwf	fsr2l,c
  3293  0005C0  0100               	movlb	0	; () banked
  3294  0005C2  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3295  0005C4  6EDA               	movwf	fsr2h,c
  3296  0005C6  0E9A               	movlw	low _maxs
  3297  0005C8  26D9               	addwf	fsr2l,f,c
  3298  0005CA  0E00               	movlw	high _maxs
  3299  0005CC  22DA               	addwfc	fsr2h,f,c
  3300  0005CE  90D8               	bcf	status,0,c
  3301  0005D0  0100               	movlb	0	; () banked
  3302  0005D2  35CC               	rlcf	line_cal@j& (0+255),w,b
  3303  0005D4  6EE1               	movwf	fsr1l,c
  3304  0005D6  0100               	movlb	0	; () banked
  3305  0005D8  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3306  0005DA  6EE2               	movwf	fsr1h,c
  3307  0005DC  0E88               	movlw	low _an
  3308  0005DE  26E1               	addwf	fsr1l,f,c
  3309  0005E0  0E00               	movlw	high _an
  3310  0005E2  22E2               	addwfc	fsr1h,f,c
  3311  0005E4  50DE               	movf	postinc2,w,c
  3312  0005E6  5CE6               	subwf	postinc1,w,c
  3313  0005E8  50E6               	movf	postinc1,w,c
  3314  0005EA  0A80               	xorlw	128
  3315  0005EC  6E23               	movwf	(??_line_cal+4)& (0+255),c
  3316  0005EE  50DE               	movf	postinc2,w,c
  3317  0005F0  0A80               	xorlw	128
  3318  0005F2  5823               	subwfb	(??_line_cal+4)& (0+255),w,c
  3319  0005F4  A0D8               	btfss	status,0,c
  3320  0005F6  D00D               	goto	l2860
  3321                           
  3322                           ; BSR set to: 0
  3323  0005F8  C0CC  F01F         	movff	line_cal@j,??_line_cal
  3324  0005FC  C0CD  F020         	movff	line_cal@j+1,??_line_cal+1
  3325  000600  90D8               	bcf	status,0,c
  3326  000602  361F               	rlcf	??_line_cal,f,c
  3327  000604  3620               	rlcf	??_line_cal+1,f,c
  3328  000606  0E9A               	movlw	low _maxs
  3329  000608  241F               	addwf	??_line_cal,w,c
  3330  00060A  0100               	movlb	0	; () banked
  3331  00060C  6FC4               	movwf	_line_cal$507& (0+255),b
  3332  00060E  0E00               	movlw	high _maxs
  3333  000610  D00C               	goto	L10
  3334  000612                     l2860:
  3335                           
  3336                           ; BSR set to: 0
  3337  000612  C0CC  F01F         	movff	line_cal@j,??_line_cal
  3338  000616  C0CD  F020         	movff	line_cal@j+1,??_line_cal+1
  3339  00061A  90D8               	bcf	status,0,c
  3340  00061C  361F               	rlcf	??_line_cal,f,c
  3341  00061E  3620               	rlcf	??_line_cal+1,f,c
  3342  000620  0E88               	movlw	low _an
  3343  000622  241F               	addwf	??_line_cal,w,c
  3344  000624  0100               	movlb	0	; () banked
  3345  000626  6FC4               	movwf	_line_cal$507& (0+255),b
  3346  000628  0E00               	movlw	high _an
  3347  00062A                     L10:
  3348  00062A  2020               	addwfc	??_line_cal+1,w,c
  3349  00062C  0100               	movlb	0	; () banked
  3350  00062E  6FC5               	movwf	(_line_cal$507+1)& (0+255),b
  3351                           
  3352                           ; BSR set to: 0
  3353                           
  3354                           ; BSR set to: 0
  3355  000630  C0C4  FFD9         	movff	_line_cal$507,fsr2l
  3356  000634  C0C5  FFDA         	movff	_line_cal$507+1,fsr2h
  3357  000638  90D8               	bcf	status,0,c
  3358  00063A  0100               	movlb	0	; () banked
  3359  00063C  35CC               	rlcf	line_cal@j& (0+255),w,b
  3360  00063E  6EE1               	movwf	fsr1l,c
  3361  000640  0100               	movlb	0	; () banked
  3362  000642  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3363  000644  6EE2               	movwf	fsr1h,c
  3364  000646  0E88               	movlw	low _an
  3365  000648  26E1               	addwf	fsr1l,f,c
  3366  00064A  0E00               	movlw	high _an
  3367  00064C  22E2               	addwfc	fsr1h,f,c
  3368  00064E  CFDE FFE6          	movff	postinc2,postinc1
  3369  000652  CFDD FFE5          	movff	postdec2,postdec1
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;analog.c: 69: an[j] -= mins[j];
  3373  000656  90D8               	bcf	status,0,c
  3374  000658  0100               	movlb	0	; () banked
  3375  00065A  35CC               	rlcf	line_cal@j& (0+255),w,b
  3376  00065C  6ED9               	movwf	fsr2l,c
  3377  00065E  0100               	movlb	0	; () banked
  3378  000660  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3379  000662  6EDA               	movwf	fsr2h,c
  3380  000664  0EA8               	movlw	low _mins
  3381  000666  26D9               	addwf	fsr2l,f,c
  3382  000668  0E00               	movlw	high _mins
  3383  00066A  22DA               	addwfc	fsr2h,f,c
  3384  00066C  CFDE F01F          	movff	postinc2,??_line_cal
  3385  000670  CFDD F020          	movff	postdec2,??_line_cal+1
  3386  000674  90D8               	bcf	status,0,c
  3387  000676  0100               	movlb	0	; () banked
  3388  000678  35CC               	rlcf	line_cal@j& (0+255),w,b
  3389  00067A  6ED9               	movwf	fsr2l,c
  3390  00067C  0100               	movlb	0	; () banked
  3391  00067E  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3392  000680  6EDA               	movwf	fsr2h,c
  3393  000682  0E88               	movlw	low _an
  3394  000684  26D9               	addwf	fsr2l,f,c
  3395  000686  0E00               	movlw	high _an
  3396  000688  22DA               	addwfc	fsr2h,f,c
  3397  00068A  501F               	movf	??_line_cal,w,c
  3398  00068C  5EDE               	subwf	postinc2,f,c
  3399  00068E  5020               	movf	??_line_cal+1,w,c
  3400  000690  5ADD               	subwfb	postdec2,f,c
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;analog.c: 72: value = an[j] * 100 / (maxs[j] - mins[j]);
  3404  000692  90D8               	bcf	status,0,c
  3405  000694  0100               	movlb	0	; () banked
  3406  000696  35CC               	rlcf	line_cal@j& (0+255),w,b
  3407  000698  6ED9               	movwf	fsr2l,c
  3408  00069A  0100               	movlb	0	; () banked
  3409  00069C  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3410  00069E  6EDA               	movwf	fsr2h,c
  3411  0006A0  0E88               	movlw	low _an
  3412  0006A2  26D9               	addwf	fsr2l,f,c
  3413  0006A4  0E00               	movlw	high _an
  3414  0006A6  22DA               	addwfc	fsr2h,f,c
  3415  0006A8  CFDE F011          	movff	postinc2,___wmul@multiplier
  3416  0006AC  CFDD F012          	movff	postdec2,___wmul@multiplier+1
  3417  0006B0  0E00               	movlw	0
  3418  0006B2  6E14               	movwf	___wmul@multiplicand+1,c
  3419  0006B4  0E64               	movlw	100
  3420  0006B6  6E13               	movwf	___wmul@multiplicand,c
  3421  0006B8  EC89  F009         	call	___wmul	;wreg free
  3422  0006BC  C011  F017         	movff	?___wmul,___awdiv@dividend
  3423  0006C0  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  3424  0006C4  90D8               	bcf	status,0,c
  3425  0006C6  0100               	movlb	0	; () banked
  3426  0006C8  35CC               	rlcf	line_cal@j& (0+255),w,b
  3427  0006CA  6ED9               	movwf	fsr2l,c
  3428  0006CC  0100               	movlb	0	; () banked
  3429  0006CE  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3430  0006D0  6EDA               	movwf	fsr2h,c
  3431  0006D2  0E9A               	movlw	low _maxs
  3432  0006D4  26D9               	addwf	fsr2l,f,c
  3433  0006D6  0E00               	movlw	high _maxs
  3434  0006D8  22DA               	addwfc	fsr2h,f,c
  3435  0006DA  CFDE F01F          	movff	postinc2,??_line_cal
  3436  0006DE  CFDD F020          	movff	postdec2,??_line_cal+1
  3437  0006E2  90D8               	bcf	status,0,c
  3438  0006E4  0100               	movlb	0	; () banked
  3439  0006E6  35CC               	rlcf	line_cal@j& (0+255),w,b
  3440  0006E8  6ED9               	movwf	fsr2l,c
  3441  0006EA  0100               	movlb	0	; () banked
  3442  0006EC  35CD               	rlcf	(line_cal@j+1)& (0+255),w,b
  3443  0006EE  6EDA               	movwf	fsr2h,c
  3444  0006F0  0EA8               	movlw	low _mins
  3445  0006F2  26D9               	addwf	fsr2l,f,c
  3446  0006F4  0E00               	movlw	high _mins
  3447  0006F6  22DA               	addwfc	fsr2h,f,c
  3448  0006F8  CFDE F021          	movff	postinc2,??_line_cal+2
  3449  0006FC  CFDD F022          	movff	postdec2,??_line_cal+3
  3450  000700  1E21               	comf	??_line_cal+2,f,c
  3451  000702  1E22               	comf	??_line_cal+3,f,c
  3452  000704  4A21               	infsnz	??_line_cal+2,f,c
  3453  000706  2A22               	incf	??_line_cal+3,f,c
  3454  000708  501F               	movf	??_line_cal,w,c
  3455  00070A  2421               	addwf	??_line_cal+2,w,c
  3456  00070C  6E19               	movwf	___awdiv@divisor,c
  3457  00070E  5020               	movf	??_line_cal+1,w,c
  3458  000710  2022               	addwfc	??_line_cal+3,w,c
  3459  000712  6E1A               	movwf	___awdiv@divisor+1,c
  3460  000714  ECCD  F007         	call	___awdiv	;wreg free
  3461  000718  C017  F0C6         	movff	?___awdiv,line_cal@value
  3462  00071C  C018  F0C7         	movff	?___awdiv+1,line_cal@value+1
  3463  000720  0100               	movlb	0	; () banked
  3464  000722  0E00               	movlw	0
  3465  000724  BFC7               	btfsc	(line_cal@value+1)& (0+255),7,b
  3466  000726  0EFF               	movlw	-1
  3467  000728  6FC8               	movwf	(line_cal@value+2)& (0+255),b
  3468  00072A  6FC9               	movwf	(line_cal@value+3)& (0+255),b
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;analog.c: 73: a += value;
  3472  00072C  0100               	movlb	0	; () banked
  3473  00072E  51C6               	movf	line_cal@value& (0+255),w,b
  3474  000730  0100               	movlb	0	; () banked
  3475  000732  27BA               	addwf	line_cal@a& (0+255),f,b
  3476  000734  0100               	movlb	0	; () banked
  3477  000736  51C7               	movf	(line_cal@value+1)& (0+255),w,b
  3478  000738  0100               	movlb	0	; () banked
  3479  00073A  23BB               	addwfc	(line_cal@a+1)& (0+255),f,b
  3480  00073C  0100               	movlb	0	; () banked
  3481  00073E  51C8               	movf	(line_cal@value+2)& (0+255),w,b
  3482  000740  0100               	movlb	0	; () banked
  3483  000742  23BC               	addwfc	(line_cal@a+2)& (0+255),f,b
  3484  000744  0100               	movlb	0	; () banked
  3485  000746  51C9               	movf	(line_cal@value+3)& (0+255),w,b
  3486  000748  0100               	movlb	0	; () banked
  3487  00074A  23BD               	addwfc	(line_cal@a+3)& (0+255),f,b
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;analog.c: 74: b += value * i * 100;
  3491  00074C  C0CA  F011         	movff	line_cal@i,___lmul@multiplier
  3492  000750  C0CB  F012         	movff	line_cal@i+1,___lmul@multiplier+1
  3493  000754  0E00               	movlw	0
  3494  000756  BE12               	btfsc	___lmul@multiplier+1,7,c
  3495  000758  0EFF               	movlw	-1
  3496  00075A  6E13               	movwf	___lmul@multiplier+2,c
  3497  00075C  6E14               	movwf	___lmul@multiplier+3,c
  3498  00075E  C0C6  F015         	movff	line_cal@value,___lmul@multiplicand
  3499  000762  C0C7  F016         	movff	line_cal@value+1,___lmul@multiplicand+1
  3500  000766  C0C8  F017         	movff	line_cal@value+2,___lmul@multiplicand+2
  3501  00076A  C0C9  F018         	movff	line_cal@value+3,___lmul@multiplicand+3
  3502  00076E  EC7D  F008         	call	___lmul	;wreg free
  3503  000772  C011  F0B6         	movff	?___lmul,_line_cal$2242
  3504  000776  C012  F0B7         	movff	?___lmul+1,_line_cal$2242+1
  3505  00077A  C013  F0B8         	movff	?___lmul+2,_line_cal$2242+2
  3506  00077E  C014  F0B9         	movff	?___lmul+3,_line_cal$2242+3
  3507                           
  3508                           ;analog.c: 74: b += value * i * 100;
  3509  000782  C0B6  F011         	movff	_line_cal$2242,___lmul@multiplier
  3510  000786  C0B7  F012         	movff	_line_cal$2242+1,___lmul@multiplier+1
  3511  00078A  C0B8  F013         	movff	_line_cal$2242+2,___lmul@multiplier+2
  3512  00078E  C0B9  F014         	movff	_line_cal$2242+3,___lmul@multiplier+3
  3513  000792  0E64               	movlw	100
  3514  000794  6E15               	movwf	___lmul@multiplicand,c
  3515  000796  0E00               	movlw	0
  3516  000798  6E16               	movwf	___lmul@multiplicand+1,c
  3517  00079A  0E00               	movlw	0
  3518  00079C  6E17               	movwf	___lmul@multiplicand+2,c
  3519  00079E  0E00               	movlw	0
  3520  0007A0  6E18               	movwf	___lmul@multiplicand+3,c
  3521  0007A2  EC7D  F008         	call	___lmul	;wreg free
  3522  0007A6  5011               	movf	?___lmul,w,c
  3523  0007A8  0100               	movlb	0	; () banked
  3524  0007AA  27BE               	addwf	line_cal@b& (0+255),f,b
  3525  0007AC  5012               	movf	?___lmul+1,w,c
  3526  0007AE  0100               	movlb	0	; () banked
  3527  0007B0  23BF               	addwfc	(line_cal@b+1)& (0+255),f,b
  3528  0007B2  5013               	movf	?___lmul+2,w,c
  3529  0007B4  0100               	movlb	0	; () banked
  3530  0007B6  23C0               	addwfc	(line_cal@b+2)& (0+255),f,b
  3531  0007B8  5014               	movf	?___lmul+3,w,c
  3532  0007BA  0100               	movlb	0	; () banked
  3533  0007BC  23C1               	addwfc	(line_cal@b+3)& (0+255),f,b
  3534                           
  3535                           ; BSR set to: 0
  3536  0007BE  0100               	movlb	0	; () banked
  3537  0007C0  4BCA               	infsnz	line_cal@i& (0+255),f,b
  3538  0007C2  2BCB               	incf	(line_cal@i+1)& (0+255),f,b
  3539                           
  3540                           ; BSR set to: 0
  3541  0007C4  0100               	movlb	0	; () banked
  3542  0007C6  BFCB               	btfsc	(line_cal@i+1)& (0+255),7,b
  3543  0007C8  D699               	goto	l2846
  3544  0007CA  0100               	movlb	0	; () banked
  3545  0007CC  51CB               	movf	(line_cal@i+1)& (0+255),w,b
  3546  0007CE  E101               	bnz	l2878
  3547  0007D0  D68E               	goto	L11
  3548  0007D2                     l2878:
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;analog.c: 75: }
  3552                           ;analog.c: 76: lp = a / b - 250;
  3553  0007D2  C0BA  F011         	movff	line_cal@a,___aldiv@dividend
  3554  0007D6  C0BB  F012         	movff	line_cal@a+1,___aldiv@dividend+1
  3555  0007DA  C0BC  F013         	movff	line_cal@a+2,___aldiv@dividend+2
  3556  0007DE  C0BD  F014         	movff	line_cal@a+3,___aldiv@dividend+3
  3557  0007E2  C0BE  F015         	movff	line_cal@b,___aldiv@divisor
  3558  0007E6  C0BF  F016         	movff	line_cal@b+1,___aldiv@divisor+1
  3559  0007EA  C0C0  F017         	movff	line_cal@b+2,___aldiv@divisor+2
  3560  0007EE  C0C1  F018         	movff	line_cal@b+3,___aldiv@divisor+3
  3561  0007F2  ECAB  F006         	call	___aldiv	;wreg free
  3562  0007F6  0E06               	movlw	6
  3563  0007F8  2411               	addwf	?___aldiv,w,c
  3564  0007FA  6E4C               	movwf	_lp,c
  3565  0007FC  0EFF               	movlw	255
  3566  0007FE  2012               	addwfc	?___aldiv+1,w,c
  3567  000800  6E4D               	movwf	_lp+1,c
  3568  000802  0012               	return		;funcret
  3569  000804                     __end_of_line_cal:
  3570                           	opt stack 0
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           prodh	equ	0xFF4
  3576                           prodl	equ	0xFF3
  3577                           postinc0	equ	0xFEE
  3578                           wreg	equ	0xFE8
  3579                           postinc1	equ	0xFE6
  3580                           postdec1	equ	0xFE5
  3581                           fsr1h	equ	0xFE2
  3582                           fsr1l	equ	0xFE1
  3583                           postinc2	equ	0xFDE
  3584                           postdec2	equ	0xFDD
  3585                           fsr2h	equ	0xFDA
  3586                           fsr2l	equ	0xFD9
  3587                           status	equ	0xFD8
  3588                           
  3589 ;; *************** function ___wmul *****************
  3590 ;; Defined at:
  3591 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  multiplier      2   16[COMRAM] unsigned int 
  3594 ;;  multiplicand    2   18[COMRAM] unsigned int 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  product         2   20[COMRAM] unsigned int 
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  2   16[COMRAM] unsigned int 
  3599 ;; Registers used:
  3600 ;;		wreg, status,2, status,0, prodl, prodh
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3606 ;;      Params:         4       0       0       0       0       0       0       0       0
  3607 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3609 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3610 ;;Total ram usage:        6 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    1
  3613 ;; This function calls:
  3614 ;;		Nothing
  3615 ;; This function is called by:
  3616 ;;		_line_cal
  3617 ;;		_printf
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text12
  3622  001312                     __ptext12:
  3623                           	opt stack 0
  3624  001312                     ___wmul:
  3625                           	opt stack 28
  3626                           
  3627                           ;incstack = 0
  3628  001312  5011               	movf	___wmul@multiplier,w,c
  3629  001314  0213               	mulwf	___wmul@multiplicand,c
  3630  001316  CFF3 F015          	movff	prodl,___wmul@product
  3631  00131A  CFF4 F016          	movff	prodh,___wmul@product+1
  3632  00131E  5011               	movf	___wmul@multiplier,w,c
  3633  001320  0214               	mulwf	___wmul@multiplicand+1,c
  3634  001322  50F3               	movf	prodl,w,c
  3635  001324  2616               	addwf	___wmul@product+1,f,c
  3636  001326  5012               	movf	___wmul@multiplier+1,w,c
  3637  001328  0213               	mulwf	___wmul@multiplicand,c
  3638  00132A  50F3               	movf	prodl,w,c
  3639  00132C  2616               	addwf	___wmul@product+1,f,c
  3640  00132E  C015  F011         	movff	___wmul@product,?___wmul
  3641  001332  C016  F012         	movff	___wmul@product+1,?___wmul+1
  3642  001336  0012               	return	
  3643  001338                     __end_of___wmul:
  3644                           	opt stack 0
  3645                           tblptru	equ	0xFF8
  3646                           tblptrh	equ	0xFF7
  3647                           tblptrl	equ	0xFF6
  3648                           tablat	equ	0xFF5
  3649                           prodh	equ	0xFF4
  3650                           prodl	equ	0xFF3
  3651                           postinc0	equ	0xFEE
  3652                           wreg	equ	0xFE8
  3653                           postinc1	equ	0xFE6
  3654                           postdec1	equ	0xFE5
  3655                           fsr1h	equ	0xFE2
  3656                           fsr1l	equ	0xFE1
  3657                           postinc2	equ	0xFDE
  3658                           postdec2	equ	0xFDD
  3659                           fsr2h	equ	0xFDA
  3660                           fsr2l	equ	0xFD9
  3661                           status	equ	0xFD8
  3662                           
  3663 ;; *************** function ___lmul *****************
  3664 ;; Defined at:
  3665 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul32.c"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;  multiplier      4   16[COMRAM] unsigned long 
  3668 ;;  multiplicand    4   20[COMRAM] unsigned long 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  product         4   24[COMRAM] unsigned long 
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  4   16[COMRAM] unsigned long 
  3673 ;; Registers used:
  3674 ;;		wreg, status,2, status,0
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3680 ;;      Params:         8       0       0       0       0       0       0       0       0
  3681 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3682 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3683 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3684 ;;Total ram usage:       12 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    1
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_line_cal
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text13
  3695  0010FA                     __ptext13:
  3696                           	opt stack 0
  3697  0010FA                     ___lmul:
  3698                           	opt stack 28
  3699                           
  3700                           ;incstack = 0
  3701  0010FA  0E00               	movlw	0
  3702  0010FC  6E19               	movwf	___lmul@product,c
  3703  0010FE  0E00               	movlw	0
  3704  001100  6E1A               	movwf	___lmul@product+1,c
  3705  001102  0E00               	movlw	0
  3706  001104  6E1B               	movwf	___lmul@product+2,c
  3707  001106  0E00               	movlw	0
  3708  001108  6E1C               	movwf	___lmul@product+3,c
  3709  00110A                     l2444:
  3710  00110A  A011               	btfss	___lmul@multiplier,0,c
  3711  00110C  D008               	goto	l2448
  3712  00110E  5015               	movf	___lmul@multiplicand,w,c
  3713  001110  2619               	addwf	___lmul@product,f,c
  3714  001112  5016               	movf	___lmul@multiplicand+1,w,c
  3715  001114  221A               	addwfc	___lmul@product+1,f,c
  3716  001116  5017               	movf	___lmul@multiplicand+2,w,c
  3717  001118  221B               	addwfc	___lmul@product+2,f,c
  3718  00111A  5018               	movf	___lmul@multiplicand+3,w,c
  3719  00111C  221C               	addwfc	___lmul@product+3,f,c
  3720  00111E                     l2448:
  3721  00111E  90D8               	bcf	status,0,c
  3722  001120  3615               	rlcf	___lmul@multiplicand,f,c
  3723  001122  3616               	rlcf	___lmul@multiplicand+1,f,c
  3724  001124  3617               	rlcf	___lmul@multiplicand+2,f,c
  3725  001126  3618               	rlcf	___lmul@multiplicand+3,f,c
  3726  001128  90D8               	bcf	status,0,c
  3727  00112A  3214               	rrcf	___lmul@multiplier+3,f,c
  3728  00112C  3213               	rrcf	___lmul@multiplier+2,f,c
  3729  00112E  3212               	rrcf	___lmul@multiplier+1,f,c
  3730  001130  3211               	rrcf	___lmul@multiplier,f,c
  3731  001132  5011               	movf	___lmul@multiplier,w,c
  3732  001134  1012               	iorwf	___lmul@multiplier+1,w,c
  3733  001136  1013               	iorwf	___lmul@multiplier+2,w,c
  3734  001138  1014               	iorwf	___lmul@multiplier+3,w,c
  3735  00113A  A4D8               	btfss	status,2,c
  3736  00113C  D7E6               	goto	l2444
  3737  00113E  C019  F011         	movff	___lmul@product,?___lmul
  3738  001142  C01A  F012         	movff	___lmul@product+1,?___lmul+1
  3739  001146  C01B  F013         	movff	___lmul@product+2,?___lmul+2
  3740  00114A  C01C  F014         	movff	___lmul@product+3,?___lmul+3
  3741  00114E  0012               	return		;funcret
  3742  001150                     __end_of___lmul:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           postinc0	equ	0xFEE
  3751                           wreg	equ	0xFE8
  3752                           postinc1	equ	0xFE6
  3753                           postdec1	equ	0xFE5
  3754                           fsr1h	equ	0xFE2
  3755                           fsr1l	equ	0xFE1
  3756                           postinc2	equ	0xFDE
  3757                           postdec2	equ	0xFDD
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function ___aldiv *****************
  3763 ;; Defined at:
  3764 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/aldiv.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;  dividend        4   16[COMRAM] long 
  3767 ;;  divisor         4   20[COMRAM] long 
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  quotient        4   26[COMRAM] long 
  3770 ;;  sign            1   25[COMRAM] unsigned char 
  3771 ;;  counter         1   24[COMRAM] unsigned char 
  3772 ;; Return value:  Size  Location     Type
  3773 ;;                  4   16[COMRAM] long 
  3774 ;; Registers used:
  3775 ;;		wreg, status,2, status,0
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3781 ;;      Params:         8       0       0       0       0       0       0       0       0
  3782 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3783 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3784 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3785 ;;Total ram usage:       14 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    1
  3788 ;; This function calls:
  3789 ;;		Nothing
  3790 ;; This function is called by:
  3791 ;;		_line_cal
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           	psect	text14
  3796  000D56                     __ptext14:
  3797                           	opt stack 0
  3798  000D56                     ___aldiv:
  3799                           	opt stack 28
  3800                           
  3801                           ;incstack = 0
  3802  000D56  0E00               	movlw	0
  3803  000D58  6E1A               	movwf	___aldiv@sign,c
  3804  000D5A  AE18               	btfss	___aldiv@divisor+3,7,c
  3805  000D5C  D00A               	goto	l2460
  3806  000D5E  1E18               	comf	___aldiv@divisor+3,f,c
  3807  000D60  1E17               	comf	___aldiv@divisor+2,f,c
  3808  000D62  1E16               	comf	___aldiv@divisor+1,f,c
  3809  000D64  6C15               	negf	___aldiv@divisor,c
  3810  000D66  0E00               	movlw	0
  3811  000D68  2216               	addwfc	___aldiv@divisor+1,f,c
  3812  000D6A  2217               	addwfc	___aldiv@divisor+2,f,c
  3813  000D6C  2218               	addwfc	___aldiv@divisor+3,f,c
  3814  000D6E  0E01               	movlw	1
  3815  000D70  6E1A               	movwf	___aldiv@sign,c
  3816  000D72                     l2460:
  3817  000D72  AE14               	btfss	___aldiv@dividend+3,7,c
  3818  000D74  D00A               	goto	l2466
  3819  000D76  1E14               	comf	___aldiv@dividend+3,f,c
  3820  000D78  1E13               	comf	___aldiv@dividend+2,f,c
  3821  000D7A  1E12               	comf	___aldiv@dividend+1,f,c
  3822  000D7C  6C11               	negf	___aldiv@dividend,c
  3823  000D7E  0E00               	movlw	0
  3824  000D80  2212               	addwfc	___aldiv@dividend+1,f,c
  3825  000D82  2213               	addwfc	___aldiv@dividend+2,f,c
  3826  000D84  2214               	addwfc	___aldiv@dividend+3,f,c
  3827  000D86  0E01               	movlw	1
  3828  000D88  1A1A               	xorwf	___aldiv@sign,f,c
  3829  000D8A                     l2466:
  3830  000D8A  0E00               	movlw	0
  3831  000D8C  6E1B               	movwf	___aldiv@quotient,c
  3832  000D8E  0E00               	movlw	0
  3833  000D90  6E1C               	movwf	___aldiv@quotient+1,c
  3834  000D92  0E00               	movlw	0
  3835  000D94  6E1D               	movwf	___aldiv@quotient+2,c
  3836  000D96  0E00               	movlw	0
  3837  000D98  6E1E               	movwf	___aldiv@quotient+3,c
  3838  000D9A  5015               	movf	___aldiv@divisor,w,c
  3839  000D9C  1016               	iorwf	___aldiv@divisor+1,w,c
  3840  000D9E  1017               	iorwf	___aldiv@divisor+2,w,c
  3841  000DA0  1018               	iorwf	___aldiv@divisor+3,w,c
  3842  000DA2  B4D8               	btfsc	status,2,c
  3843  000DA4  D02A               	goto	l2488
  3844  000DA6  0E01               	movlw	1
  3845  000DA8  6E19               	movwf	___aldiv@counter,c
  3846  000DAA  D006               	goto	l2474
  3847  000DAC                     l2472:
  3848  000DAC  90D8               	bcf	status,0,c
  3849  000DAE  3615               	rlcf	___aldiv@divisor,f,c
  3850  000DB0  3616               	rlcf	___aldiv@divisor+1,f,c
  3851  000DB2  3617               	rlcf	___aldiv@divisor+2,f,c
  3852  000DB4  3618               	rlcf	___aldiv@divisor+3,f,c
  3853  000DB6  2A19               	incf	___aldiv@counter,f,c
  3854  000DB8                     l2474:
  3855  000DB8  AE18               	btfss	___aldiv@divisor+3,7,c
  3856  000DBA  D7F8               	goto	l2472
  3857  000DBC                     l2476:
  3858  000DBC  90D8               	bcf	status,0,c
  3859  000DBE  361B               	rlcf	___aldiv@quotient,f,c
  3860  000DC0  361C               	rlcf	___aldiv@quotient+1,f,c
  3861  000DC2  361D               	rlcf	___aldiv@quotient+2,f,c
  3862  000DC4  361E               	rlcf	___aldiv@quotient+3,f,c
  3863  000DC6  5015               	movf	___aldiv@divisor,w,c
  3864  000DC8  5C11               	subwf	___aldiv@dividend,w,c
  3865  000DCA  5016               	movf	___aldiv@divisor+1,w,c
  3866  000DCC  5812               	subwfb	___aldiv@dividend+1,w,c
  3867  000DCE  5017               	movf	___aldiv@divisor+2,w,c
  3868  000DD0  5813               	subwfb	___aldiv@dividend+2,w,c
  3869  000DD2  5018               	movf	___aldiv@divisor+3,w,c
  3870  000DD4  5814               	subwfb	___aldiv@dividend+3,w,c
  3871  000DD6  A0D8               	btfss	status,0,c
  3872  000DD8  D009               	goto	l2484
  3873  000DDA  5015               	movf	___aldiv@divisor,w,c
  3874  000DDC  5E11               	subwf	___aldiv@dividend,f,c
  3875  000DDE  5016               	movf	___aldiv@divisor+1,w,c
  3876  000DE0  5A12               	subwfb	___aldiv@dividend+1,f,c
  3877  000DE2  5017               	movf	___aldiv@divisor+2,w,c
  3878  000DE4  5A13               	subwfb	___aldiv@dividend+2,f,c
  3879  000DE6  5018               	movf	___aldiv@divisor+3,w,c
  3880  000DE8  5A14               	subwfb	___aldiv@dividend+3,f,c
  3881  000DEA  801B               	bsf	___aldiv@quotient,0,c
  3882  000DEC                     l2484:
  3883  000DEC  90D8               	bcf	status,0,c
  3884  000DEE  3218               	rrcf	___aldiv@divisor+3,f,c
  3885  000DF0  3217               	rrcf	___aldiv@divisor+2,f,c
  3886  000DF2  3216               	rrcf	___aldiv@divisor+1,f,c
  3887  000DF4  3215               	rrcf	___aldiv@divisor,f,c
  3888  000DF6  2E19               	decfsz	___aldiv@counter,f,c
  3889  000DF8  D7E1               	goto	l2476
  3890  000DFA                     l2488:
  3891  000DFA  501A               	movf	___aldiv@sign,w,c
  3892  000DFC  B4D8               	btfsc	status,2,c
  3893  000DFE  D008               	goto	l2492
  3894  000E00  1E1E               	comf	___aldiv@quotient+3,f,c
  3895  000E02  1E1D               	comf	___aldiv@quotient+2,f,c
  3896  000E04  1E1C               	comf	___aldiv@quotient+1,f,c
  3897  000E06  6C1B               	negf	___aldiv@quotient,c
  3898  000E08  0E00               	movlw	0
  3899  000E0A  221C               	addwfc	___aldiv@quotient+1,f,c
  3900  000E0C  221D               	addwfc	___aldiv@quotient+2,f,c
  3901  000E0E  221E               	addwfc	___aldiv@quotient+3,f,c
  3902  000E10                     l2492:
  3903  000E10  C01B  F011         	movff	___aldiv@quotient,?___aldiv
  3904  000E14  C01C  F012         	movff	___aldiv@quotient+1,?___aldiv+1
  3905  000E18  C01D  F013         	movff	___aldiv@quotient+2,?___aldiv+2
  3906  000E1C  C01E  F014         	movff	___aldiv@quotient+3,?___aldiv+3
  3907  000E20  0012               	return	
  3908  000E22                     __end_of___aldiv:
  3909                           	opt stack 0
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           prodh	equ	0xFF4
  3915                           prodl	equ	0xFF3
  3916                           postinc0	equ	0xFEE
  3917                           wreg	equ	0xFE8
  3918                           postinc1	equ	0xFE6
  3919                           postdec1	equ	0xFE5
  3920                           fsr1h	equ	0xFE2
  3921                           fsr1l	equ	0xFE1
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function _init_tms *****************
  3929 ;; Defined at:
  3930 ;;		line 7 in file "config.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;		None
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;		None
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, status,2, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3944 ;;      Params:         0       0       0       0       0       0       0       0       0
  3945 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3946 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3947 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3948 ;;Total ram usage:        0 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    2
  3951 ;; This function calls:
  3952 ;;		_MotorsPWM
  3953 ;;		_an_init
  3954 ;;		_init_io
  3955 ;;		_init_wixel
  3956 ;; This function is called by:
  3957 ;;		_main
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text15
  3962  0011A2                     __ptext15:
  3963                           	opt stack 0
  3964  0011A2                     _init_tms:
  3965                           	opt stack 28
  3966                           
  3967                           ;config.c: 8: OSCCONbits.IRCF = 7;
  3968                           
  3969                           ;incstack = 0
  3970  0011A2  88D3               	bsf	4051,4,c	;volatile
  3971  0011A4  8AD3               	bsf	4051,5,c	;volatile
  3972  0011A6  8CD3               	bsf	4051,6,c	;volatile
  3973                           
  3974                           ;config.c: 11: CMCON=0x07;
  3975  0011A8  0E07               	movlw	7
  3976  0011AA  6EB4               	movwf	4020,c	;volatile
  3977                           
  3978                           ;config.c: 14: UCONbits.USBEN = 0;
  3979  0011AC  966D               	bcf	3949,3,c	;volatile
  3980                           
  3981                           ;config.c: 15: UCFGbits.UTRDIS = 1;
  3982  0011AE  866F               	bsf	3951,3,c	;volatile
  3983                           
  3984                           ;config.c: 18: T0CONbits.TMR0ON = 0;
  3985  0011B0  9ED5               	bcf	4053,7,c	;volatile
  3986                           
  3987                           ;config.c: 19: T0CONbits.T08BIT = 0;
  3988  0011B2  9CD5               	bcf	4053,6,c	;volatile
  3989                           
  3990                           ;config.c: 20: T0CONbits.T0CS = 0;
  3991  0011B4  9AD5               	bcf	4053,5,c	;volatile
  3992                           
  3993                           ;config.c: 22: T0CONbits.PSA = 1;
  3994  0011B6  86D5               	bsf	4053,3,c	;volatile
  3995                           
  3996                           ;config.c: 23: TMR0H = 0xF8;
  3997  0011B8  0EF8               	movlw	248
  3998  0011BA  6ED7               	movwf	4055,c	;volatile
  3999                           
  4000                           ;config.c: 24: TMR0L = 0x2F;
  4001  0011BC  0E2F               	movlw	47
  4002  0011BE  6ED6               	movwf	4054,c	;volatile
  4003                           
  4004                           ;config.c: 27: INTCON2bits.TMR0IP = 1;
  4005  0011C0  84F1               	bsf	intcon2,2,c	;volatile
  4006                           
  4007                           ;config.c: 28: RCONbits.IPEN = 0;
  4008  0011C2  9ED0               	bcf	4048,7,c	;volatile
  4009                           
  4010                           ;config.c: 29: INTCONbits.TMR0IE = 1;
  4011  0011C4  8AF2               	bsf	intcon,5,c	;volatile
  4012                           
  4013                           ;config.c: 33: INTCONbits.GIE = 1;
  4014  0011C6  8EF2               	bsf	intcon,7,c	;volatile
  4015                           
  4016                           ;config.c: 35: T0CONbits.TMR0ON = 1;
  4017  0011C8  8ED5               	bsf	4053,7,c	;volatile
  4018                           
  4019                           ;config.c: 37: T1CONbits.TMR1ON = 0;
  4020  0011CA  90CD               	bcf	4045,0,c	;volatile
  4021                           
  4022                           ;config.c: 38: T1CONbits.T1RD16 = 0;
  4023  0011CC  9ECD               	bcf	4045,7,c	;volatile
  4024                           
  4025                           ;config.c: 39: T1CONbits.T1RUN = 0;
  4026  0011CE  9CCD               	bcf	4045,6,c	;volatile
  4027                           
  4028                           ;config.c: 40: T1CONbits.T1CKPS = 0;
  4029  0011D0  0ECF               	movlw	-49
  4030  0011D2  16CD               	andwf	4045,f,c	;volatile
  4031                           
  4032                           ;config.c: 41: T1CONbits.T1OSCEN = 0;
  4033  0011D4  96CD               	bcf	4045,3,c	;volatile
  4034                           
  4035                           ;config.c: 42: T1CONbits.TMR1CS = 0;
  4036  0011D6  92CD               	bcf	4045,1,c	;volatile
  4037                           
  4038                           ;config.c: 43: T1CONbits.TMR1ON = 1;
  4039  0011D8  80CD               	bsf	4045,0,c	;volatile
  4040                           
  4041                           ;config.c: 45: TMR1H = 0xF8;
  4042  0011DA  0EF8               	movlw	248
  4043  0011DC  6ECF               	movwf	4047,c	;volatile
  4044                           
  4045                           ;config.c: 46: TMR1L = 0x2F;
  4046  0011DE  0E2F               	movlw	47
  4047  0011E0  6ECE               	movwf	4046,c	;volatile
  4048                           
  4049                           ;config.c: 48: init_io();
  4050  0011E2  EC5D  F009         	call	_init_io	;wreg free
  4051                           
  4052                           ;config.c: 49: an_init();
  4053  0011E6  EC74  F009         	call	_an_init	;wreg free
  4054                           
  4055                           ;config.c: 50: MotorsPWM();
  4056  0011EA  EC3E  F009         	call	_MotorsPWM	;wreg free
  4057                           
  4058                           ;config.c: 51: init_wixel();
  4059  0011EE  EC9C  F009         	call	_init_wixel	;wreg free
  4060  0011F2  0012               	return		;funcret
  4061  0011F4                     __end_of_init_tms:
  4062                           	opt stack 0
  4063                           tblptru	equ	0xFF8
  4064                           tblptrh	equ	0xFF7
  4065                           tblptrl	equ	0xFF6
  4066                           tablat	equ	0xFF5
  4067                           prodh	equ	0xFF4
  4068                           prodl	equ	0xFF3
  4069                           intcon	equ	0xFF2
  4070                           intcon2	equ	0xFF1
  4071                           postinc0	equ	0xFEE
  4072                           wreg	equ	0xFE8
  4073                           postinc1	equ	0xFE6
  4074                           postdec1	equ	0xFE5
  4075                           fsr1h	equ	0xFE2
  4076                           fsr1l	equ	0xFE1
  4077                           postinc2	equ	0xFDE
  4078                           postdec2	equ	0xFDD
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083 ;; *************** function _init_wixel *****************
  4084 ;; Defined at:
  4085 ;;		line 4 in file "wixel.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;		None
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;		None
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		wreg, status,2
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0
  4100 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4102 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4103 ;;Total ram usage:        0 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    1
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_init_tms
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text16
  4114  001338                     __ptext16:
  4115                           	opt stack 0
  4116  001338                     _init_wixel:
  4117                           	opt stack 28
  4118                           
  4119                           ;wixel.c: 5: BAUDCONbits.RXDTP=0;
  4120                           
  4121                           ;incstack = 0
  4122  001338  9AB8               	bcf	4024,5,c	;volatile
  4123                           
  4124                           ;wixel.c: 6: BAUDCONbits.TXCKP=0;
  4125  00133A  98B8               	bcf	4024,4,c	;volatile
  4126                           
  4127                           ;wixel.c: 7: BAUDCONbits.BRG16=1;
  4128  00133C  86B8               	bsf	4024,3,c	;volatile
  4129                           
  4130                           ;wixel.c: 9: BAUDCONbits.WUE=0;
  4131  00133E  92B8               	bcf	4024,1,c	;volatile
  4132                           
  4133                           ;wixel.c: 10: BAUDCONbits.ABDEN=0;
  4134  001340  90B8               	bcf	4024,0,c	;volatile
  4135                           
  4136                           ;wixel.c: 11: SPBRG=51;
  4137  001342  0E33               	movlw	51
  4138  001344  6EAF               	movwf	4015,c	;volatile
  4139                           
  4140                           ;wixel.c: 12: SPBRGH=0;
  4141  001346  0E00               	movlw	0
  4142  001348  6EB0               	movwf	4016,c	;volatile
  4143                           
  4144                           ;wixel.c: 13: TXSTAbits.CSRC=0;
  4145  00134A  9EAC               	bcf	4012,7,c	;volatile
  4146                           
  4147                           ;wixel.c: 14: TXSTAbits.TX9=0;
  4148  00134C  9CAC               	bcf	4012,6,c	;volatile
  4149                           
  4150                           ;wixel.c: 15: TXSTAbits.TXEN=1;
  4151  00134E  8AAC               	bsf	4012,5,c	;volatile
  4152                           
  4153                           ;wixel.c: 16: TXSTAbits.SYNC=0;
  4154  001350  98AC               	bcf	4012,4,c	;volatile
  4155                           
  4156                           ;wixel.c: 18: TXSTAbits.BRGH=0;
  4157  001352  94AC               	bcf	4012,2,c	;volatile
  4158                           
  4159                           ;wixel.c: 19: RCSTAbits.RX9=0;
  4160  001354  9CAB               	bcf	4011,6,c	;volatile
  4161                           
  4162                           ;wixel.c: 20: RCSTAbits.CREN=1;
  4163  001356  88AB               	bsf	4011,4,c	;volatile
  4164                           
  4165                           ;wixel.c: 21: RCSTAbits.SPEN=1;
  4166  001358  8EAB               	bsf	4011,7,c	;volatile
  4167  00135A  0012               	return		;funcret
  4168  00135C                     __end_of_init_wixel:
  4169                           	opt stack 0
  4170                           tblptru	equ	0xFF8
  4171                           tblptrh	equ	0xFF7
  4172                           tblptrl	equ	0xFF6
  4173                           tablat	equ	0xFF5
  4174                           prodh	equ	0xFF4
  4175                           prodl	equ	0xFF3
  4176                           intcon	equ	0xFF2
  4177                           intcon2	equ	0xFF1
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           postinc1	equ	0xFE6
  4181                           postdec1	equ	0xFE5
  4182                           fsr1h	equ	0xFE2
  4183                           fsr1l	equ	0xFE1
  4184                           postinc2	equ	0xFDE
  4185                           postdec2	equ	0xFDD
  4186                           fsr2h	equ	0xFDA
  4187                           fsr2l	equ	0xFD9
  4188                           status	equ	0xFD8
  4189                           
  4190 ;; *************** function _init_io *****************
  4191 ;; Defined at:
  4192 ;;		line 6 in file "io.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;		None
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  1    wreg      void 
  4199 ;; Registers used:
  4200 ;;		None
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4206 ;;      Params:         0       0       0       0       0       0       0       0       0
  4207 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4208 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4209 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4210 ;;Total ram usage:        0 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    1
  4213 ;; This function calls:
  4214 ;;		Nothing
  4215 ;; This function is called by:
  4216 ;;		_init_tms
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text17
  4221  0012BA                     __ptext17:
  4222                           	opt stack 0
  4223  0012BA                     _init_io:
  4224                           	opt stack 28
  4225                           
  4226                           ;io.c: 8: TRISBbits.RB4 = OUTPUT;
  4227                           
  4228                           ;incstack = 0
  4229  0012BA  9893               	bcf	3987,4,c	;volatile
  4230                           
  4231                           ;io.c: 9: TRISCbits.RC1 = OUTPUT;
  4232  0012BC  9294               	bcf	3988,1,c	;volatile
  4233                           
  4234                           ;io.c: 10: TRISDbits.RD2 = OUTPUT;
  4235  0012BE  9495               	bcf	3989,2,c	;volatile
  4236                           
  4237                           ;io.c: 11: TRISAbits.RA4 = OUTPUT;
  4238  0012C0  9892               	bcf	3986,4,c	;volatile
  4239                           
  4240                           ;io.c: 14: TRISBbits.RB0 = OUTPUT;
  4241  0012C2  9093               	bcf	3987,0,c	;volatile
  4242                           
  4243                           ;io.c: 15: TRISBbits.RB1 = OUTPUT;
  4244  0012C4  9293               	bcf	3987,1,c	;volatile
  4245                           
  4246                           ;io.c: 18: TRISDbits.RD0 = INPUT;
  4247  0012C6  8095               	bsf	3989,0,c	;volatile
  4248                           
  4249                           ;io.c: 19: TRISDbits.RD1 = INPUT;
  4250  0012C8  8295               	bsf	3989,1,c	;volatile
  4251                           
  4252                           ;io.c: 22: TRISAbits.RA0 = INPUT;
  4253  0012CA  8092               	bsf	3986,0,c	;volatile
  4254                           
  4255                           ;io.c: 23: TRISAbits.RA1 = INPUT;
  4256  0012CC  8292               	bsf	3986,1,c	;volatile
  4257                           
  4258                           ;io.c: 26: TRISAbits.RA2 = INPUT;
  4259  0012CE  8492               	bsf	3986,2,c	;volatile
  4260                           
  4261                           ;io.c: 27: TRISAbits.RA3 = INPUT;
  4262  0012D0  8692               	bsf	3986,3,c	;volatile
  4263                           
  4264                           ;io.c: 28: TRISAbits.RA5 = INPUT;
  4265  0012D2  8A92               	bsf	3986,5,c	;volatile
  4266                           
  4267                           ;io.c: 29: TRISEbits.RE0 = INPUT;
  4268  0012D4  8096               	bsf	3990,0,c	;volatile
  4269                           
  4270                           ;io.c: 30: TRISEbits.RE1 = INPUT;
  4271  0012D6  8296               	bsf	3990,1,c	;volatile
  4272                           
  4273                           ;io.c: 31: TRISEbits.RE2 = INPUT;
  4274  0012D8  8496               	bsf	3990,2,c	;volatile
  4275                           
  4276                           ;io.c: 32: TRISBbits.RB2 = INPUT;
  4277  0012DA  8493               	bsf	3987,2,c	;volatile
  4278                           
  4279                           ;io.c: 35: TRISCbits.RC2 = OUTPUT;
  4280  0012DC  9494               	bcf	3988,2,c	;volatile
  4281                           
  4282                           ;io.c: 36: TRISBbits.RB3 = OUTPUT;
  4283  0012DE  9693               	bcf	3987,3,c	;volatile
  4284                           
  4285                           ;io.c: 39: PORTEbits.RDPU = 1;
  4286  0012E0  8E84               	bsf	3972,7,c	;volatile
  4287                           
  4288                           ;io.c: 42: TRISCbits.RC6 = OUTPUT;
  4289  0012E2  9C94               	bcf	3988,6,c	;volatile
  4290                           
  4291                           ;io.c: 43: TRISCbits.RC7 = OUTPUT;
  4292  0012E4  9E94               	bcf	3988,7,c	;volatile
  4293  0012E6  0012               	return		;funcret
  4294  0012E8                     __end_of_init_io:
  4295                           	opt stack 0
  4296                           tblptru	equ	0xFF8
  4297                           tblptrh	equ	0xFF7
  4298                           tblptrl	equ	0xFF6
  4299                           tablat	equ	0xFF5
  4300                           prodh	equ	0xFF4
  4301                           prodl	equ	0xFF3
  4302                           intcon	equ	0xFF2
  4303                           intcon2	equ	0xFF1
  4304                           postinc0	equ	0xFEE
  4305                           wreg	equ	0xFE8
  4306                           postinc1	equ	0xFE6
  4307                           postdec1	equ	0xFE5
  4308                           fsr1h	equ	0xFE2
  4309                           fsr1l	equ	0xFE1
  4310                           postinc2	equ	0xFDE
  4311                           postdec2	equ	0xFDD
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _an_init *****************
  4317 ;; Defined at:
  4318 ;;		line 15 in file "analog.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;		None
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      void 
  4325 ;; Registers used:
  4326 ;;		wreg, status,2
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4332 ;;      Params:         0       0       0       0       0       0       0       0       0
  4333 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4335 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4336 ;;Total ram usage:        0 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    1
  4339 ;; This function calls:
  4340 ;;		Nothing
  4341 ;; This function is called by:
  4342 ;;		_init_tms
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text18
  4347  0012E8                     __ptext18:
  4348                           	opt stack 0
  4349  0012E8                     _an_init:
  4350                           	opt stack 28
  4351                           
  4352                           ;analog.c: 16: ADCON1bits.VCFG = 0;
  4353                           
  4354                           ;incstack = 0
  4355  0012E8  0ECF               	movlw	-49
  4356  0012EA  16C1               	andwf	4033,f,c	;volatile
  4357                           
  4358                           ;analog.c: 17: ADCON1bits.PCFG = 0x06;
  4359  0012EC  50C1               	movf	4033,w,c	;volatile
  4360  0012EE  0BF0               	andlw	-16
  4361  0012F0  0906               	iorlw	6
  4362  0012F2  6EC1               	movwf	4033,c	;volatile
  4363                           
  4364                           ;analog.c: 19: ADCON2bits.ADFM=0;
  4365  0012F4  9EC0               	bcf	4032,7,c	;volatile
  4366                           
  4367                           ;analog.c: 20: ADCON2bits.ACQT=7;
  4368  0012F6  86C0               	bsf	4032,3,c	;volatile
  4369  0012F8  88C0               	bsf	4032,4,c	;volatile
  4370  0012FA  8AC0               	bsf	4032,5,c	;volatile
  4371                           
  4372                           ;analog.c: 21: ADCON2bits.ADCS=6;
  4373  0012FC  50C0               	movf	4032,w,c	;volatile
  4374  0012FE  0BF8               	andlw	-8
  4375  001300  0906               	iorlw	6
  4376  001302  6EC0               	movwf	4032,c	;volatile
  4377                           
  4378                           ;analog.c: 22: ADCON0bits.CHS=0;
  4379  001304  94C2               	bcf	4034,2,c	;volatile
  4380  001306  96C2               	bcf	4034,3,c	;volatile
  4381  001308  98C2               	bcf	4034,4,c	;volatile
  4382  00130A  9AC2               	bcf	4034,5,c	;volatile
  4383                           
  4384                           ;analog.c: 23: ADCON0bits.GODONE=0;
  4385  00130C  92C2               	bcf	4034,1,c	;volatile
  4386                           
  4387                           ;analog.c: 24: ADCON0bits.ADON=1;
  4388  00130E  80C2               	bsf	4034,0,c	;volatile
  4389  001310  0012               	return		;funcret
  4390  001312                     __end_of_an_init:
  4391                           	opt stack 0
  4392                           tblptru	equ	0xFF8
  4393                           tblptrh	equ	0xFF7
  4394                           tblptrl	equ	0xFF6
  4395                           tablat	equ	0xFF5
  4396                           prodh	equ	0xFF4
  4397                           prodl	equ	0xFF3
  4398                           intcon	equ	0xFF2
  4399                           intcon2	equ	0xFF1
  4400                           postinc0	equ	0xFEE
  4401                           wreg	equ	0xFE8
  4402                           postinc1	equ	0xFE6
  4403                           postdec1	equ	0xFE5
  4404                           fsr1h	equ	0xFE2
  4405                           fsr1l	equ	0xFE1
  4406                           postinc2	equ	0xFDE
  4407                           postdec2	equ	0xFDD
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function _MotorsPWM *****************
  4413 ;; Defined at:
  4414 ;;		line 56 in file "config.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;		None
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;		None
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  1    wreg      void 
  4421 ;; Registers used:
  4422 ;;		wreg, status,2
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4428 ;;      Params:         0       0       0       0       0       0       0       0       0
  4429 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4431 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4432 ;;Total ram usage:        0 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    1
  4435 ;; This function calls:
  4436 ;;		Nothing
  4437 ;; This function is called by:
  4438 ;;		_init_tms
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text19
  4443  00127C                     __ptext19:
  4444                           	opt stack 0
  4445  00127C                     _MotorsPWM:
  4446                           	opt stack 28
  4447                           
  4448                           ;config.c: 58: T2OUTPS0 = 0;
  4449                           
  4450                           ;incstack = 0
  4451  00127C  96CA               	bcf	4042,3,c	;volatile
  4452                           
  4453                           ;config.c: 59: T2OUTPS1 = 0;
  4454  00127E  98CA               	bcf	4042,4,c	;volatile
  4455                           
  4456                           ;config.c: 60: T2OUTPS2 = 0;
  4457  001280  9ACA               	bcf	4042,5,c	;volatile
  4458                           
  4459                           ;config.c: 61: T2OUTPS3 = 0;
  4460  001282  9CCA               	bcf	4042,6,c	;volatile
  4461                           
  4462                           ;config.c: 63: TMR2ON = 1;
  4463  001284  84CA               	bsf	4042,2,c	;volatile
  4464                           
  4465                           ;config.c: 64: T2CKPS0 = 0;
  4466  001286  90CA               	bcf	4042,0,c	;volatile
  4467                           
  4468                           ;config.c: 65: T2CKPS1 = 0;
  4469  001288  92CA               	bcf	4042,1,c	;volatile
  4470                           
  4471                           ;config.c: 67: TMR2ON = 1;
  4472  00128A  84CA               	bsf	4042,2,c	;volatile
  4473                           
  4474                           ;config.c: 70: T2CONbits.TOUTPS=11;
  4475  00128C  50CA               	movf	4042,w,c	;volatile
  4476  00128E  0B87               	andlw	-121
  4477  001290  0958               	iorlw	88
  4478  001292  6ECA               	movwf	4042,c	;volatile
  4479                           
  4480                           ;config.c: 71: T2CONbits.T2CKPS=1;
  4481  001294  50CA               	movf	4042,w,c	;volatile
  4482  001296  0BFC               	andlw	-4
  4483  001298  0901               	iorlw	1
  4484  00129A  6ECA               	movwf	4042,c	;volatile
  4485                           
  4486                           ;config.c: 72: T2CONbits.TMR2ON=0;
  4487  00129C  94CA               	bcf	4042,2,c	;volatile
  4488                           
  4489                           ;config.c: 73: PR2=249;
  4490  00129E  0EF9               	movlw	249
  4491  0012A0  6ECB               	movwf	4043,c	;volatile
  4492                           
  4493                           ;config.c: 74: T2CONbits.TMR2ON=1;
  4494  0012A2  84CA               	bsf	4042,2,c	;volatile
  4495                           
  4496                           ;config.c: 77: CCP1CONbits.CCP1M = 1100;
  4497  0012A4  50BD               	movf	4029,w,c	;volatile
  4498  0012A6  0BF0               	andlw	-16
  4499  0012A8  090C               	iorlw	12
  4500  0012AA  6EBD               	movwf	4029,c	;volatile
  4501                           
  4502                           ;config.c: 78: CCP2CONbits.CCP2M = 1100;
  4503  0012AC  50BA               	movf	4026,w,c	;volatile
  4504  0012AE  0BF0               	andlw	-16
  4505  0012B0  090C               	iorlw	12
  4506  0012B2  6EBA               	movwf	4026,c	;volatile
  4507                           
  4508                           ;config.c: 81: PR2 = 249;
  4509  0012B4  0EF9               	movlw	249
  4510  0012B6  6ECB               	movwf	4043,c	;volatile
  4511  0012B8  0012               	return		;funcret
  4512  0012BA                     __end_of_MotorsPWM:
  4513                           	opt stack 0
  4514                           tblptru	equ	0xFF8
  4515                           tblptrh	equ	0xFF7
  4516                           tblptrl	equ	0xFF6
  4517                           tablat	equ	0xFF5
  4518                           prodh	equ	0xFF4
  4519                           prodl	equ	0xFF3
  4520                           intcon	equ	0xFF2
  4521                           intcon2	equ	0xFF1
  4522                           postinc0	equ	0xFEE
  4523                           wreg	equ	0xFE8
  4524                           postinc1	equ	0xFE6
  4525                           postdec1	equ	0xFE5
  4526                           fsr1h	equ	0xFE2
  4527                           fsr1l	equ	0xFE1
  4528                           postinc2	equ	0xFDE
  4529                           postdec2	equ	0xFDD
  4530                           fsr2h	equ	0xFDA
  4531                           fsr2l	equ	0xFD9
  4532                           status	equ	0xFD8
  4533                           
  4534 ;; *************** function _init_cal *****************
  4535 ;; Defined at:
  4536 ;;		line 40 in file "analog.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;		None
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  i               2   16[COMRAM] int 
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  2   20[None  ] int 
  4543 ;; Registers used:
  4544 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4550 ;;      Params:         0       0       0       0       0       0       0       0       0
  4551 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4552 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4553 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4554 ;;Total ram usage:        2 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:    1
  4557 ;; This function calls:
  4558 ;;		Nothing
  4559 ;; This function is called by:
  4560 ;;		_main
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           	psect	text20
  4565  00101E                     __ptext20:
  4566                           	opt stack 0
  4567  00101E                     _init_cal:
  4568                           	opt stack 29
  4569                           
  4570                           ;analog.c: 41: int i;
  4571                           ;analog.c: 43: for (i = 0;i < 7;i++) maxs[i] = 0;
  4572                           
  4573                           ;incstack = 0
  4574  00101E  0E00               	movlw	0
  4575  001020  6E12               	movwf	init_cal@i+1,c
  4576  001022  0E00               	movlw	0
  4577  001024  6E11               	movwf	init_cal@i,c
  4578  001026                     l2746:
  4579  001026  BE12               	btfsc	init_cal@i+1,7,c
  4580  001028  D006               	goto	l2750
  4581  00102A  5012               	movf	init_cal@i+1,w,c
  4582  00102C  E114               	bnz	l2756
  4583  00102E  0E07               	movlw	7
  4584  001030  5C11               	subwf	init_cal@i,w,c
  4585  001032  B0D8               	btfsc	status,0,c
  4586  001034  D010               	goto	l2756
  4587  001036                     l2750:
  4588  001036  90D8               	bcf	status,0,c
  4589  001038  3411               	rlcf	init_cal@i,w,c
  4590  00103A  6ED9               	movwf	fsr2l,c
  4591  00103C  3412               	rlcf	init_cal@i+1,w,c
  4592  00103E  6EDA               	movwf	fsr2h,c
  4593  001040  0E9A               	movlw	low _maxs
  4594  001042  26D9               	addwf	fsr2l,f,c
  4595  001044  0E00               	movlw	high _maxs
  4596  001046  22DA               	addwfc	fsr2h,f,c
  4597  001048  0E00               	movlw	0
  4598  00104A  6EDE               	movwf	postinc2,c
  4599  00104C  0E00               	movlw	0
  4600  00104E  6EDD               	movwf	postdec2,c
  4601  001050  4A11               	infsnz	init_cal@i,f,c
  4602  001052  2A12               	incf	init_cal@i+1,f,c
  4603  001054  D7E8               	goto	l2746
  4604  001056                     l2756:
  4605                           
  4606                           ;analog.c: 44: for (i = 0;i < 7;i++) mins[i] = 1024;
  4607  001056  0E00               	movlw	0
  4608  001058  6E12               	movwf	init_cal@i+1,c
  4609  00105A  0E00               	movlw	0
  4610  00105C  6E11               	movwf	init_cal@i,c
  4611  00105E                     l2758:
  4612  00105E  BE12               	btfsc	init_cal@i+1,7,c
  4613  001060  D006               	goto	l2762
  4614  001062  5012               	movf	init_cal@i+1,w,c
  4615  001064  E114               	bnz	l103
  4616  001066  0E07               	movlw	7
  4617  001068  5C11               	subwf	init_cal@i,w,c
  4618  00106A  B0D8               	btfsc	status,0,c
  4619  00106C  0012               	return	
  4620  00106E                     l2762:
  4621  00106E  90D8               	bcf	status,0,c
  4622  001070  3411               	rlcf	init_cal@i,w,c
  4623  001072  6ED9               	movwf	fsr2l,c
  4624  001074  3412               	rlcf	init_cal@i+1,w,c
  4625  001076  6EDA               	movwf	fsr2h,c
  4626  001078  0EA8               	movlw	low _mins
  4627  00107A  26D9               	addwf	fsr2l,f,c
  4628  00107C  0E00               	movlw	high _mins
  4629  00107E  22DA               	addwfc	fsr2h,f,c
  4630  001080  0E00               	movlw	0
  4631  001082  6EDE               	movwf	postinc2,c
  4632  001084  0E04               	movlw	4
  4633  001086  6EDD               	movwf	postdec2,c
  4634  001088  4A11               	infsnz	init_cal@i,f,c
  4635  00108A  2A12               	incf	init_cal@i+1,f,c
  4636  00108C  D7E8               	goto	l2758
  4637  00108E                     l103:
  4638  00108E  0012               	return		;funcret
  4639  001090                     __end_of_init_cal:
  4640                           	opt stack 0
  4641                           tblptru	equ	0xFF8
  4642                           tblptrh	equ	0xFF7
  4643                           tblptrl	equ	0xFF6
  4644                           tablat	equ	0xFF5
  4645                           prodh	equ	0xFF4
  4646                           prodl	equ	0xFF3
  4647                           intcon	equ	0xFF2
  4648                           intcon2	equ	0xFF1
  4649                           postinc0	equ	0xFEE
  4650                           wreg	equ	0xFE8
  4651                           postinc1	equ	0xFE6
  4652                           postdec1	equ	0xFE5
  4653                           fsr1h	equ	0xFE2
  4654                           fsr1l	equ	0xFE1
  4655                           postinc2	equ	0xFDE
  4656                           postdec2	equ	0xFDD
  4657                           fsr2h	equ	0xFDA
  4658                           fsr2l	equ	0xFD9
  4659                           status	equ	0xFD8
  4660                           
  4661 ;; *************** function ___almod *****************
  4662 ;; Defined at:
  4663 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/almod.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;  dividend        4   16[COMRAM] long 
  4666 ;;  divisor         4   20[COMRAM] long 
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;  sign            1   25[COMRAM] unsigned char 
  4669 ;;  counter         1   24[COMRAM] unsigned char 
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  4   16[COMRAM] long 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4679 ;;      Params:         8       0       0       0       0       0       0       0       0
  4680 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4682 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4683 ;;Total ram usage:       10 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    1
  4686 ;; This function calls:
  4687 ;;		Nothing
  4688 ;; This function is called by:
  4689 ;;		_main
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text21
  4694  000EEE                     __ptext21:
  4695                           	opt stack 0
  4696  000EEE                     ___almod:
  4697                           	opt stack 29
  4698                           
  4699                           ;incstack = 0
  4700  000EEE  0E00               	movlw	0
  4701  000EF0  6E1A               	movwf	___almod@sign,c
  4702  000EF2  AE14               	btfss	___almod@dividend+3,7,c
  4703  000EF4  D00A               	goto	l2924
  4704  000EF6  1E14               	comf	___almod@dividend+3,f,c
  4705  000EF8  1E13               	comf	___almod@dividend+2,f,c
  4706  000EFA  1E12               	comf	___almod@dividend+1,f,c
  4707  000EFC  6C11               	negf	___almod@dividend,c
  4708  000EFE  0E00               	movlw	0
  4709  000F00  2212               	addwfc	___almod@dividend+1,f,c
  4710  000F02  2213               	addwfc	___almod@dividend+2,f,c
  4711  000F04  2214               	addwfc	___almod@dividend+3,f,c
  4712  000F06  0E01               	movlw	1
  4713  000F08  6E1A               	movwf	___almod@sign,c
  4714  000F0A                     l2924:
  4715  000F0A  AE18               	btfss	___almod@divisor+3,7,c
  4716  000F0C  D008               	goto	l2928
  4717  000F0E  1E18               	comf	___almod@divisor+3,f,c
  4718  000F10  1E17               	comf	___almod@divisor+2,f,c
  4719  000F12  1E16               	comf	___almod@divisor+1,f,c
  4720  000F14  6C15               	negf	___almod@divisor,c
  4721  000F16  0E00               	movlw	0
  4722  000F18  2216               	addwfc	___almod@divisor+1,f,c
  4723  000F1A  2217               	addwfc	___almod@divisor+2,f,c
  4724  000F1C  2218               	addwfc	___almod@divisor+3,f,c
  4725  000F1E                     l2928:
  4726  000F1E  5015               	movf	___almod@divisor,w,c
  4727  000F20  1016               	iorwf	___almod@divisor+1,w,c
  4728  000F22  1017               	iorwf	___almod@divisor+2,w,c
  4729  000F24  1018               	iorwf	___almod@divisor+3,w,c
  4730  000F26  B4D8               	btfsc	status,2,c
  4731  000F28  D024               	goto	l2944
  4732  000F2A  0E01               	movlw	1
  4733  000F2C  6E19               	movwf	___almod@counter,c
  4734  000F2E  D006               	goto	l2934
  4735  000F30                     l2932:
  4736  000F30  90D8               	bcf	status,0,c
  4737  000F32  3615               	rlcf	___almod@divisor,f,c
  4738  000F34  3616               	rlcf	___almod@divisor+1,f,c
  4739  000F36  3617               	rlcf	___almod@divisor+2,f,c
  4740  000F38  3618               	rlcf	___almod@divisor+3,f,c
  4741  000F3A  2A19               	incf	___almod@counter,f,c
  4742  000F3C                     l2934:
  4743  000F3C  AE18               	btfss	___almod@divisor+3,7,c
  4744  000F3E  D7F8               	goto	l2932
  4745  000F40                     l2936:
  4746  000F40  5015               	movf	___almod@divisor,w,c
  4747  000F42  5C11               	subwf	___almod@dividend,w,c
  4748  000F44  5016               	movf	___almod@divisor+1,w,c
  4749  000F46  5812               	subwfb	___almod@dividend+1,w,c
  4750  000F48  5017               	movf	___almod@divisor+2,w,c
  4751  000F4A  5813               	subwfb	___almod@dividend+2,w,c
  4752  000F4C  5018               	movf	___almod@divisor+3,w,c
  4753  000F4E  5814               	subwfb	___almod@dividend+3,w,c
  4754  000F50  A0D8               	btfss	status,0,c
  4755  000F52  D008               	goto	l2940
  4756  000F54  5015               	movf	___almod@divisor,w,c
  4757  000F56  5E11               	subwf	___almod@dividend,f,c
  4758  000F58  5016               	movf	___almod@divisor+1,w,c
  4759  000F5A  5A12               	subwfb	___almod@dividend+1,f,c
  4760  000F5C  5017               	movf	___almod@divisor+2,w,c
  4761  000F5E  5A13               	subwfb	___almod@dividend+2,f,c
  4762  000F60  5018               	movf	___almod@divisor+3,w,c
  4763  000F62  5A14               	subwfb	___almod@dividend+3,f,c
  4764  000F64                     l2940:
  4765  000F64  90D8               	bcf	status,0,c
  4766  000F66  3218               	rrcf	___almod@divisor+3,f,c
  4767  000F68  3217               	rrcf	___almod@divisor+2,f,c
  4768  000F6A  3216               	rrcf	___almod@divisor+1,f,c
  4769  000F6C  3215               	rrcf	___almod@divisor,f,c
  4770  000F6E  2E19               	decfsz	___almod@counter,f,c
  4771  000F70  D7E7               	goto	l2936
  4772  000F72                     l2944:
  4773  000F72  501A               	movf	___almod@sign,w,c
  4774  000F74  B4D8               	btfsc	status,2,c
  4775  000F76  D008               	goto	l2948
  4776  000F78  1E14               	comf	___almod@dividend+3,f,c
  4777  000F7A  1E13               	comf	___almod@dividend+2,f,c
  4778  000F7C  1E12               	comf	___almod@dividend+1,f,c
  4779  000F7E  6C11               	negf	___almod@dividend,c
  4780  000F80  0E00               	movlw	0
  4781  000F82  2212               	addwfc	___almod@dividend+1,f,c
  4782  000F84  2213               	addwfc	___almod@dividend+2,f,c
  4783  000F86  2214               	addwfc	___almod@dividend+3,f,c
  4784  000F88                     l2948:
  4785  000F88  C011  F011         	movff	___almod@dividend,?___almod
  4786  000F8C  C012  F012         	movff	___almod@dividend+1,?___almod+1
  4787  000F90  C013  F013         	movff	___almod@dividend+2,?___almod+2
  4788  000F94  C014  F014         	movff	___almod@dividend+3,?___almod+3
  4789  000F98  0012               	return	
  4790  000F9A                     __end_of___almod:
  4791                           	opt stack 0
  4792                           tblptru	equ	0xFF8
  4793                           tblptrh	equ	0xFF7
  4794                           tblptrl	equ	0xFF6
  4795                           tablat	equ	0xFF5
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           intcon	equ	0xFF2
  4799                           intcon2	equ	0xFF1
  4800                           postinc0	equ	0xFEE
  4801                           wreg	equ	0xFE8
  4802                           postinc1	equ	0xFE6
  4803                           postdec1	equ	0xFE5
  4804                           fsr1h	equ	0xFE2
  4805                           fsr1l	equ	0xFE1
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _EnhancedRead *****************
  4813 ;; Defined at:
  4814 ;;		line 28 in file "analog.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;		None
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  aux             2   31[COMRAM] unsigned int 
  4819 ;;  i               1   33[COMRAM] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      void 
  4822 ;; Registers used:
  4823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4829 ;;      Params:         0       0       0       0       0       0       0       0       0
  4830 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4831 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4832 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4833 ;;Total ram usage:        4 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    2
  4836 ;; This function calls:
  4837 ;;		___awdiv
  4838 ;; This function is called by:
  4839 ;;		_main
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text22
  4844  001090                     __ptext22:
  4845                           	opt stack 0
  4846  001090                     _EnhancedRead:
  4847                           	opt stack 28
  4848                           
  4849                           ;analog.c: 29: unsigned char i;
  4850                           ;analog.c: 30: unsigned int aux;
  4851                           ;analog.c: 31: for (i=0;i<9;i++){
  4852                           
  4853                           ;incstack = 0
  4854  001090  0E00               	movlw	0
  4855  001092  6E22               	movwf	EnhancedRead@i,c
  4856  001094                     l2718:
  4857  001094  0E08               	movlw	8
  4858  001096  6422               	cpfsgt	EnhancedRead@i,c
  4859  001098  D001               	goto	l2722
  4860  00109A  0012               	return	
  4861  00109C                     l2722:
  4862                           
  4863                           ;analog.c: 32: ADCON0bits.CHS=i;
  4864  00109C  C022  F01F         	movff	EnhancedRead@i,??_EnhancedRead
  4865  0010A0  461F               	rlncf	??_EnhancedRead,f,c
  4866  0010A2  461F               	rlncf	??_EnhancedRead,f,c
  4867  0010A4  50C2               	movf	4034,w,c	;volatile
  4868  0010A6  181F               	xorwf	??_EnhancedRead,w,c
  4869  0010A8  0BC3               	andlw	-61
  4870  0010AA  181F               	xorwf	??_EnhancedRead,w,c
  4871  0010AC  6EC2               	movwf	4034,c	;volatile
  4872                           
  4873                           ;analog.c: 33: ADCON0bits.GODONE=1;
  4874  0010AE  82C2               	bsf	4034,1,c	;volatile
  4875  0010B0                     l93:
  4876  0010B0  B2C2               	btfsc	4034,1,c	;volatile
  4877  0010B2  D7FE               	goto	l93
  4878                           
  4879                           ;analog.c: 35: aux=ADRESH*4;
  4880  0010B4  50C4               	movf	4036,w,c	;volatile
  4881  0010B6  0D04               	mullw	4
  4882  0010B8  CFF3 F020          	movff	prodl,EnhancedRead@aux
  4883  0010BC  CFF4 F021          	movff	prodh,EnhancedRead@aux+1
  4884                           
  4885                           ;analog.c: 36: aux=aux+ADRESL/64;
  4886  0010C0  CFC3 F017          	movff	4035,___awdiv@dividend	;volatile
  4887  0010C4  6A18               	clrf	___awdiv@dividend+1,c
  4888  0010C6  0E00               	movlw	0
  4889  0010C8  6E1A               	movwf	___awdiv@divisor+1,c
  4890  0010CA  0E40               	movlw	64
  4891  0010CC  6E19               	movwf	___awdiv@divisor,c
  4892  0010CE  ECCD  F007         	call	___awdiv	;wreg free
  4893  0010D2  5020               	movf	EnhancedRead@aux,w,c
  4894  0010D4  2417               	addwf	?___awdiv,w,c
  4895  0010D6  6E20               	movwf	EnhancedRead@aux,c
  4896  0010D8  5021               	movf	EnhancedRead@aux+1,w,c
  4897  0010DA  2018               	addwfc	?___awdiv+1,w,c
  4898  0010DC  6E21               	movwf	EnhancedRead@aux+1,c
  4899                           
  4900                           ;analog.c: 37: an[i]=aux;
  4901  0010DE  5022               	movf	EnhancedRead@i,w,c
  4902  0010E0  0D02               	mullw	2
  4903  0010E2  0E88               	movlw	low _an
  4904  0010E4  24F3               	addwf	prodl,w,c
  4905  0010E6  6ED9               	movwf	fsr2l,c
  4906  0010E8  0E00               	movlw	high _an
  4907  0010EA  20F4               	addwfc	prodh,w,c
  4908  0010EC  6EDA               	movwf	fsr2h,c
  4909  0010EE  C020  FFDE         	movff	EnhancedRead@aux,postinc2
  4910  0010F2  C021  FFDD         	movff	EnhancedRead@aux+1,postdec2
  4911  0010F6  2A22               	incf	EnhancedRead@i,f,c
  4912  0010F8  D7CD               	goto	l2718
  4913  0010FA                     __end_of_EnhancedRead:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           intcon2	equ	0xFF1
  4923                           postinc0	equ	0xFEE
  4924                           wreg	equ	0xFE8
  4925                           postinc1	equ	0xFE6
  4926                           postdec1	equ	0xFE5
  4927                           fsr1h	equ	0xFE2
  4928                           fsr1l	equ	0xFE1
  4929                           postinc2	equ	0xFDE
  4930                           postdec2	equ	0xFDD
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function ___awdiv *****************
  4936 ;; Defined at:
  4937 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awdiv.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  dividend        2   22[COMRAM] int 
  4940 ;;  divisor         2   24[COMRAM] int 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  quotient        2   28[COMRAM] int 
  4943 ;;  sign            1   27[COMRAM] unsigned char 
  4944 ;;  counter         1   26[COMRAM] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  2   22[COMRAM] int 
  4947 ;; Registers used:
  4948 ;;		wreg, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4954 ;;      Params:         4       0       0       0       0       0       0       0       0
  4955 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4956 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4957 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4958 ;;Total ram usage:        8 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    1
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_EnhancedRead
  4965 ;;		_line_cal
  4966 ;;		_MotorASpeed
  4967 ;;		_MotorBSpeed
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           	psect	text23
  4972  000F9A                     __ptext23:
  4973                           	opt stack 0
  4974  000F9A                     ___awdiv:
  4975                           	opt stack 28
  4976                           
  4977                           ;incstack = 0
  4978  000F9A  0E00               	movlw	0
  4979  000F9C  6E1C               	movwf	___awdiv@sign,c
  4980  000F9E  AE1A               	btfss	___awdiv@divisor+1,7,c
  4981  000FA0  D006               	goto	l2504
  4982  000FA2  6C19               	negf	___awdiv@divisor,c
  4983  000FA4  1E1A               	comf	___awdiv@divisor+1,f,c
  4984  000FA6  B0D8               	btfsc	status,0,c
  4985  000FA8  2A1A               	incf	___awdiv@divisor+1,f,c
  4986  000FAA  0E01               	movlw	1
  4987  000FAC  6E1C               	movwf	___awdiv@sign,c
  4988  000FAE                     l2504:
  4989  000FAE  AE18               	btfss	___awdiv@dividend+1,7,c
  4990  000FB0  D006               	goto	l2510
  4991  000FB2  6C17               	negf	___awdiv@dividend,c
  4992  000FB4  1E18               	comf	___awdiv@dividend+1,f,c
  4993  000FB6  B0D8               	btfsc	status,0,c
  4994  000FB8  2A18               	incf	___awdiv@dividend+1,f,c
  4995  000FBA  0E01               	movlw	1
  4996  000FBC  1A1C               	xorwf	___awdiv@sign,f,c
  4997  000FBE                     l2510:
  4998  000FBE  0E00               	movlw	0
  4999  000FC0  6E1E               	movwf	___awdiv@quotient+1,c
  5000  000FC2  0E00               	movlw	0
  5001  000FC4  6E1D               	movwf	___awdiv@quotient,c
  5002  000FC6  5019               	movf	___awdiv@divisor,w,c
  5003  000FC8  101A               	iorwf	___awdiv@divisor+1,w,c
  5004  000FCA  B4D8               	btfsc	status,2,c
  5005  000FCC  D01C               	goto	l2532
  5006  000FCE  0E01               	movlw	1
  5007  000FD0  6E1B               	movwf	___awdiv@counter,c
  5008  000FD2  D004               	goto	l2518
  5009  000FD4                     l2516:
  5010  000FD4  90D8               	bcf	status,0,c
  5011  000FD6  3619               	rlcf	___awdiv@divisor,f,c
  5012  000FD8  361A               	rlcf	___awdiv@divisor+1,f,c
  5013  000FDA  2A1B               	incf	___awdiv@counter,f,c
  5014  000FDC                     l2518:
  5015  000FDC  AE1A               	btfss	___awdiv@divisor+1,7,c
  5016  000FDE  D7FA               	goto	l2516
  5017  000FE0                     l2520:
  5018  000FE0  90D8               	bcf	status,0,c
  5019  000FE2  361D               	rlcf	___awdiv@quotient,f,c
  5020  000FE4  361E               	rlcf	___awdiv@quotient+1,f,c
  5021  000FE6  5019               	movf	___awdiv@divisor,w,c
  5022  000FE8  5C17               	subwf	___awdiv@dividend,w,c
  5023  000FEA  501A               	movf	___awdiv@divisor+1,w,c
  5024  000FEC  5818               	subwfb	___awdiv@dividend+1,w,c
  5025  000FEE  A0D8               	btfss	status,0,c
  5026  000FF0  D005               	goto	l2528
  5027  000FF2  5019               	movf	___awdiv@divisor,w,c
  5028  000FF4  5E17               	subwf	___awdiv@dividend,f,c
  5029  000FF6  501A               	movf	___awdiv@divisor+1,w,c
  5030  000FF8  5A18               	subwfb	___awdiv@dividend+1,f,c
  5031  000FFA  801D               	bsf	___awdiv@quotient,0,c
  5032  000FFC                     l2528:
  5033  000FFC  90D8               	bcf	status,0,c
  5034  000FFE  321A               	rrcf	___awdiv@divisor+1,f,c
  5035  001000  3219               	rrcf	___awdiv@divisor,f,c
  5036  001002  2E1B               	decfsz	___awdiv@counter,f,c
  5037  001004  D7ED               	goto	l2520
  5038  001006                     l2532:
  5039  001006  501C               	movf	___awdiv@sign,w,c
  5040  001008  B4D8               	btfsc	status,2,c
  5041  00100A  D004               	goto	l2536
  5042  00100C  6C1D               	negf	___awdiv@quotient,c
  5043  00100E  1E1E               	comf	___awdiv@quotient+1,f,c
  5044  001010  B0D8               	btfsc	status,0,c
  5045  001012  2A1E               	incf	___awdiv@quotient+1,f,c
  5046  001014                     l2536:
  5047  001014  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  5048  001018  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  5049  00101C  0012               	return	
  5050  00101E                     __end_of___awdiv:
  5051                           	opt stack 0
  5052                           tblptru	equ	0xFF8
  5053                           tblptrh	equ	0xFF7
  5054                           tblptrl	equ	0xFF6
  5055                           tablat	equ	0xFF5
  5056                           prodh	equ	0xFF4
  5057                           prodl	equ	0xFF3
  5058                           intcon	equ	0xFF2
  5059                           intcon2	equ	0xFF1
  5060                           postinc0	equ	0xFEE
  5061                           wreg	equ	0xFE8
  5062                           postinc1	equ	0xFE6
  5063                           postdec1	equ	0xFE5
  5064                           fsr1h	equ	0xFE2
  5065                           fsr1l	equ	0xFE1
  5066                           postinc2	equ	0xFDE
  5067                           postdec2	equ	0xFDD
  5068                           fsr2h	equ	0xFDA
  5069                           fsr2l	equ	0xFD9
  5070                           status	equ	0xFD8
  5071                           
  5072 ;; *************** function _enc *****************
  5073 ;; Defined at:
  5074 ;;		line 7 in file "timer.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;		None
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;		None
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      void 
  5081 ;; Registers used:
  5082 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5088 ;;      Params:         0       0       0       0       0       0       0       0       0
  5089 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5090 ;;      Temps:         16       0       0       0       0       0       0       0       0
  5091 ;;      Totals:        16       0       0       0       0       0       0       0       0
  5092 ;;Total ram usage:       16 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		Interrupt level 2
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	intcode
  5102  000008                     __pintcode:
  5103                           	opt stack 0
  5104  000008                     _enc:
  5105                           	opt stack 28
  5106                           
  5107                           ;incstack = 0
  5108  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5109  00000A  ED11  F007         	call	int_func,f	;refresh shadow registers
  5110                           tblptru	equ	0xFF8
  5111                           tblptrh	equ	0xFF7
  5112                           tblptrl	equ	0xFF6
  5113                           tablat	equ	0xFF5
  5114                           prodh	equ	0xFF4
  5115                           prodl	equ	0xFF3
  5116                           intcon	equ	0xFF2
  5117                           intcon2	equ	0xFF1
  5118                           postinc0	equ	0xFEE
  5119                           wreg	equ	0xFE8
  5120                           postinc1	equ	0xFE6
  5121                           postdec1	equ	0xFE5
  5122                           fsr1h	equ	0xFE2
  5123                           fsr1l	equ	0xFE1
  5124                           postinc2	equ	0xFDE
  5125                           postdec2	equ	0xFDD
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130                           	psect	intcode_body
  5131  000E22                     __pintcode_body:
  5132                           	opt stack 28
  5133  000E22                     int_func:
  5134                           	opt stack 28
  5135  000E22  0006               	pop		; remove dummy address from shadow register refresh
  5136  000E24  CFFA F003          	movff	pclath,??_enc+2
  5137  000E28  CFFB F004          	movff	pclatu,??_enc+3
  5138  000E2C  CFE9 F005          	movff	fsr0l,??_enc+4
  5139  000E30  CFEA F006          	movff	fsr0h,??_enc+5
  5140  000E34  CFE1 F007          	movff	fsr1l,??_enc+6
  5141  000E38  CFE2 F008          	movff	fsr1h,??_enc+7
  5142  000E3C  CFD9 F009          	movff	fsr2l,??_enc+8
  5143  000E40  CFDA F00A          	movff	fsr2h,??_enc+9
  5144  000E44  CFF3 F00B          	movff	prodl,??_enc+10
  5145  000E48  CFF4 F00C          	movff	prodh,??_enc+11
  5146  000E4C  CFF6 F00D          	movff	tblptrl,??_enc+12
  5147  000E50  CFF7 F00E          	movff	tblptrh,??_enc+13
  5148  000E54  CFF8 F00F          	movff	tblptru,??_enc+14
  5149  000E58  CFF5 F010          	movff	tablat,??_enc+15
  5150                           
  5151                           ;timer.c: 8: if (TMR0IF){
  5152  000E5C  A4F2               	btfss	intcon,2,c	;volatile
  5153  000E5E  D029               	goto	i2l275
  5154                           
  5155                           ;timer.c: 9: for (i = 0;i < 10;i++) time[i]++;
  5156  000E60  0E00               	movlw	0
  5157  000E62  6E49               	movwf	_i+1,c
  5158  000E64  0E00               	movlw	0
  5159  000E66  6E48               	movwf	_i,c
  5160  000E68                     i2l2344:
  5161  000E68  BE49               	btfsc	_i+1,7,c
  5162  000E6A  D006               	goto	i2l2348
  5163  000E6C  5049               	movf	_i+1,w,c
  5164  000E6E  E11C               	bnz	i2l2354
  5165  000E70  0E0A               	movlw	10
  5166  000E72  5C48               	subwf	_i,w,c
  5167  000E74  B0D8               	btfsc	status,0,c
  5168  000E76  D018               	goto	i2l2354
  5169  000E78                     i2l2348:
  5170  000E78  0E60               	movlw	low _time
  5171  000E7A  6E01               	movwf	??_enc& (0+255),c
  5172  000E7C  0E00               	movlw	high _time
  5173  000E7E  6E02               	movwf	(??_enc+1)& (0+255),c
  5174  000E80  90D8               	bcf	status,0,c
  5175  000E82  3448               	rlcf	_i,w,c
  5176  000E84  6ED9               	movwf	fsr2l,c
  5177  000E86  3449               	rlcf	_i+1,w,c
  5178  000E88  6EDA               	movwf	fsr2h,c
  5179  000E8A  90D8               	bcf	status,0,c
  5180  000E8C  36D9               	rlcf	fsr2l,f,c
  5181  000E8E  36DA               	rlcf	fsr2h,f,c
  5182  000E90  5001               	movf	??_enc,w,c
  5183  000E92  26D9               	addwf	fsr2l,f,c
  5184  000E94  5002               	movf	??_enc+1,w,c
  5185  000E96  22DA               	addwfc	fsr2h,f,c
  5186  000E98  2ADE               	incf	postinc2,f,c
  5187  000E9A  0E00               	movlw	0
  5188  000E9C  22DE               	addwfc	postinc2,f,c
  5189  000E9E  22DE               	addwfc	postinc2,f,c
  5190  000EA0  22DE               	addwfc	postinc2,f,c
  5191  000EA2  4A48               	infsnz	_i,f,c
  5192  000EA4  2A49               	incf	_i+1,f,c
  5193  000EA6  D7E0               	goto	i2l2344
  5194  000EA8                     i2l2354:
  5195                           
  5196                           ;timer.c: 10: TMR0H = 0xF8;
  5197  000EA8  0EF8               	movlw	248
  5198  000EAA  6ED7               	movwf	4055,c	;volatile
  5199                           
  5200                           ;timer.c: 11: TMR0L = 0x2F;
  5201  000EAC  0E2F               	movlw	47
  5202  000EAE  6ED6               	movwf	4054,c	;volatile
  5203                           
  5204                           ;timer.c: 12: TMR0IF = 0;
  5205  000EB0  94F2               	bcf	intcon,2,c	;volatile
  5206  000EB2                     i2l275:
  5207  000EB2  C010  FFF5         	movff	??_enc+15,tablat
  5208  000EB6  C00F  FFF8         	movff	??_enc+14,tblptru
  5209  000EBA  C00E  FFF7         	movff	??_enc+13,tblptrh
  5210  000EBE  C00D  FFF6         	movff	??_enc+12,tblptrl
  5211  000EC2  C00C  FFF4         	movff	??_enc+11,prodh
  5212  000EC6  C00B  FFF3         	movff	??_enc+10,prodl
  5213  000ECA  C00A  FFDA         	movff	??_enc+9,fsr2h
  5214  000ECE  C009  FFD9         	movff	??_enc+8,fsr2l
  5215  000ED2  C008  FFE2         	movff	??_enc+7,fsr1h
  5216  000ED6  C007  FFE1         	movff	??_enc+6,fsr1l
  5217  000EDA  C006  FFEA         	movff	??_enc+5,fsr0h
  5218  000EDE  C005  FFE9         	movff	??_enc+4,fsr0l
  5219  000EE2  C004  FFFB         	movff	??_enc+3,pclatu
  5220  000EE6  C003  FFFA         	movff	??_enc+2,pclath
  5221  000EEA  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5222  000EEC  0011               	retfie		f
  5223  000EEE                     __end_of_enc:
  5224                           	opt stack 0
  5225                           pclatu	equ	0xFFB
  5226                           pclath	equ	0xFFA
  5227                           tblptru	equ	0xFF8
  5228                           tblptrh	equ	0xFF7
  5229                           tblptrl	equ	0xFF6
  5230                           tablat	equ	0xFF5
  5231                           prodh	equ	0xFF4
  5232                           prodl	equ	0xFF3
  5233                           intcon	equ	0xFF2
  5234                           intcon2	equ	0xFF1
  5235                           postinc0	equ	0xFEE
  5236                           fsr0h	equ	0xFEA
  5237                           fsr0l	equ	0xFE9
  5238                           wreg	equ	0xFE8
  5239                           postinc1	equ	0xFE6
  5240                           postdec1	equ	0xFE5
  5241                           fsr1h	equ	0xFE2
  5242                           fsr1l	equ	0xFE1
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           pclatu	equ	0xFFB
  5249                           pclath	equ	0xFFA
  5250                           tblptru	equ	0xFF8
  5251                           tblptrh	equ	0xFF7
  5252                           tblptrl	equ	0xFF6
  5253                           tablat	equ	0xFF5
  5254                           prodh	equ	0xFF4
  5255                           prodl	equ	0xFF3
  5256                           intcon	equ	0xFF2
  5257                           intcon2	equ	0xFF1
  5258                           postinc0	equ	0xFEE
  5259                           fsr0h	equ	0xFEA
  5260                           fsr0l	equ	0xFE9
  5261                           wreg	equ	0xFE8
  5262                           postinc1	equ	0xFE6
  5263                           postdec1	equ	0xFE5
  5264                           fsr1h	equ	0xFE2
  5265                           fsr1l	equ	0xFE1
  5266                           postinc2	equ	0xFDE
  5267                           postdec2	equ	0xFDD
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272                           	psect	rparam
  5273  0000                     pclatu	equ	0xFFB
  5274                           pclath	equ	0xFFA
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           intcon	equ	0xFF2
  5282                           intcon2	equ	0xFF1
  5283                           postinc0	equ	0xFEE
  5284                           fsr0h	equ	0xFEA
  5285                           fsr0l	equ	0xFE9
  5286                           wreg	equ	0xFE8
  5287                           postinc1	equ	0xFE6
  5288                           postdec1	equ	0xFE5
  5289                           fsr1h	equ	0xFE2
  5290                           fsr1l	equ	0xFE1
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297                           	psect	temp
  5298  00004E                     btemp:
  5299                           	opt stack 0
  5300  00004E                     	ds	1
  5301  0000                     int$flags	set	btemp
  5302                           pclatu	equ	0xFFB
  5303                           pclath	equ	0xFFA
  5304                           tblptru	equ	0xFF8
  5305                           tblptrh	equ	0xFF7
  5306                           tblptrl	equ	0xFF6
  5307                           tablat	equ	0xFF5
  5308                           prodh	equ	0xFF4
  5309                           prodl	equ	0xFF3
  5310                           intcon	equ	0xFF2
  5311                           intcon2	equ	0xFF1
  5312                           postinc0	equ	0xFEE
  5313                           fsr0h	equ	0xFEA
  5314                           fsr0l	equ	0xFE9
  5315                           wreg	equ	0xFE8
  5316                           postinc1	equ	0xFE6
  5317                           postdec1	equ	0xFE5
  5318                           fsr1h	equ	0xFE2
  5319                           fsr1l	equ	0xFE1
  5320                           postinc2	equ	0xFDE
  5321                           postdec2	equ	0xFDD
  5322                           fsr2h	equ	0xFDA
  5323                           fsr2l	equ	0xFD9
  5324                           status	equ	0xFD8


Data Sizes:
    Strings     256
    Constant    10
    Data        18
    BSS         92
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      77
    BANK0           160     26     112
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_6(CODE[44]), STR_5(CODE[43]), STR_4(CODE[36]), STR_3(CODE[47]), 
		 -> STR_2(CODE[46]), STR_1(CODE[40]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    line_cal$507	PTR int  size(2) Largest target is 18
		 -> an(BANK0[18]), maxs(BANK0[14]), 

    line_cal$505	PTR int  size(2) Largest target is 18
		 -> an(BANK0[18]), mins(BANK0[14]), 

    read_cal$497	PTR int  size(2) Largest target is 18
		 -> an(BANK0[18]), mins(BANK0[14]), 

    read_cal$495	PTR int  size(2) Largest target is 18
		 -> an(BANK0[18]), maxs(BANK0[14]), 

    read_cal$493	PTR int  size(2) Largest target is 18
		 -> an(BANK0[18]), mins(BANK0[14]), 

    read_cal$491	PTR int  size(2) Largest target is 18
		 -> an(BANK0[18]), maxs(BANK0[14]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _line_cal->___aldiv
    _line_cal->___awdiv
    _EnhancedRead->___awdiv
    ___awdiv->___wmul

Critical Paths under _enc in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_line_cal

Critical Paths under _enc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _enc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _enc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _enc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _enc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _enc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _enc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _enc in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    9850
                                             49 COMRAM     4     4      0
                                             24 BANK0      2     2      0
                       _EnhancedRead
                            ___almod
                           _init_cal
                           _init_tms
                           _line_cal
                             _printf
                           _read_cal
                               _setA
                               _setB
                               _setC
                               _setD
 ---------------------------------------------------------------------------------
 (1) _setD                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setC                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setB                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setA                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_cal                                            19    19      0    1040
                                             16 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              30    22      8    3002
                                             28 COMRAM    21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _line_cal                                            29    29      0    3603
                                             30 COMRAM     5     5      0
                                              0 BANK0     24    24      0
                            ___aldiv
                            ___awdiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     540
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     558
                                             16 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     599
                                             16 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _init_tms                                             0     0      0       0
                          _MotorsPWM
                            _an_init
                            _init_io
                         _init_wixel
 ---------------------------------------------------------------------------------
 (2) _init_wixel                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_io                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _an_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorsPWM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_cal                                             2     2      0     198
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     587
                                             16 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (1) _EnhancedRead                                         4     4      0    1259
                                             30 COMRAM     4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1061
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _enc                                                 16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EnhancedRead
     ___awdiv
       ___wmul (ARG)
   ___almod
   _init_cal
   _init_tms
     _MotorsPWM
     _an_init
     _init_io
     _init_wixel
   _line_cal
     ___aldiv
     ___awdiv
       ___wmul (ARG)
     ___lmul
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_cal
   _setA
   _setB
   _setC
   _setD

 _enc (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1A      70       5       70.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      4D       1       81.9%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BD      11        0.0%
DATA                 0      0      BD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Feb  8 19:59:43 2017

                      _i 0048                       l57 0A96                       l93 10B0  
           ___awdiv@sign 001C                       _an 0088                       _cs 0044  
                     _es 0040                       _lp 004C                       _ls 0036  
    ___wmul@multiplicand 0013              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l103 108E                      l130 04B2                      l315 138E  
                    l779 1198                      l789 1272             __CFG_CPB$OFF 000000  
                    _PR2 000FCB             __CFG_CPD$OFF 000000             __CFG_BOR$OFF 000000  
                    _enc 0008                      prod 000FF3                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l3012 09EA  
                   l3030 0AD6                     l3022 0A8C                     l3016 0A00  
                   l3034 0AEA                     l2510 0FBE                     l2520 0FE0  
                   l2504 0FAE                     l2432 1372                     ?_enc 0001  
                   l2516 0FD4                     l2532 1006                     l2460 0D72  
                   l2444 110A                     l2620 0B1A                     l2518 0FDC  
                   l2550 1172                     l2702 0CD4                     l2630 0B3E  
                   l2536 1014                     l2528 0FFC                     l2472 0DAC  
                   l2448 111E                     l2712 0D34                     l2624 0B2A  
                   l2722 109C                     l2474 0DB8                     l2466 0D8A  
                   l2546 1166                     l2570 1254                     l2706 0CE6  
                   l2626 0B38                     l2714 0D3C                     l2810 027E  
                   l2492 0E10                     l2484 0DEC                     l2476 0DBC  
                   l2548 116E                     l2708 0CEC                     l2660 0C1A  
                   l2636 0B6C                     l2804 0262                     l2718 1094  
                   l2750 1036                     l2558 118E                     l2574 1268  
                   l2566 1248                     l2646 0BC8                     l2814 0314  
                   l2822 038A                     l2488 0DFA                     l2568 1250  
                   l2672 0C46                     l2648 0BEE                     l2832 043C  
                   l2762 106E                     l2746 1026                     l2690 0CA2  
                   l2682 0C84                     l2658 0C16                     l2940 0F64  
                   l2932 0F30                     l2924 0F0A                     l2756 1056  
                   l2860 0612                     l2852 0574                     l2684 0C8C  
                   l2828 03A6                     l2934 0F3C                     l2758 105E  
                   l2846 04FC                     l2678 0C60                     l2774 002E  
                   l2936 0F40                     l2944 0F72                     l2928 0F1E  
                   l2696 0CB8                     l2792 0156                     l2960 0822  
                   l2698 0CC0                     l2778 00C4                     l2786 013A  
                   l2970 0886                     l2962 0840                     l2948 0F88  
                   l2796 01EC                     l2980 0906                     l2964 0844  
                   l2878 07D2                     l2982 090A                     l2974 08C4  
                   l2958 081C                     l2976 08C8                     l2968 0882  
                   l2986 093C                     l2996 096C                     STR_1 7CB3  
                   STR_2 7C2E                     STR_3 7BFF                     STR_4 7CDB  
                   STR_5 7C88                     STR_6 7C5C                     u2510 0154  
                   u2600 04FA                     u2540 027C                     u2480 002C  
                   u2570 03A4                     u2810 0864                     u2830 08A6  
                   u2850 08E8                     u2940 0AC2                     u2908 09AE  
                   u2870 092A                     u2890 09AC                     u2891 09A6  
                   _TXIF 007CF4                     _main 0804                     _maxs 009A  
                   _setA 13B6                     _setB 13AC                     _setC 13A2  
                   _setD 1398                     _mins 00A8                     _time 0060  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 004E                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000             ___param_bank 000000  
                  ??_enc 0001            __CFG_PLLDIV$5 000000          __end_of___aldiv 0E22  
        __end_of___almod 0F9A                    ?_main 0001                    ?_setA 0001  
                  ?_setB 0001                    ?_setC 0001                    ?_setD 0001  
        __end_of___awdiv 101E                    _CMCON 000FB4          ___awdiv@divisor 0019  
         __CFG_DEBUG$OFF 000000          __end_of___lwdiv 11A2          __end_of___lwmod 127C  
                  i2l275 0EB2          ___awdiv@counter 001B                    _TMR0H 000FD7  
                  _TMR1H 000FCF                    _TMR0L 000FD6                    _TMR1L 000FCE  
                  _SPBRG 000FAF            __CFG_USBDIV$2 000000                    _TXREG 000FAD  
        __end_of_an_init 1312            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000      ___lmul@multiplicand 0015  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 7BFF          __end_of_init_io 12E8  
        __end_of_isdigit 137A                    _putch 138C                    main@i 00CE  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000     __end_of_EnhancedRead 10FA           __CFG_MCLRE$OFF 000000  
        __initialization 11F4             __end_of_main 0B10             __end_of_setA 13C0  
           __end_of_setB 13B6             __end_of_setC 13AC             __end_of_setD 13A2  
                 ??_main 0032                   ??_setA 0011                   ??_setB 0011  
                 ??_setC 0011                   ??_setD 0011            __activetblptr 000002  
        __CFG_CCP2MX$OFF 000000                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 _CCPR1L 000FBE                   _CCPR2L 000FBB         ___awdiv@dividend 0017  
                 ?_putch 0001                   i2l2344 0E68                   i2l2354 0EA8  
                 i2l2348 0E78                   _TMR0IF 007F92                   _SPBRGH 000FB0  
                 _TMR2ON 007E52           __CFG_XINST$OFF 000000                   ___lmul 10FA  
              ??___aldiv 0019                ??___almod 0019                   ___wmul 1312  
              ??___awdiv 001B           __CFG_STVREN$ON 000000                ??___lwdiv 0015  
              ??___lwmod 001C         __end_of_line_cal 0804         __end_of_init_cal 1090  
       __end_of_read_cal 04B4         __end_of_init_tms 11F4                   clear_0 121A  
              ??_an_init 0011         ___awdiv@quotient 001D                   _printf 0B10  
                 _status 004A       __size_of_MotorsPWM 003E                ??_init_io 0011  
           __pdataCOMRAM 0036                ??_isdigit 0011             __mediumconst 7BF4  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          _line_cal$2242 00B6               __accesstop 0060  __end_of__initialization 122C  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_putch 1398                  ??_putch 0011               __pbssBANK0 0060  
  __size_of_EnhancedRead 006A        __end_of_MotorsPWM 12BA                  ?___lmul 0011  
                ?___wmul 0011           ___lmul@product 0019                  ?_printf 001D  
                _T2CKPS0 007E50                  _T2CKPS1 007E51             _EnhancedRead 1090  
        __CFG_VREGEN$OFF 000000                ?_line_cal 0001                ?_init_cal 0001  
              ?_read_cal 0001                ?_init_tms 0001                  __Hparam 0000  
                __Lparam 0000                  ___aldiv 0D56                  ___almod 0EEE  
                ___awdiv 0F9A          __size_of___lmul 0056          __size_of___wmul 0026  
                ___lwdiv 1150                  ___lwmod 123A                  __pcinit 11F4  
                _an_init 12E8                  __ramtop 0800               _init_wixel 1338  
                __ptext0 0804                  __ptext1 1398                  __ptext2 13A2  
                __ptext3 13AC                  __ptext4 13B6                  __ptext5 0012  
                __ptext6 0B10                  __ptext7 138C                  __ptext8 135C  
                __ptext9 123A          __size_of_printf 0246                _T0CONbits 000FD5  
              _T1CONbits 000FCD                  _dpowers 7BF5                _T2CONbits 000FCA  
           __size_of_enc 0EE6                  _init_io 12BA                  _isdigit 135C  
       ___aldiv@dividend 0011           __pintcode_body 0E22     end_of_initialization 122C  
             ??_line_cal 001F               ??_init_cal 0011            __Lmediumconst 7BF4  
                int_func 0E22               ??_read_cal 0011               ??_init_tms 0011  
              _RCSTAbits 000FAB                  printf@c 0031                  printf@f 001D  
       ___aldiv@quotient 001B                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
              _PORTAbits 000F80                _PORTBbits 000F81                _PORTCbits 000F82  
              _PORTDbits 000F83                _PORTEbits 000F84                _TRISAbits 000F92  
              _TRISBbits 000F93                _TRISCbits 000F94                _TRISDbits 000F95  
              _TRISEbits 000F96              _CCP1CONbits 000FBD              printf@width 002F  
            _CCP2CONbits 000FBA                _TXSTAbits 000FAC           __end_of___lmul 1150  
         __end_of___wmul 1338              _BAUDCONbits 000FB8            __pidataCOMRAM 137A  
            ?_init_wixel 0001           __end_of_printf 0D56      start_initialization 11F4  
            __end_of_enc 0EEE                _MotorsPWM 127C                 ??___lmul 0019  
               ??___wmul 0015         __CFG_LPT1OSC$OFF 000000                 ??_printf 0025  
           _line_cal$505 00C2             _line_cal$507 00C4              __pbssCOMRAM 0048  
          __pcstackBANK0 00B6             _isdigit$1917 0012             _read_cal$491 001A  
           _read_cal$493 001C             _read_cal$495 001E             _read_cal$497 0020  
    __size_of_init_wixel 0024        __size_of_line_cal 0350        __size_of_init_cal 0072  
      __size_of_read_cal 04A2        __size_of_init_tms 0052         ___lwdiv@dividend 0011  
             ?_MotorsPWM 0001                __pintcode 0008            __pmediumconst 7BF4  
               ?___aldiv 0011                 ?___almod 0011                 ?___awdiv 0017  
               ?___lwdiv 0011                 ?___lwmod 0018                 ?_an_init 0001  
       ___almod@dividend 0011                 ?_init_io 0001                 ?_isdigit 0001  
       ___lwdiv@quotient 0016           __size_of_putch 000C          ___aldiv@divisor 0015  
               _T2OUTPS0 007E53                 _T2OUTPS1 007E54                 _T2OUTPS2 007E55  
               _T2OUTPS3 007E56          ___aldiv@counter 0019            EnhancedRead@i 0022  
         ___wmul@product 0015                 _UCFGbits 000F6F                 _RCONbits 000FD0  
       __CFG_WDTPS$32768 000000                 _UCONbits 000F6D               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0        ___wmul@multiplier 0011  
             printf@flag 002E               printf@prec 002B        ___lmul@multiplier 0011  
            _INTCON2bits 000FF1                copy_data0 1208                 __Hrparam 0000  
              line_cal@a 00BA                line_cal@b 00BE                line_cal@i 00CA  
              line_cal@j 00CC                 __Lrparam 0000                init_cal@i 0011  
            ??_MotorsPWM 0011            line_cal@value 00C6                read_cal@i 0022  
       __size_of___aldiv 00CC         __size_of___almod 00AC         __size_of___awdiv 0084  
       __size_of___lwdiv 0052         __size_of___lwmod 0042             ??_init_wixel 0011  
       __size_of_an_init 002A         __size_of_init_io 002E         __size_of_isdigit 001E  
        ___lwdiv@divisor 0013          ___lwdiv@counter 0015                 __ptext10 1150  
               __ptext11 04B4                 __ptext20 101E                 __ptext12 1312  
               __ptext21 0EEE                 __ptext13 10FA                 __ptext22 1090  
               __ptext14 0D56                 __ptext23 0F9A                 __ptext15 11A2  
               __ptext16 1338                 __ptext17 12BA                 __ptext18 12E8  
               __ptext19 127C          ___almod@divisor 0015          ___almod@counter 0019  
               _line_cal 04B4                 _init_cal 101E            __size_of_main 030C  
               _read_cal 0012            __size_of_setA 000A            __size_of_setB 000A  
          __size_of_setC 000A                 _init_tms 11A2            __size_of_setD 000A  
     __end_of_init_wixel 135C                 int$flags 004E          EnhancedRead@aux 0020  
              printf@val 002C    __CFG_CPUDIV$OSC1_PLL2 000000                putch@data 0011  
          ?_EnhancedRead 0001               _INTCONbits 000FF2                 isdigit@c 0013  
               intlevel2 0000         ___lwmod@dividend 0018               _OSCCONbits 000FD3  
               printf@ap 0029           ??_EnhancedRead 001F          ___lwmod@divisor 001A  
        ___lwmod@counter 001C             ___aldiv@sign 001A       __CFG_FOSC$HSPLL_HS 000000  
           ___almod@sign 001A  
